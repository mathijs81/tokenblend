{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/OrderPlanDialog.vue?3d36","webpack:///./src/views/EnzymeSliders.vue?ce1f","webpack:///./src/App.vue?45c2","webpack:///./src/assets/tokenblend.png","webpack:///./src/views/Home.vue?7e7a","webpack:///./src/views/WalletAccount.vue?d904","webpack:///./src/assets/idle.png","webpack:///./src/assets sync ^\\.\\/.*\\.png$","webpack:///./src/components/SliderPanel.vue?adde","webpack:///./src/components/Farming.vue?d8bf","webpack:///./src/assets/uniswap.png","webpack:///./src/App.vue","webpack:///./src/data/subgraph.ts","webpack:///./src/data/sdk.ts","webpack:///./src/data/enzymegraph.ts","webpack:///./src/web3/web3Service.ts","webpack:///./src/web3/enzymeService.ts","webpack:///./src/App.vue?3acc","webpack:///./src/App.vue?dfb6","webpack:///./src/views/EnzymeAccount.vue","webpack:///./src/views/EnzymeSliders.vue","webpack:///./src/components/OrderPlanDialog.vue","webpack:///./src/util/numbers.ts","webpack:///./src/orderplan/orderplan.ts","webpack:///./src/util/tokens.ts","webpack:///./src/data/uniswap_subgraph.ts","webpack:///./src/web3/idleService.ts","webpack:///./src/web3/paraswapService.ts","webpack:///./src/web3/uniswapService.ts","webpack:///./src/components/OrderPlanDialog.vue?871f","webpack:///./src/components/OrderPlanDialog.vue?ca45","webpack:///./src/components/SliderPanel.vue","webpack:///./src/util/tokenDistribution.ts","webpack:///./src/components/SliderPanel.vue?c3bb","webpack:///./src/components/SliderPanel.vue?4b1d","webpack:///./src/util/sliderUtil.ts","webpack:///./src/util/tokenlist.ts","webpack:///./src/views/EnzymeSliders.vue?853b","webpack:///./src/views/EnzymeSliders.vue?3f11","webpack:///./src/views/FarmingStrategy.vue","webpack:///./src/components/Farming.vue","webpack:///./src/components/Farming.vue?3092","webpack:///./src/components/Farming.vue?57cb","webpack:///./src/util/getGasPrice.ts","webpack:///./src/views/FarmingStrategy.vue?2e58","webpack:///./src/views/FarmingStrategy.vue?c14e","webpack:///./src/views/EnzymeAccount.vue?28bd","webpack:///./src/views/EnzymeAccount.vue?661c","webpack:///./src/views/Home.vue","webpack:///./src/views/homecontent.txt","webpack:///./src/views/Home.vue?d5e7","webpack:///./src/views/Home.vue?ab8c","webpack:///./src/views/WalletAccount.vue","webpack:///./src/components/Web3Info.vue","webpack:///./src/components/Web3Info.vue?ae2e","webpack:///./src/components/Web3Info.vue?b8e6","webpack:///./src/util/stakedTokens.ts","webpack:///./src/views/WalletAccount.vue?7973","webpack:///./src/views/WalletAccount.vue?1a35","webpack:///./src/router/index.ts","webpack:///./src/main.ts","webpack:///./src/assets/logo.png","webpack:///./src/assets/paraswap.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","map","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve","class","src","AccessorSetEvent_OrderBy","Account_OrderBy","AdapterBlacklistAddressesAddedEvent_OrderBy","AdapterBlacklistAddressesRemovedEvent_OrderBy","AdapterBlacklistSetting_OrderBy","AdapterDeregisteredEvent_OrderBy","AdapterRegisteredEvent_OrderBy","AdapterWhitelistAddressesAddedEvent_OrderBy","AdapterWhitelistAddressesRemovedEvent_OrderBy","AdapterWhitelistSetting_OrderBy","AddTrackedAssetsTrade_OrderBy","AggregatorUpdatedEvent_OrderBy","AllSharesOutstandingForcePaidForFundEvent_OrderBy","ApprovalEvent_OrderBy","ApproveAssetsTrade_OrderBy","AssetAmount_OrderBy","AssetBlacklistAddressesAddedEvent_OrderBy","AssetBlacklistAddressesRemovedEvent_OrderBy","AssetBlacklistSetting_OrderBy","AssetPrice_OrderBy","AssetType","AssetWhitelistAddressesAddedEvent_OrderBy","AssetWhitelistAddressesRemovedEvent_OrderBy","AssetWhitelistSetting_OrderBy","AssetWithdrawnEvent_OrderBy","Asset_OrderBy","AuthUserAddedForFundEvent_OrderBy","AuthUserRemovedForFundEvent_OrderBy","BuySharesCallerWhitelistAddressesAddedEvent_OrderBy","BuySharesCallerWhitelistAddressesRemovedEvent_OrderBy","BuySharesCallerWhitelistSetting_OrderBy","CallOnIntegrationExecutedForFundEvent_OrderBy","ChainlinkAggregatorProxyType","ChainlinkAggregatorProxy_OrderBy","ClaimRewardsAndReinvestTrade_OrderBy","ClaimRewardsAndSwapTrade_OrderBy","ClaimRewardsTrade_OrderBy","ComptrollerEventInterface_OrderBy","ComptrollerLibSetEvent_OrderBy","ComptrollerProxyDeployedEvent_OrderBy","ComptrollerProxyStatus","ComptrollerProxy_OrderBy","Cron_OrderBy","CurrencyPrice_OrderBy","Currency_OrderBy","CurveAssetType","CurvePoolAssetDetail_OrderBy","DailyAssetPriceCandle_OrderBy","DailyCurrencyPriceCandle_OrderBy","DailyFundState_OrderBy","DailyPriceCandleGroup_OrderBy","DerivativeAddedEvent_OrderBy","DerivativeRemovedEvent_OrderBy","DerivativeType","DerivativeUpdatedEvent_OrderBy","DispatcherOwnershipTransferredEvent_OrderBy","EntranceRateBurnFeeSetting_OrderBy","EntranceRateBurnFeeSettingsAddedEvent_OrderBy","EntranceRateBurnFeeSettledEvent_OrderBy","EntranceRateBurnFeeState_OrderBy","EntranceRateDirectFeeSetting_OrderBy","EntranceRateDirectFeeSettingsAddedEvent_OrderBy","EntranceRateDirectFeeSettledEvent_OrderBy","EntranceRateDirectFeeState_OrderBy","EthUsdAggregatorSetEvent_OrderBy","EventInterface_OrderBy","FeeDeregisteredEvent_OrderBy","FeeEnabledForFundEvent_OrderBy","FeeHook","FeeManager_OrderBy","FeeRegisteredEvent_OrderBy","FeeSettingInterface_OrderBy","FeeSettledForFundEvent_OrderBy","FeeSharesChangeInterface_OrderBy","FeeState_OrderBy","Fee_OrderBy","FeesRecipientSetForFundEvent_OrderBy","FundDeployerSetEvent_OrderBy","FundEventInterface_OrderBy","FundStateInterface_OrderBy","FundState_OrderBy","Fund_OrderBy","GuaranteedRedemptionAdapterAddedEvent_OrderBy","GuaranteedRedemptionAdapterRemovedEvent_OrderBy","GuaranteedRedemptionFundSettingsSetEvent_OrderBy","GuaranteedRedemptionRedemptionWindowBufferSetEvent_OrderBy","GuaranteedRedemptionSetting_OrderBy","GuaranteedRedemption_OrderBy","HoldingState_OrderBy","HourlyAssetPriceCandle_OrderBy","HourlyCurrencyPriceCandle_OrderBy","HourlyFundState_OrderBy","HourlyPriceCandleGroup_OrderBy","IndividualFeeStateInterface_OrderBy","IntegrationAdapter_OrderBy","IntegrationManager_OrderBy","IntegrationMethod","InvestmentSharesChangeInterface_OrderBy","InvestmentState_OrderBy","Investment_OrderBy","InvestorWhitelistAddressesAddedEvent_OrderBy","InvestorWhitelistAddressesRemovedEvent_OrderBy","InvestorWhitelistSetting_OrderBy","LendAndStakeTrade_OrderBy","LendTrade_OrderBy","ManagementFeeActivatedForMigratedFundEvent_OrderBy","ManagementFeeSetting_OrderBy","ManagementFeeSettingsAddedEvent_OrderBy","ManagementFeeSettledEvent_OrderBy","ManagementFeeState_OrderBy","MaxConcentrationSetEvent_OrderBy","MaxConcentrationSetting_OrderBy","MigratedSharesDuePaidEvent_OrderBy","MigrationCancelledEvent_OrderBy","MigrationExecutedEvent_OrderBy","MigrationInCancelHookFailedEvent_OrderBy","MigrationOutHookFailedEvent_OrderBy","MigrationSignaledEvent_OrderBy","MigrationTimelockSetEvent_OrderBy","Migration_OrderBy","MigratorSetEvent_OrderBy","MinMaxInvestmentFundSettingsSetEvent_OrderBy","MinMaxInvestmentSetting_OrderBy","MonthlyAssetPriceCandle_OrderBy","MonthlyCurrencyPriceCandle_OrderBy","MonthlyFundState_OrderBy","MonthlyPriceCandleGroup_OrderBy","MultiLendTrade_OrderBy","MultiRedeemTrade_OrderBy","MultiTokenSwapTrade_OrderBy","NetworkAssetHolding_OrderBy","NetworkEventInterface_OrderBy","NetworkState_OrderBy","Network_OrderBy","NewFundCreatedEvent_OrderBy","NominatedOwnerRemovedEvent_OrderBy","NominatedOwnerSetEvent_OrderBy","OrderDirection","OverridePauseSetEvent_OrderBy","OwnerSetEvent_OrderBy","OwnershipTransferredEvent_OrderBy","PerformanceFeeActivatedForFundEvent_OrderBy","PerformanceFeePaidOutEvent_OrderBy","PerformanceFeePerformanceUpdatedEvent_OrderBy","PerformanceFeeSetting_OrderBy","PerformanceFeeSettingsAddedEvent_OrderBy","PerformanceFeeSharePriceUpdatedEvent_OrderBy","PerformanceFeeState_OrderBy","PeriodicFundStateInterface_OrderBy","PolicyDeregisteredEvent_OrderBy","PolicyDisabledForFundEvent_OrderBy","PolicyEnabledForFundEvent_OrderBy","PolicyHook","PolicyManager_OrderBy","PolicyRegisteredEvent_OrderBy","PolicySettingInterface_OrderBy","Policy_OrderBy","PortfolioState_OrderBy","PreRedeemSharesHookFailedEvent_OrderBy","PrimitiveAddedEvent_OrderBy","PrimitiveRemovedEvent_OrderBy","RedeemTrade_OrderBy","ReleaseStatusSetEvent_OrderBy","Release_OrderBy","RemoveTrackedAssetsTrade_OrderBy","RequestCanceledEvent_OrderBy","RequestCreatedEvent_OrderBy","RequestExecutedEvent_OrderBy","RequestExecutorAddedEvent_OrderBy","RequestExecutorRemovedEvent_OrderBy","SettlementType","ShareChangeType","ShareState_OrderBy","SharesBoughtEvent_OrderBy","SharesChangeInterface_OrderBy","SharesOutstandingPaidForFundEvent_OrderBy","SharesRedeemedEvent_OrderBy","SharesRequestExecutor_OrderBy","SharesRequestInterface_OrderBy","SharesRequestType","SharesRequest_OrderBy","SharesRequestorProxyDeployedEvent_OrderBy","SharesRequestor_OrderBy","SharesTokenSymbolSetEvent_OrderBy","StakeTrade_OrderBy","TokenSwapTrade_OrderBy","TrackedAssetAddedEvent_OrderBy","TrackedAssetRemovedEvent_OrderBy","TrackedAssetsLimitSetEvent_OrderBy","Trade_OrderBy","Transaction_OrderBy","TransferEvent_OrderBy","UniswapV2PoolAssetDetail_OrderBy","UnknownPolicySetting_OrderBy","UnstakeAndRedeemTrade_OrderBy","UnstakeTrade_OrderBy","ValueInterpreterSetEvent_OrderBy","VaultCallDeregisteredEvent_OrderBy","VaultCallRegisteredEvent_OrderBy","VaultLibSetEvent_OrderBy","VaultProxyDeployedEvent_OrderBy","VaultProxySetEvent_OrderBy","_SubgraphErrorPolicy_","model","items","start","to","AssetsDocument","CurrentReleaseContractsDocument","FundsDocument","VaultDocument","defaultWrapper","action","_operationName","getSdk","client","withWrapper","assets","variables","requestHeaders","wrappedRequestHeaders","request","currentReleaseContracts","funds","vault","gql","endpoint","prodEndpoint","kovanEndpoint","prod","getTokens","account","address","toLowerCase","getContracts","network","currentRelease","getProvider","timeout","ethProvider","ethereum","provider","console","error","log","method","message","includes","enable","initializing","providerPresent","this","state","externalProvider","signer","copy","undefined","getBlock","init","getNetwork","chainId","listAccounts","accounts","connected","getBalance","balance","formatEther","errorCallback","lastErrorMessage","then","providers","Web3Provider","getSigner","intervalHandler","setInterval","updateData","catch","finally","extractErrorMessage","alternativeMessage","web3Service","selectedFund","contracts","status","addr","isMainnet","fund","comptrollerAddress","accessor","selectFundIfNeeded","every","route","minIncomingAsset","minOutgoinAsset","success","adapterAddress","uniswapV2Adapter","integrationAddress","integrationManager","orderArgs","path","minIncomingAssetAmount","outgoingAssetAmount","callArgs","adapter","selector","encodedCallArgs","contract","transaction","callOnExtension","args","CallOnIntegration","send","receipt","transactionHash","enzymeService","setup","walletLabel","substr","getFunds","enzymeItems","label","icon","params","render","__scopeId","showFarming","distributionText","orderVisible","plan","tokenData","tokens","distribution","visible","displayPlan","orderPlan","isEnzyme","scope","style","colspan","header","$emit","$event","orderList","order","sendAmount","fromToken","formatMaxDigits","toUnsafeFloat","logoUri","fromName","toToken","toName","chosenPlatform","platformLogo","inProgress","options","isSwap","calculateBest","execute","executeButtonText","option","platform","formatResult","fixedNum","from","reduceDecimalString","toString","decimals","parts","split","toleranceMin","amount","tolerance","lte","toleranceAmount","fixedToBigNumber","bigNumberToFixed","mulUnsafe","gt","compareBignumber","bn1","bn2","eq","reduceDecimals","stringRep","fromString","parseUnits","formatUnits","digits","OrderType","numberMixin","methods","formatDollars","maxDigits","formatDollarPrice","k","inbetweenCurrency","currentPortfolio","desiredDistribution","orders","switchTokenData","find","token","DIFFERENCE_THRESHOLD","totalValue","forEach","ownedAmount","valueSold","buyOrders","valueBought","currentFraction","desiredFraction","sellFraction","ordertype","SWAP","buyFraction","adjustMultiplier","defaultOrderPlanner","calcPercentageMap","percentageMap","valuePart","Math","round","getTokenBalance","contractAddress","abi","balanceOf","getTokenAllowance","tokenAddress","accountAddress","spenderAddress","allowance","tokenApprove","approve","Bundle_OrderBy","Burn_OrderBy","Collect_OrderBy","Factory_OrderBy","Flash_OrderBy","Mint_OrderBy","PoolDayData_OrderBy","PoolHourData_OrderBy","Pool_OrderBy","Position_OrderBy","Swap_OrderBy","TickDayData_OrderBy","TickHourData_OrderBy","Tick_OrderBy","TokenDayData_OrderBy","TokenHourData_OrderBy","Token_OrderBy","UniswapDayData_OrderBy","idleAddresses","DAI","USDC","USDT","WBTC","WETH","symbols","Set","symbol","withSigner","testContract","Promise","all","values","parseEther","balanceMap","index","entries","ownedBn","owned","getContract","tokenPrice","stakedValue","stakedUnderlyingValue","description","hasStaked","amountBn","unlimitedAllowance","pow","sub","ok","wait","finalAmount","mintIdleToken","tokenPriceWithFee","priceWithFee","redeemAmount","divUnsafe","redeemIdleToken","idleService","paraSwap","setWeb3Provider","getExternalProvider","getRate","referrer","priceRoute","predictedOutput","destAmount","getAllowance","allowanceBn","sendBn","lt","approveToken","allowanceResult","getTransaction","minAmount","div","buildTx","tx","ethersTx","convertWeb3ToEthers","sendTransaction","sentTx","gasLimit","gasPrice","paraswapService","TokenPriceDocument","isTransactionResult","arg","planUniswap","v2","v3","estimatedToAmount","plannedOrder","versions","uniswapPair","fromTokenContractAddress","toTokenContractAddress","ethereumAddress","ethereumProvider","settings","slippage","deadlineMinutes","disableMultihops","uniswapVersions","createFactory","factory","formattedInput","getFromTokenBalance","currentBalance","findBestRoute","input","bestRouteQuote","fromBn","outputFixed","expectedConvertQuote","minOutput","toBn","fromAmount","minimummToAmount","routePathArray","pair","trade","tradeContext","approvalTransaction","approvedTx","approvedReceipt","destroy","executeUniswapV2Trade","getTokenPrices","addresses","addressList","queryResult","asMap","reduce","uniswapService","props","Boolean","type","required","emits","uniswapOption","paraswapOption","prepareOrder","uniswapOutput","getPredictedOutput","output","paraswapOutput","sort","a","b","$props","executeFunction","executeForEnzyme","DEPOSIT","depositToken","REDEEM","redeemToken","assign","fixed","newAmount","mixins","viewBox","cx","cy","fill","stroke","stroke-width","selectedDistribution","distributions","optionLabel","placeholder","totalAmount","totalPercentage","toFixed","title","formatPriceLong","formatPrice","tokenTitle","formatOwned","withStaking","isStakedToken","stroke-dasharray","getStroke","stroke-dashoffset","formatValue","modelValue","parseFloat","lending","AAVE","MKR","COMP","UNI","YFI","SNX","dexes","CRV","BNT","GNO","convert","dist","sum","v","getDistributions","equalWeighted","filteredMap","filter","it","filtered","adjustRatios","before","after","defaultKey","N","totalAfter","abs","adjustment","changedKeys","has","newDefault","max","add","unmovedTotal","adjustmentPerValue","current","adjust","total","isNaN","min","Array","components","Dropdown","emit","wethContract","prevMap","normalize","debounce","itemValue","_token","stakedPercentage","calcSliderChangeResult","old","valueChange","tokensChanged","tokensTotal","entry","original","hasChanges","tokenListUrls","addressFilter","fetchTokens","results","url","fetch","addedTokens","response","json","tokenList","logoURI","replace","name1","name2","trackAssets","lib","getTrackedAssets","holdings","tokenMap","tokenContract","partialTokens","tokenRequestResult","Map","tokenInfoMap","asTokenData","asset","derivativeType","price","startingDistribution","selectFund","assetMap","daiValue","ownedBigNumber","fromValue","createPlan","enzymeState","SliderPanel","OrderPlanDialog","item","msg","String","getGasPrice","maxWait","gasPriceRange","fast","namesOnly","FarmingStrategy","Farming","availableFunds","query","farming","EnzymeSliders","content","href","target","noFunds","orderDialogVisible","publicPath","connect","reduceTokens","allTokens","tokensBySymbol","tokenArray","nonStakedIndex","findIndex","nonStakedItem","newToken","_stakedToken","stakedToken","addUnsafe","wrapDeposits","orderplan","availableSymbols","originalTokens","tokenStatus","set","redeemAmounts","subUnsafe","freeAmount","isNegative","currentlyRedeemed","unshift","originalToken","idleTokenList","getTokenData","idleTokens","balances","usdAddress","tokenPriceMap","tokenPrices","multiplier","derivedETH","tokenInfo","basicTokens","withStakingPlan","supportedSymbols","Web3Info","routes","component","Home","EnzymeAccount","WalletAccount","router","history","app","App","use","mount"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAG/Be,GAAqBA,EAAoBhB,GAE5C,MAAMO,EAASC,OACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrB,IAAO,GAGJK,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU6B,QAGnC,IAAIC,EAASF,EAAiB5B,GAAY,CACzCK,EAAGL,EACH+B,GAAG,EACHF,QAAS,IAUV,OANAf,EAAQd,GAAUW,KAAKmB,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG/DI,EAAOC,GAAI,EAGJD,EAAOD,QAKfH,EAAoBM,EAAIlB,EAGxBY,EAAoBO,EAAIL,EAGxBF,EAAoBQ,EAAI,SAASL,EAASM,EAAMC,GAC3CV,EAAoBW,EAAER,EAASM,IAClC3B,OAAO8B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEV,EAAoBe,EAAI,SAASZ,GACX,qBAAXa,QAA0BA,OAAOC,aAC1CnC,OAAO8B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DpC,OAAO8B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKxC,OAAOyC,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBxC,OAAO8B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBQ,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAO,YACtC,WAA8B,OAAOA,GAEtC,OADAJ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASgB,EAAQC,GAAY,OAAO9C,OAAOC,UAAUC,eAAeC,KAAK0C,EAAQC,IAGzG5B,EAAoB6B,EAAI,eAExB,IAAIC,EAAaC,OAAO,gBAAkBA,OAAO,iBAAmB,GAChEC,EAAmBF,EAAW3C,KAAKsC,KAAKK,GAC5CA,EAAW3C,KAAOf,EAClB0D,EAAaA,EAAWG,QACxB,IAAI,IAAItD,EAAI,EAAGA,EAAImD,EAAWjD,OAAQF,IAAKP,EAAqB0D,EAAWnD,IAC3E,IAAIU,EAAsB2C,EAI1BzC,EAAgBJ,KAAK,CAAC,EAAE,kBAEjBM,K,6ECvJT,W,4FCAA,W,wICAA,W,oFCAAW,EAAOD,QAAU,IAA0B,+B,oDCA3C,W,6ECAA,W,uBCAAC,EAAOD,QAAU,IAA0B,yB,2FCA3C,IAAI+B,EAAM,CACT,aAAc,OACd,aAAc,OACd,iBAAkB,OAClB,mBAAoB,OACpB,gBAAiB,QAIlB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOpC,EAAoBqC,GAE5B,SAASC,EAAsBF,GAC9B,IAAIpC,EAAoBW,EAAEuB,EAAKE,GAAM,CACpC,IAAIG,EAAI,IAAIC,MAAM,uBAAyBJ,EAAM,KAEjD,MADAG,EAAEE,KAAO,mBACHF,EAEP,OAAOL,EAAIE,GAEZD,EAAeO,KAAO,WACrB,OAAO5D,OAAO4D,KAAKR,IAEpBC,EAAeQ,QAAUL,EACzBlC,EAAOD,QAAUgC,EACjBA,EAAeE,GAAK,Q,kCC1BpB,W,yDCAA,W,qBCAAjC,EAAOD,QAAU,IAA0B,4B,6RCElCyC,MAAM,W,GACJA,MAAM,a,EAIF,yBAAiD,OAA5CC,IAAA,IAAwBD,MAAM,a,wCAAc,e,GAMvDA,MAAM,a,sCC8FHE,EAmJAC,EAsGAC,EA6FAC,EAsGAC,EAiFAC,EA8EAC,EA4FAC,EA6FAC,EAsGAC,EAkGAC,EA+FAC,EAgKAC,EA6GAC,EAiGAC,EA6KAC,EA2FAC,EA6FAC,EAsGAC,EA4DAC,EAOAC,EA2FAC,EA6FAC,EAsGAC,EAyGAC,EAiLAC,EA+GAC,EA8FAC,EA2FAC,EAoFAC,EAwFAC,EAuKAC,EAwBAC,EAqEAC,GAiGAC,GAkGAC,GAiGAC,GAgEAC,GA8DAC,GAsLAC,GAaAC,GA4IAC,GAiHAC,GA4GAC,GA0EAC,GAYAC,GAyJAC,GA8KAC,GAgLAC,GA+FAC,GA+DAC,GA8EAC,GA+DAC,GAOAC,GAkGAC,GA+EAC,GAsFAC,GAyEAC,GAsGAC,GAwFAC,GAuFAC,GAyEAC,GAsGAC,GAwFAC,GA+EAC,GA+CAC,GA6FAC,GAoGAC,GAUAC,GAmDAC,GAgGAC,GAgFAC,GAgMAC,GAiIAC,GAgFAC,GA+CAC,GA2GAC,GA8QAC,GA8DAC,GA2FAC,GAkGAC,GA2NAC,GA2GAC,GA8DAC,GA+FAC,GAoEAC,GAoGAC,GAkCAC,GAmGAC,GA0KAC,GAgLAC,GA+FAC,GA+DAC,GA4EAC,GA0EAC,GAiDAC,GAMAC,GAoJAC,GAoHAC,GAgFAC,GA8FAC,GA6FAC,GAiGAC,GAgHAC,GA2HAC,GAkFAC,GAsFAC,GAyEAC,GAgGAC,GAiGAC,GAyFAC,GA4FAC,GAyIAC,GAwGAC,GAwFAC,GA0JAC,GA8JAC,GAmFAC,GAkEAC,GA2FAC,GAgGAC,GAiGAC,GAsGAC,GA2KAC,GAgLAC,GA+FAC,GA+DAC,GA6GAC,GAgHAC,GAgHAC,GAwFAC,GA8CAC,GAgGAC,GA0DAC,GAiMAC,GAuEAC,GA8DAC,GAOAC,GAiEAC,GA6FAC,GA+EAC,GAuFAC,GAiGAC,GA2GAC,GA2GAC,GAoFAC,GAiGAC,GA4HAC,GA2FAC,GAgGAC,GA8EAC,GA6FAC,GASAC,GAmDAC,GAiFAC,GAkFAC,GAgDAC,GA2EAC,GAsGAC,GAyFAC,GAgEAC,GA89GAC,GAgKAC,GA24BAC,GA8JAC,GAqGAC,GAsGAC,GAqHAC,GAiGAC,GA8FAC,GASAC,GAUAC,GAiFAC,GA0JAC,GA8HAC,GAmKAC,GA6IAC,GA+EAC,GAiGAC,GAWAC,GAmFAC,GAoHAC,GAiCAC,GA+DAC,GA8GAC,GAk+GAC,GAkFAC,GA6FAC,GA0DAC,GA+EAC,GA6HAC,GA2GAC,GAwDAC,GAgFAC,GA+GAC,GAkHAC,GAiFAC,GA8EAC,GA8EAC,GA6FAC,GA2IAC,GAkFAC,GAgCAC,G,yMD/u0BV,yBAeM,YAdJ,yBAUM,MAVN,EAUM,CATJ,yBAQM,MARN,EAQM,CAPJ,yBAMU,GANAC,MAAO,EAAAC,OAAK,CACTC,MAAK,GACd,iBAEC,CAFD,yBAEC,GAFYC,GAAG,IAAIhN,MAAM,Q,YACvB,iBAAiD,CAAjD,E,sCAMX,yBAEM,MAFN,EAEM,CADJ,yBAAe,U,kKC6FrB,SAAYE,GACV,aACA,iBACA,iCACA,iCACA,+BACA,4BANF,CAAYA,MAAwB,KAmJpC,SAAYC,GACV,aACA,2BACA,uBACA,iCACA,+BACA,yBACA,mCACA,+BACA,yBACA,yDACA,qCACA,mCACA,yCACA,uDACA,+BAfF,CAAYA,MAAe,KAsG3B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAA2C,KA6FvD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAA6C,KAsGzD,SAAYC,GACV,aACA,qBACA,+BACA,qBACA,yBACA,2BACA,uBACA,qBARF,CAAYA,MAA+B,KAiF3C,SAAYC,GACV,aACA,6BACA,2BACA,+BACA,6CALF,CAAYA,MAAgC,KA8E5C,SAAYC,GACV,aACA,6BACA,2BACA,+BACA,6CALF,CAAYA,MAA8B,KA4F1C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAA2C,KA6FvD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAA6C,KAsGzD,SAAYC,GACV,aACA,qBACA,+BACA,qBACA,yBACA,2BACA,uBACA,qBARF,CAAYA,MAA+B,KAkG3C,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,iDACA,2BACA,2BAPF,CAAYA,MAA6B,KA+FzC,SAAYC,GACV,aACA,2BACA,+BACA,2BACA,qCACA,qCANF,CAAYA,MAA8B,KAgK1C,SAAYC,GACV,aACA,iBACA,iBACA,yBACA,2BACA,+BACA,uCACA,qBACA,yCACA,mBACA,2BACA,2BAZF,CAAYA,MAAiD,KA6G7D,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,mBACA,uBACA,mBAPF,CAAYA,MAAqB,KAiGjC,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,qCACA,2BACA,2BAPF,CAAYA,MAA0B,KA6KtC,SAAYC,GACV,aACA,mBACA,qBACA,mBAJF,CAAYA,MAAmB,KA2F/B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAAyC,KA6FrD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAA2C,KAsGvD,SAAYC,GACV,aACA,qBACA,+BACA,qBACA,qBACA,2BACA,uBACA,qBARF,CAAYA,MAA6B,KA4DzC,SAAYC,GACV,aACA,mBACA,mBACA,2BAJF,CAAYA,MAAkB,KAO9B,SAAYC,GACV,uBACA,6BACA,eACA,eAJF,CAAYA,MAAS,KA2FrB,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAAyC,KA6FrD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAA2C,KAsGvD,SAAYC,GACV,aACA,qBACA,+BACA,qBACA,qBACA,2BACA,uBACA,qBARF,CAAYA,MAA6B,KAyGzC,SAAYC,GACV,aACA,mBACA,iBACA,2BACA,+BACA,qBACA,qBAPF,CAAYA,MAA2B,KAiLvC,SAAYC,GACV,aACA,iBACA,qBACA,yBACA,iBACA,yBACA,qCACA,uCACA,mDACA,2DACA,mBACA,qBACA,mBACA,uBACA,iCACA,mCACA,iCACA,qCACA,mCACA,+BACA,+BACA,+CACA,6DAvBF,CAAYA,MAAa,KA+GzB,SAAYC,GACV,aACA,iBACA,yCACA,iBACA,2BACA,+BANF,CAAYA,MAAiC,KA8F7C,SAAYC,GACV,aACA,iBACA,yCACA,iBACA,2BACA,+BANF,CAAYA,MAAmC,KA2F/C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAAmD,KAoF/D,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,MAAqD,KAwFjE,SAAYC,GACV,aACA,qBACA,+BACA,qBACA,2BACA,uBACA,qBAPF,CAAYA,MAAuC,KAuKnD,SAAYC,GACV,aACA,iBACA,uBACA,yBACA,uCACA,qCACA,qCACA,iDACA,iDACA,2BACA,+BAXF,CAAYA,MAA6C,KAwBzD,SAAYC,GACV,mBACA,qBACA,yBAHF,CAAYA,MAA4B,KAqExC,SAAYC,GACV,aACA,6BACA,iBACA,yBACA,mBACA,yBANF,CAAYA,QAAgC,KAiG5C,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,2BACA,2BAPF,CAAYA,QAAoC,KAkGhD,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,2BACA,2BAPF,CAAYA,QAAgC,KAiG5C,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,iDACA,2BACA,2BAPF,CAAYA,QAAyB,KAgErC,SAAYC,GACV,aACA,+BACA,2BACA,+BAJF,CAAYA,QAAiC,KA8D7C,SAAYC,GACV,aACA,2BACA,+BACA,qCAJF,CAAYA,QAA8B,KAsL1C,SAAYC,GACV,aACA,2BACA,uBACA,yCACA,+BACA,2CACA,iDACA,iDACA,uDACA,iCAVF,CAAYA,QAAqC,KAajD,SAAYC,GACV,iBACA,2BACA,2BACA,6BAJF,CAAYA,QAAsB,KA4IlC,SAAYC,GACV,aACA,iBACA,uBACA,2BACA,qCACA,uCACA,2CACA,iDACA,iDACA,uDACA,uBACA,2BACA,qBACA,+BACA,qCAfF,CAAYA,QAAwB,KAiHpC,SAAYC,GACV,aACA,iBACA,6BACA,+CACA,+BACA,6BACA,6DAPF,CAAYA,QAAY,KA4GxB,SAAYC,GACV,aACA,yBACA,mBACA,2BAJF,CAAYA,QAAqB,KA0EjC,SAAYC,GACV,aACA,mBACA,qBACA,mBACA,uBACA,iCACA,mCACA,iCACA,qCATF,CAAYA,QAAgB,KAY5B,SAAYC,GACV,mBACA,iBAFF,CAAYA,QAAc,KAyJ1B,SAAYC,GACV,aACA,iBACA,mBACA,uBACA,6BACA,qCACA,+CACA,qCACA,qBACA,qBACA,qBAXF,CAAYA,QAA4B,KA8KxC,SAAYC,GACV,aACA,mBACA,mBACA,iBACA,aACA,iBACA,uBACA,mBACA,yBACA,eACA,qBACA,iBACA,uBAbF,CAAYA,QAA6B,KAgLzC,SAAYC,GACV,aACA,yBACA,mBACA,iBACA,aACA,iBACA,uBACA,mBACA,yBACA,eACA,qBACA,iBACA,uBAbF,CAAYA,QAAgC,KA+F5C,SAAYC,GACV,aACA,iBACA,mBACA,eACA,mBACA,iBANF,CAAYA,QAAsB,KA+DlC,SAAYC,GACV,aACA,iBACA,aACA,iCACA,uCALF,CAAYA,QAA6B,KA8EzC,SAAYC,GACV,aACA,2BACA,+BACA,6BACA,2BALF,CAAYA,QAA4B,KA+DxC,SAAYC,GACV,aACA,2BACA,+BACA,6BAJF,CAAYA,QAA8B,KAO1C,SAAYC,GACV,iBACA,mBACA,iBACA,yBACA,2BACA,iBACA,6BACA,2BACA,+BACA,mBAVF,CAAYA,QAAc,KAkG1B,SAAYC,GACV,aACA,2BACA,+BACA,6BACA,mCACA,mCANF,CAAYA,QAA8B,KA+E1C,SAAYC,GACV,aACA,2BACA,+BACA,2BACA,2BALF,CAAYA,QAA2C,KAsFvD,SAAYC,GACV,aACA,eACA,+BACA,iBACA,2BACA,qBANF,CAAYA,QAAkC,KAyE9C,SAAYC,GACV,aACA,+BACA,2BACA,+BACA,iBALF,CAAYA,QAA6C,KAsGzD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,qCACA,mBAPF,CAAYA,QAAuC,KAwFnD,SAAYC,GACV,aACA,iBACA,2BACA,eACA,+BACA,qBANF,CAAYA,QAAgC,KAuF5C,SAAYC,GACV,aACA,eACA,+BACA,iBACA,2BACA,qBANF,CAAYA,QAAoC,KAyEhD,SAAYC,GACV,aACA,+BACA,2BACA,+BACA,iBALF,CAAYA,QAA+C,KAsG3D,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,qCACA,mBAPF,CAAYA,QAAyC,KAwFrD,SAAYC,GACV,aACA,iBACA,2BACA,eACA,+BACA,qBANF,CAAYA,QAAkC,KA+E9C,SAAYC,GACV,aACA,2BACA,+BACA,iDACA,iDALF,CAAYA,QAAgC,KA+C5C,SAAYC,GACV,aACA,2BACA,+BAHF,CAAYA,QAAsB,KA6FlC,SAAYC,GACV,aACA,2BACA,+BACA,eACA,6BALF,CAAYA,QAA4B,KAoGxC,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,eACA,yCACA,iCAPF,CAAYA,QAA8B,KAU1C,SAAYC,GACV,6BACA,qCACA,iCACA,mCACA,6CACA,uCACA,uBAPF,CAAYA,QAAO,KAmDnB,SAAYC,GACV,aACA,uBACA,iBAHF,CAAYA,QAAkB,KAgG9B,SAAYC,GACV,aACA,2BACA,+BACA,eACA,6BACA,2DACA,2DACA,uCACA,uCATF,CAAYA,QAA0B,KAgFtC,SAAYC,GACV,aACA,eACA,+BACA,2BACA,qBALF,CAAYA,QAA2B,KAgMvC,SAAYC,GACV,aACA,iBACA,iBACA,yBACA,2BACA,+BACA,uCACA,qBACA,yCACA,eACA,mBACA,mBACA,qCACA,2BACA,2BAfF,CAAYA,QAA8B,KAiI1C,SAAYC,GACV,aACA,iBACA,yBACA,2BACA,iBACA,uCACA,qBACA,2BACA,+BATF,CAAYA,QAAgC,KAgF5C,SAAYC,GACV,aACA,iBACA,2BACA,2BACA,qBALF,CAAYA,QAAgB,KA+C5B,SAAYC,GACV,aACA,6BACA,6BACA,yBAJF,CAAYA,QAAW,KA2GvB,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,2CACA,2CAPF,CAAYA,QAAoC,KA8QhD,SAAYC,GACV,aACA,2BACA,+BACA,yCACA,yCALF,CAAYA,QAA4B,KA8DxC,SAAYC,GACV,aACA,iBACA,2BACA,+BAJF,CAAYA,QAA0B,KA2FtC,SAAYC,GACV,aACA,iBACA,2BACA,qBAJF,CAAYA,QAA0B,KAkGtC,SAAYC,GACV,aACA,iBACA,2BACA,qBACA,2BACA,yBACA,qCACA,uCACA,qBATF,CAAYA,QAAiB,KA2N7B,SAAYC,GACV,aACA,yBACA,6CACA,iBACA,2BACA,uBACA,uBACA,uBACA,yBACA,yCACA,uCACA,mCACA,qBACA,+BACA,uCACA,mCACA,yCACA,uDACA,qCACA,qBACA,mCACA,2BACA,yCACA,yBACA,uCACA,mBACA,iCACA,iDACA,iCACA,+BACA,mCACA,qBACA,6BAjCF,CAAYA,QAAY,KA2GxB,SAAYC,GACV,aACA,2BACA,+BACA,uBAJF,CAAYA,QAA6C,KA8DzD,SAAYC,GACV,aACA,2BACA,+BACA,uBAJF,CAAYA,QAA+C,KA+F3D,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,qCACA,yBAPF,CAAYA,QAAgD,KAoE5D,SAAYC,GACV,aACA,2BACA,+BACA,6BACA,6BALF,CAAYA,QAA0D,KAoGtE,SAAYC,GACV,aACA,qBACA,+BACA,qCACA,yBACA,2BACA,uBACA,qBARF,CAAYA,QAAmC,KAkC/C,SAAYC,GACV,aACA,yBACA,qBAHF,CAAYA,QAA4B,KAmGxC,SAAYC,GACV,aACA,iBACA,2BACA,mBACA,mBACA,qBACA,qBAPF,CAAYA,QAAoB,KA0KhC,SAAYC,GACV,aACA,mBACA,mBACA,iBACA,aACA,iBACA,uBACA,mBACA,yBACA,eACA,qBACA,iBACA,uBAbF,CAAYA,QAA8B,KAgL1C,SAAYC,GACV,aACA,yBACA,mBACA,iBACA,aACA,iBACA,uBACA,mBACA,yBACA,eACA,qBACA,iBACA,uBAbF,CAAYA,QAAiC,KA+F7C,SAAYC,GACV,aACA,iBACA,mBACA,eACA,mBACA,iBANF,CAAYA,QAAuB,KA+DnC,SAAYC,GACV,aACA,iBACA,aACA,iCACA,uCALF,CAAYA,QAA8B,KA4E1C,SAAYC,GACV,aACA,iBACA,2BACA,eACA,qBALF,CAAYA,QAAmC,KA0E/C,SAAYC,GACV,aACA,6CACA,6BACA,+BACA,+BALF,CAAYA,QAA0B,KAiDtC,SAAYC,GACV,aACA,uBACA,yBAHF,CAAYA,QAA0B,KAMtC,SAAYC,GACV,2CACA,iDACA,oCACA,4BACA,iBACA,qBACA,mBACA,uBACA,kCACA,0DACA,kDACA,mCACA,2CACA,uBAdF,CAAYA,QAAiB,KAoJ7B,SAAYC,GACV,aACA,iBACA,yBACA,2BACA,iBACA,uCACA,qBACA,2BACA,+BATF,CAAYA,QAAuC,KAoHnD,SAAYC,GACV,aACA,2BACA,iBACA,yBACA,6BACA,qBACA,uBACA,2BARF,CAAYA,QAAuB,KAgFnC,SAAYC,GACV,aACA,mBACA,iBACA,yBACA,qBACA,mBACA,iCAPF,CAAYA,QAAkB,KA8F9B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,QAA4C,KA6FxD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,QAA8C,KAiG1D,SAAYC,GACV,aACA,qBACA,+BACA,qBACA,2BACA,uBACA,qBAPF,CAAYA,QAAgC,KAgH5C,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,iDACA,2BACA,2BARF,CAAYA,QAAyB,KA2HrC,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,+CACA,mBACA,2BACA,2BATF,CAAYA,QAAiB,KAkF7B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,+BALF,CAAYA,QAAkD,KAsF9D,SAAYC,GACV,aACA,eACA,+BACA,+CACA,2BACA,qBANF,CAAYA,QAA4B,KAyExC,SAAYC,GACV,aACA,2BACA,+BACA,+BACA,+CALF,CAAYA,QAAuC,KAgGnD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,+BACA,2BACA,qDAPF,CAAYA,QAAiC,KAiG7C,SAAYC,GACV,aACA,iBACA,2BACA,eACA,+BACA,6CACA,qBAPF,CAAYA,QAA0B,KAyFtC,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mBANF,CAAYA,QAAgC,KA4F5C,SAAYC,GACV,aACA,qBACA,+BACA,yCACA,2BACA,uBACA,qBAPF,CAAYA,QAA+B,KAyI3C,SAAYC,GACV,aACA,iBACA,iBACA,yBACA,2BACA,+BACA,uCACA,qBACA,yCACA,2BAVF,CAAYA,QAAkC,KAwG9C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,2BACA,+CANF,CAAYA,QAA+B,KAwF3C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,2BACA,+CANF,CAAYA,QAA8B,KA0J1C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,6BACA,yCACA,yCACA,iCACA,2CACA,2CAVF,CAAYA,QAAwC,KA8JpD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,6BACA,yCACA,yCACA,iCACA,2CACA,2CAVF,CAAYA,QAAmC,KAmF/C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,2BALF,CAAYA,QAA8B,KAkE1C,SAAYC,GACV,aACA,2BACA,+BACA,iCACA,iCALF,CAAYA,QAAiC,KA2F7C,SAAYC,GACV,aACA,+BACA,+BACA,iBACA,+CACA,yBACA,2BACA,iCARF,CAAYA,QAAiB,KAgG7B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,iCACA,iCANF,CAAYA,QAAwB,KAiGpC,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,+CACA,+CAPF,CAAYA,QAA4C,KAsGxD,SAAYC,GACV,aACA,qBACA,+BACA,+CACA,+CACA,2BACA,uBACA,qBARF,CAAYA,QAA+B,KA2K3C,SAAYC,GACV,aACA,mBACA,mBACA,iBACA,aACA,iBACA,uBACA,mBACA,yBACA,eACA,qBACA,iBACA,uBAbF,CAAYA,QAA+B,KAgL3C,SAAYC,GACV,aACA,yBACA,mBACA,iBACA,aACA,iBACA,uBACA,mBACA,yBACA,eACA,qBACA,iBACA,uBAbF,CAAYA,QAAkC,KA+F9C,SAAYC,GACV,aACA,iBACA,mBACA,eACA,mBACA,iBANF,CAAYA,QAAwB,KA+DpC,SAAYC,GACV,aACA,iBACA,aACA,iCACA,uCALF,CAAYA,QAA+B,KA6G3C,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,iDACA,iDACA,2BACA,2BARF,CAAYA,QAAsB,KAgHlC,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,iDACA,iDACA,2BACA,2BARF,CAAYA,QAAwB,KAgHpC,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,iDACA,iDACA,2BACA,2BARF,CAAYA,QAA2B,KAwFvC,SAAYC,GACV,aACA,2BACA,mBACA,qBAJF,CAAYA,QAA2B,KA8CvC,SAAYC,GACV,aACA,2BACA,+BAHF,CAAYA,QAA6B,KAgGzC,SAAYC,GACV,aACA,uBACA,2BACA,mCACA,mBACA,yBACA,2BACA,+BARF,CAAYA,QAAoB,KA0DhC,SAAYC,GACV,aACA,2BACA,qCACA,yBACA,mBACA,iCANF,CAAYA,QAAe,KAiM3B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,6BACA,uBACA,2BACA,yBACA,2CACA,iDACA,iDACA,uDACA,+BAbF,CAAYA,QAA2B,KAuEvC,SAAYC,GACV,aACA,2BACA,+BACA,qCAJF,CAAYA,QAAkC,KA8D9C,SAAYC,GACV,aACA,2BACA,+BACA,qCAJF,CAAYA,QAA8B,KAO1C,SAAYC,GACV,eACA,iBAFF,CAAYA,QAAc,KAiE1B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,mCALF,CAAYA,QAA6B,KA6FzC,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,2BACA,2BANF,CAAYA,QAAqB,KA+EjC,SAAYC,GACV,aACA,2BACA,+BACA,mCACA,yBALF,CAAYA,QAAiC,KAuF7C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mCANF,CAAYA,QAA2C,KAiGvD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,2CACA,2CAPF,CAAYA,QAAkC,KA2G9C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,mDACA,mDACA,mDARF,CAAYA,QAA6C,KA2GzD,SAAYC,GACV,aACA,eACA,+BACA,iBACA,qBACA,2BACA,2BACA,qBARF,CAAYA,QAA6B,KAoFzC,SAAYC,GACV,aACA,2BACA,+BACA,+BACA,iBACA,qBANF,CAAYA,QAAwC,KAiGpD,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,yCACA,qCACA,qCAPF,CAAYA,QAA4C,KA4HxD,SAAYC,GACV,aACA,iBACA,2BACA,eACA,yBACA,uCACA,2CACA,mCACA,2CACA,qBAVF,CAAYA,QAA2B,KA2FvC,SAAYC,GACV,aACA,iBACA,mBACA,eACA,mBACA,iBANF,CAAYA,QAAkC,KAgG9C,SAAYC,GACV,aACA,6BACA,2BACA,+BACA,qBALF,CAAYA,QAA+B,KA8E3C,SAAYC,GACV,aACA,iBACA,qBACA,2BACA,+BALF,CAAYA,QAAkC,KA6F9C,SAAYC,GACV,aACA,iBACA,qBACA,iCACA,2BACA,+BANF,CAAYA,QAAiC,KAS7C,SAAYC,GACV,qCACA,iCACA,mCACA,6CACA,iDACA,mDACA,uBAPF,CAAYA,QAAU,KAmDtB,SAAYC,GACV,aACA,uBACA,yBAHF,CAAYA,QAAqB,KAiFjC,SAAYC,GACV,aACA,6BACA,2BACA,+BACA,qBACA,yCANF,CAAYA,QAA6B,KAkFzC,SAAYC,GACV,aACA,qBACA,+BACA,2BACA,uBACA,qBANF,CAAYA,QAA8B,KAgD1C,SAAYC,GACV,aACA,mCACA,6BACA,yBAJF,CAAYA,QAAc,KA2E1B,SAAYC,GACV,aACA,iBACA,2BACA,yBACA,qBALF,CAAYA,QAAsB,KAsGlC,SAAYC,GACV,aACA,iBACA,2BACA,qCACA,yBACA,2CACA,+BAPF,CAAYA,QAAsC,KAyFlD,SAAYC,GACV,aACA,2BACA,+BACA,2BACA,2BACA,2BANF,CAAYA,QAA2B,KAgEvC,SAAYC,GACV,aACA,2BACA,+BACA,2BAJF,CAAYA,QAA6B,KA89GzC,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,+CACA,mBACA,2BACA,2BATF,CAAYA,QAAmB,KAgK/B,SAAYC,GACV,aACA,2BACA,+BACA,6BACA,6BALF,CAAYA,QAA6B,KA24BzC,SAAYC,GACV,aACA,uBACA,iBACA,mBACA,mBACA,qBACA,uBACA,yCACA,yCACA,mEACA,iDACA,+BACA,qCACA,qCACA,qFACA,yDACA,+BACA,qCACA,6CACA,uCACA,qCACA,6BACA,+CACA,mDACA,6BACA,6CACA,iCACA,iDACA,+BACA,mCACA,6CACA,2CACA,iCACA,uCACA,mCACA,yCACA,yCACA,uCACA,2CACA,qCACA,mCACA,yCACA,yDACA,6DACA,+CACA,iDACA,yCACA,+CACA,+CACA,yCACA,yBACA,2BACA,uCACA,mCACA,qDACA,mCACA,2CACA,qCACA,iDACA,2DACA,2DACA,6DACA,6CACA,qDACA,6CACA,qDACA,qCACA,mDApEF,CAAYA,QAAe,KA8J3B,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,iDACA,2BACA,2BAPF,CAAYA,QAAgC,KAqG5C,SAAYC,GACV,aACA,iBACA,2BACA,uCACA,iBACA,yCACA,2CACA,+BARF,CAAYA,QAA4B,KAsGxC,SAAYC,GACV,aACA,iBACA,2BACA,uCACA,iBACA,yCACA,2CACA,+BARF,CAAYA,QAA2B,KAqHvC,SAAYC,GACV,aACA,iBACA,2BACA,uCACA,iBACA,yCACA,2CACA,qBACA,+BATF,CAAYA,QAA4B,KAiGxC,SAAYC,GACV,aACA,iBACA,2BACA,uCACA,uCACA,+BANF,CAAYA,QAAiC,KA8F7C,SAAYC,GACV,aACA,iBACA,2BACA,uCACA,uCACA,+BANF,CAAYA,QAAmC,KAS/C,SAAYC,GACV,iBACA,qBACA,iBACA,iBACA,mDACA,mDACA,uBAPF,CAAYA,QAAc,KAU1B,SAAYC,GACV,iCACA,qCACA,2CACA,iFACA,iEACA,mDANF,CAAYA,QAAe,KAiF3B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,6CACA,qBANF,CAAYA,QAAkB,KA0J9B,SAAYC,GACV,aACA,iBACA,iBACA,yBACA,uCACA,qBACA,mBACA,yCACA,iCACA,2BACA,2BACA,+BAZF,CAAYA,QAAyB,KA8HrC,SAAYC,GACV,aACA,iBACA,yBACA,2BACA,iBACA,uCACA,qBACA,2BACA,+BATF,CAAYA,QAA6B,KAmKzC,SAAYC,GACV,aACA,iBACA,iBACA,yBACA,2BACA,+BACA,uCACA,qBACA,yCACA,eACA,2BACA,2BAZF,CAAYA,QAAyC,KA6IrD,SAAYC,GACV,aACA,iBACA,iBACA,yBACA,uCACA,qBACA,6CACA,2BACA,2BACA,+BAVF,CAAYA,QAA2B,KA+EvC,SAAYC,GACV,aACA,mBACA,uBACA,uCAJF,CAAYA,QAA6B,KAiGzC,SAAYC,GACV,aACA,iBACA,2BACA,uCACA,iBACA,yCACA,2CACA,+BARF,CAAYA,QAA8B,KAW1C,SAAYC,GACV,yBACA,uBACA,yBAHF,CAAYA,QAAiB,KAmF7B,SAAYC,GACV,aACA,2BACA,uCACA,uBACA,iBACA,yCACA,2CAPF,CAAYA,QAAqB,KAoHjC,SAAYC,GACV,aACA,2BACA,+BACA,yCACA,iDALF,CAAYA,QAAyC,KAiCrD,SAAYC,GACV,aACA,iBACA,2BACA,yBACA,qCALF,CAAYA,QAAuB,KA+DnC,SAAYC,GACV,aACA,2BACA,+BACA,2CAJF,CAAYA,QAAiC,KA8G7C,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,+CACA,2BACA,2BARF,CAAYA,QAAkB,KAk+G9B,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,+CACA,mBACA,2BACA,2BATF,CAAYA,QAAsB,KAkFlC,SAAYC,GACV,aACA,iBACA,mBACA,2BACA,+BALF,CAAYA,QAA8B,KA6F1C,SAAYC,GACV,aACA,iBACA,uBACA,mBACA,2BACA,+BANF,CAAYA,QAAgC,KA0D5C,SAAYC,GACV,aACA,2BACA,qDACA,+BAJF,CAAYA,QAAkC,KA+E9C,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,2BACA,2BANF,CAAYA,QAAa,KA6HzB,SAAYC,GACV,aACA,iBACA,aACA,mBACA,2BACA,mBACA,uBACA,yBACA,mBACA,qBAVF,CAAYA,QAAmB,KA2G/B,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,iBACA,aACA,qBAPF,CAAYA,QAAqB,KAwDjC,SAAYC,GACV,aACA,qBACA,qBAHF,CAAYA,QAAgC,KAgF5C,SAAYC,GACV,aACA,qBACA,+BACA,2BACA,uBACA,qBANF,CAAYA,QAA4B,KA+GxC,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,iDACA,+CACA,2BACA,2BARF,CAAYA,QAA6B,KAkHzC,SAAYC,GACV,aACA,iBACA,uBACA,qBACA,+CACA,+CACA,2BACA,2BARF,CAAYA,QAAoB,KAiFhC,SAAYC,GACV,aACA,2BACA,+BACA,iDACA,iDALF,CAAYA,QAAgC,KA8E5C,SAAYC,GACV,aACA,2BACA,+BACA,uCACA,yBALF,CAAYA,QAAkC,KA8E9C,SAAYC,GACV,aACA,2BACA,+BACA,uCACA,yBALF,CAAYA,QAAgC,KA6F5C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,iCACA,iCANF,CAAYA,QAAwB,KA2IpC,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,iCACA,mBACA,yBACA,yBACA,yBATF,CAAYA,QAA+B,KAkF3C,SAAYC,GACV,aACA,iBACA,2BACA,+BACA,6BALF,CAAYA,QAA0B,KAgCtC,SAAYC,GAEV,mBAEA,iBAJF,CAAYA,QAAqB,KAwF1B,IAAMK,GAAiB,gBAAH,oiBAqCdC,GAAkC,gBAAH,yjCA+C/BC,GAAgB,gBAAH,kKAWbC,GAAgB,gBAAH,6JAgBpBC,GAAqC,SAACC,EAAQC,GAAT,OAA4BD,KAEjE,SAAUE,GAAOC,GAAuE,IAAhDC,EAAgD,uDAAdL,GAC9E,MAAO,CACLM,OADK,SACEC,EAAkCC,GACvC,OAAOH,GAAY,SAACI,GAAD,OAA2BL,EAAOM,QAAqBd,GAAgBW,EAA5C,mCAA2DC,GAAmBC,MAAyB,WAEvJE,wBAJK,SAImBJ,EAAmDC,GACzE,OAAOH,GAAY,SAACI,GAAD,OAA2BL,EAAOM,QAAsCb,GAAiCU,EAA9E,mCAA6FC,GAAmBC,MAAyB,4BAEzLG,MAPK,SAOCL,EAAgCC,GACpC,OAAOH,GAAY,SAACI,GAAD,OAA2BL,EAAOM,QAAoBZ,GAAeS,EAA1C,mCAAyDC,GAAmBC,MAAyB,UAErJI,MAVK,SAUCN,EAAgCC,GACpC,OAAOH,GAAY,SAACI,GAAD,OAA2BL,EAAOM,QAAoBX,GAAeQ,EAA1C,mCAAyDC,GAAmBC,MAAyB,WCl80BnJ,SAAUK,GAAIC,GAClB,OAAOZ,GAAO,IAAI,oBAAcY,ICAlC,IAAMC,GAAe,+DACfC,GAAgB,qEAEhB,GAAW,SAACC,GAAD,OAAoBA,EAAOF,GAAeC,IAEpD,SAAeE,GAAtB,mC,iEAAO,WAAyBD,GAAzB,uGACgBJ,GAAI,GAASI,IAAOZ,SADpC,cACC7Q,EADD,yBAEEA,GAFF,2C,yBAKA,SAAe,GAAtB,qC,iEAAO,WAAwByR,EAAeE,GAAvC,gGAEDC,EAAUD,EAAQE,cAClBD,GAAW,6CAA6CC,gBAE1DD,EAAU,8CALP,SAOgBP,GAAI,GAASI,IAAON,MAAM,CAAExO,GAAIiP,IAPhD,cAOC5R,EAPD,yBAQEA,GARF,2C,yBAWA,SAAe8R,KAAtB,gC,iEAAO,oHACgBT,GAAI,IAAS,IAAOH,0BADpC,UACClR,EADD,OAEAA,EAAO+R,SAAY/R,EAAO+R,QAAQC,eAFlC,qBAGG,mCAHH,gCAKEhS,EAAO+R,QAAQC,gBALjB,2C,kJClBQC,K,iGAAf,wHAC6B,KAAuB,CAChDC,QAAS,MAFb,UACQC,EADR,OAIQC,EAAW/P,OAAO+P,SAEpBC,EAAW,KACXF,IACEA,IAAgBC,GAClBE,QAAQC,MAAM,2CAEhBD,QAAQE,IAAI,8CACZH,EAAWF,GAETC,IACFE,QAAQE,IAAI,2CACZH,EAAWD,GAERC,EAlBP,sBAmBUvP,MAAM,uEAnBhB,iCAuBUuP,EAASpB,QAAS,CAAEwB,OAAQ,wBAvBtC,gEAyBIH,QAAQE,IAAR,OACI,KAAIE,UAAW,KAAIA,QAAQC,SAAS,YA1B5C,+DAgCaN,EAA4BO,SAhCzC,oEAkCMN,QAAQE,IAAI,0BAAZ,MAlCN,sCAsCSH,GAtCT,kE,6BAoDM,G,2MAIwB,gBAAS,CACnCQ,cAAc,EACdC,iBAAiB,K,4BAEJ,gBAASC,KAAKC,Q,kGAGtB,WACL,IAAKD,KAAKV,SACR,KAAM,2BAER,OAAOU,KAAKV,W,iCAEP,WACL,IAAKU,KAAKE,iBACR,KAAM,2BAER,OAAOF,KAAKE,mB,uBAGP,WACL,IAAKF,KAAKG,OACR,KAAM,yBAER,OAAOH,KAAKG,S,oBAGP,WACL,OAAOH,KAAKI,O,uBAGP,WACL,MAA8B,UAAvBJ,KAAKC,MAAMjB,U,kFAGZ,8GACgBqB,IAAlBL,KAAKV,SADH,wBAEJU,KAAKC,MAAMF,iBAAkB,EAFzB,kBAIIC,KAAKV,SAASgB,SAAS,UAJ3B,+DAME,gBAAevQ,OANjB,qBAOI,KAAI4P,QAAQC,SAAS,8BAPzB,wBASEI,KAAKO,OATP,kCAaFhB,QAAQE,IAAR,MAbE,4CAgBkBO,KAAKV,SAASkB,aAhBhC,eAgBExB,EAhBF,OAiBJgB,KAAKC,MAAMjB,QAAUA,EAAQhR,KAC7BgS,KAAKC,MAAMQ,QAAUzB,EAAQyB,QAlBzB,UAmBmBT,KAAKV,SAASoB,eAnBjC,WAmBEC,EAnBF,OAoBJX,KAAKC,MAAMW,UAAYD,EAASvU,OAAS,IACrCuU,EAASvU,OAAS,GArBlB,wBAsBF4T,KAAKC,MAAMpB,QAAU8B,EAAS,GAtB5B,KAuBmB,YAvBnB,UAuB2CX,KAAKV,SAASuB,WAAWF,EAAS,IAvB7E,oBAuBFX,KAAKC,MAAMa,QAvBT,KAuByBC,YAvBzB,gDA0BJf,KAAKC,MAAMF,iBAAkB,EAC7BR,QAAQE,IAAI,WA3BR,yD,2EA+BD,SAAKuB,GAAyC,WAKnD,OAJKhB,KAAKC,MAAMW,YACdZ,KAAKC,MAAMH,cAAe,GAE5BE,KAAKC,MAAMgB,sBAAmBZ,EACvBnB,KACJgC,KADI,0DACC,WAAOhB,GAAP,8FACJ,EAAKA,iBAAmBA,EAClBZ,EAAW,IAAI,aAAO6B,UAAUC,aAAalB,GACnD,EAAKZ,SAAWA,EAHZ,SAIgB,EAAKA,SAAS+B,YAJ9B,cAIJ,EAAKlB,OAJD,YAKyBE,IAAzB,EAAKiB,kBACP,EAAKA,gBAAkBhS,OAAOiS,aAAY,kBAAM,EAAKC,eAAc,MANjE,SAQE,EAAKA,aARP,2CADD,uDAWJC,OAAM,SAACjC,GACND,QAAQE,IAAID,GACZ,EAAKS,MAAMgB,iBAAmBzB,EAAMG,QAChCqB,GACFA,EAAcxB,EAAMG,YAGvB+B,SAAQ,kBAAO,EAAKzB,MAAMH,cAAe,S,KAK1C,SAAU6B,GAAoBnC,GAClC,IAAIG,EAAUH,EAId,GAHIA,EAAM,aACRG,EAAUH,EAAM,YAEF,6BAAZG,EAAwC,OAEpCiC,EAAkB,UAAGpC,EAAM5T,YAAT,aAAG,EAAY+T,QACnCiC,IACFjC,EAAUiC,GAGd,OAAOjC,EAGT,IAAMkC,GAAc,IAAI,GClJlB,G,WAYJ,6EAX8B,sBAAS,CACrCzD,MAAO,GACP0D,aAAc,KACdC,UAAWhD,QAQb,4BANe,sBAASiB,KAAKC,QAO3B,oBACE,iBAAM,CAAC4B,GAAYG,SAASnD,QAASgD,GAAYG,SAAShD,YAC1D,WACE,IAAMiD,EAAOJ,GAAYG,SAASnD,QAClCU,QAAQE,IAAR,4CAAiDwC,IAC7CA,GACF,GAASJ,GAAYK,YAAaD,GAAMf,MAAK,SAAC9C,GAC5CmB,QAAQE,IAAR,qBAAkCrB,GAClC,EAAK6B,MAAM7B,MAAQA,EAAMA,MAAM3O,KAAI,SAAC0S,GAAD,MAAW,CAC5CvS,GAAIuS,EAAKvS,GACT5B,KAAMmU,EAAKnU,KACXoU,mBAAoBD,EAAKE,SAASzS,OAEpC,EAAK0S,2B,8CAlBR,WACL,OAAOtC,KAAKI,O,gCAwBN,WAAkB,YAEK,MAA3BJ,KAAKC,MAAM6B,cACX9B,KAAKC,MAAM7B,MAAMmE,OAAM,SAACJ,GAAD,aAAUA,EAAKvS,MAAL,UAAY,EAAKqQ,MAAM6B,oBAAvB,aAAY,EAAyBlS,UAEvC,GAA3BoQ,KAAKC,MAAM7B,MAAMhS,OACnB4T,KAAKC,MAAM6B,aAAe9B,KAAKC,MAAM7B,MAAM,GAE3C4B,KAAKC,MAAM6B,aAAe,Q,wBAKzB,SAAWK,GAChBnC,KAAKC,MAAM6B,aAAeK,I,sBAGrB,WACL,uBAAWnC,KAAKC,MAAM7B,S,6FAGjB,WACLoE,EACAC,EACAC,GAHK,0GAKCZ,EAAe9B,KAAKC,MAAM6B,aAC3BA,EANA,yCAOI,CAAEnC,QAAS,0BAA2BgD,SAAS,IAPnD,uBASmB3C,KAAKC,MAAM8B,UAT9B,cASCA,EATD,OAUCa,EAAiBb,EAAUc,iBAC3BC,EAAqBf,EAAUgB,mBAE/BC,EAAY,gBAAuB,CACvCC,KAAMT,EACNU,uBAAwBT,EACxBU,oBAAqBT,IAEjBU,EAAW,gBAAsB,CACrCC,QAAST,EACTU,SAAU,QACVC,gBAAiBP,IAGbQ,EAAW,IAAI,QAAe1B,EAAaM,mBAAoBP,GAAYR,aAC3EoC,EAAcD,EAASE,gBAAgBC,KAC3Cb,EACA,QAA2Bc,kBAC3BR,GA5BG,UA8BiBK,EAAYI,OA9B7B,eA8BCC,EA9BD,yBA+BE,CAAEnE,QAAS,8BAAF,OAAgCmE,EAAQC,iBAAmBpB,SAAS,IA/B/E,iD,qEAmCHqB,GAAgB,IAAI,GC9GX,gCAAgB,CAC7BC,MAD6B,WAE3B,IAAMhE,EAAQ4B,GAAYG,SAEpB/E,EAAoB,iBAAI,IAgC9B,OA/BA,0BAAY,WACV,IAAIiH,EAAc,YACZrF,EAAUoB,EAAMpB,QAClBA,IACFqF,EAAc,YAAH,OAAerF,EAAQsF,OAAO,EAAG,GAAjC,cAAyCtF,EAAQsF,OAAOtF,EAAQzS,OAAS,KAEtF,IAAMgS,EAAQ4F,GAAcI,WACxBC,EAAc,GACE,GAAhBjG,EAAMhS,OACRiY,EAAY3X,KAAK,CAAE4X,MAAO,oBAE1BD,EAAcjG,EAAM3O,KAAI,SAAC0S,GAAD,MAAW,CACjCmC,MAAOnC,EAAKnU,KACZuW,KAAM,mBACNpH,GAAI,CAAEnP,KAAM,gBAAiBwW,OAAQ,CAAE5F,QAASuD,EAAKvS,SAIzDqN,EAAMxO,MAAQ,CACZ,CACE6V,MAAOJ,EACPK,KAAM,eACNpH,GAAI,CAAEnP,KAAM,kBAEd,CACEsW,MAAO,gBACPC,KAAM,mBACNtH,MAAOoH,OAIN,CAAEpE,QAAOhD,Y,UCpCpB,GAAOwH,OAASA,GAChB,GAAOC,UAAY,kBAEJ,U,4BCLNvU,MAAM,O,IAGJA,MAAM,O,UAGNA,MAAM,O,mJARJ,EAAAgS,M,yBAAX,yBAYM,UAXJ,yBAAwB,uCAAjB,EAAAA,KAAKnU,MAAI,GAChB,yBASM,MATN,GASM,CANJ,yBAEM,MAFN,GAEM,CADJ,yBAAiB,KAEI,EAAA2W,a,yBAAvB,yBAEM,MAFN,GAEM,CADJ,yBAAmB,M,sEAIzB,yBAA4B,SAAhB,e,gHCZV,yBAA2B,UAAvB,sBAAkB,G,iMADxB,yBAQM,YAPJ,G,6BAA2B,IAC3B,6BAAG,EAAAC,kBAAmB,IACtB,GAA8D,EAAAC,c,yBAA9D,yBAA4F,U,MAApF1U,MAAM,4BAA6B,QAAK,8BAAE,EAAA2U,MAAA,EAAAA,KAAA,sBAA0B,Y,uCAC5E,yBAEM,YADJ,yBAA0D,GAA5CC,UAAW,EAAAC,O,WAAiB,EAAAC,a,qDAAA,EAAAA,aAAY,K,qCAExD,yBAAyF,GAAhEC,QAAS,EAAAC,Y,kDAAA,EAAAA,YAAW,IAAGC,UAAW,EAAAA,UAAYC,UAAU,G,4FCD1ElV,MAAM,mB,GACX,yBAQQ,cAPN,yBAMK,WALH,yBAA2B,MAAvBmV,MAAM,OAAM,UAChB,yBAAyB,MAArBA,MAAM,OAAM,QAChB,yBAAqB,MAAjBA,MAAM,QACV,yBAAuB,MAAnBA,MAAM,OAAM,MAChB,yBAAqB,MAAjBA,MAAM,Y,MAeR,yBAAU,UAAN,KAAC,G,IASDnV,MAAM,e,UAMLA,MAAM,yB,UACoBA,MAAM,cAAcoV,MAAA,mB,2CAM9C,a,GACS,yBAAqC,KAAlCpV,MAAM,2BAAyB,S,eAS5CqV,QAAQ,K,IAEHrV,MAAM,iB,UAImBA,MAAM,6B,GAClC,yBAAmC,KAAhCA,MAAM,yBAAuB,S,IAG3BA,MAAM,iB,IACNA,MAAM,iB,UAawBA,MAAM,gB,IAC3CqV,QAAQ,IAAIrV,MAAM,Y,uGArFhC,yBA4FS,GA3FPsV,OAAO,aACNP,QAAS,EAAAA,QACT,mBAAc,+BAAE,EAAAQ,MAAK,iBAAmBC,KACzCxV,MAAM,gB,+BAEN,iBAqFQ,CArFR,yBAqFQ,QArFR,GAqFQ,CApFN,GASA,yBA0EQ,e,2BAzEN,yBAwEW,2CAxEe,EAAAyV,WAAS,SAAlBC,G,4EAAgCA,EAAMC,WAAaD,EAAME,UAAU/X,M,CAClF,yBAwCK,MAxCDmC,MAAK,CAAC,eAAc,iBAA4B0V,EAAMlD,W,CACxD,yBAAgE,uCAAzD,EAAAqD,gBAAgBH,EAAMC,WAAWG,kBAAa,GACrD,yBAOK,WALKJ,EAAME,UAAUG,S,yBADxB,yBAIE,O,MAFC9V,IAAKyV,EAAME,UAAUG,QACtB/V,MAAM,kB,qFACN,IACF,6BAAG,EAAAgW,SAASN,IAAK,KAEnB,GACA,yBAOK,WALKA,EAAMO,QAAQF,S,yBADtB,yBAIE,O,MAFC9V,IAAKyV,EAAMO,QAAQF,QACpB/V,MAAM,kB,qFACN,IACF,6BAAG,EAAAkW,OAAOR,IAAK,KAEjB,yBAoBK,KApBL,GAoBK,CAlBKA,EAAMS,gB,yBADd,yBAIE,O,MAFClW,IAAK,EAAAmW,aAAaV,EAAMS,gBACzBnW,MAAM,qB,wDAE+B0V,EAAMW,Y,yBAA7C,yBAA2D,IAA3D,KACcX,EAAMlD,S,yBAApB,yBAA0E,IAA1E,M,yBACA,yBAWO,WATI,EAAA0C,UAAaQ,EAAMY,UAAW,EAAAC,OAAOb,G,iEAD9C,yBAMS,U,MAJP1V,MAAM,uBACL,QAAK,mBAAE,EAAAwW,cAAcd,K,IAEd,I,gBAEV,yBAES,UAFD1V,MAAM,kBAAmB,QAAK,mBAAE,EAAAyW,QAAQf,K,6BAC3C,EAAAgB,kBAAkBhB,IAAK,qB,GAKxBA,EAAMY,UAAYZ,EAAMlD,S,yBAAlC,yBAwBK,SAvBH,yBAsBK,KAtBL,GAsBK,E,2BArBH,yBAoBM,2CApBgBkD,EAAMY,SAAO,SAAvBK,G,gCAAZ,yBAoBM,OApBsC/X,IAAK+X,EAAOC,SAAU5W,MAAM,O,CACtE,yBAGM,MAHN,GAGM,CAFJ,yBAAiE,OAA3DC,IAAK,EAAAmW,aAAaO,EAAOC,UAAW5W,MAAM,gB,6CAAiB,IACjE,6BAAG2W,EAAOC,UAAQ,KAETD,EAAON,Y,yBAAlB,yBAEM,MAFN,GAEM,CADJ,O,yBAEF,yBAWW,uBAVT,yBAAkE,MAAlE,GAAkE,6BAApC,EAAAQ,aAAanB,EAAOiB,IAAM,GACxD,yBAQM,MARN,GAQM,CANIA,EAAOhC,M,yBADf,yBAMS,U,MAJP3U,MAAM,sBACL,QAAK,mBAAE,EAAAyW,QAAQf,EAAOiB,EAAOC,SAAUD,EAAOhC,QAChD,YAED,gB,uGAMCe,EAAMlD,SAAWkD,EAAMlG,S,yBAAlC,yBAIK,KAJL,GAIK,CAHH,yBAEK,KAFL,GAEK,6BADAkG,EAAMlG,SAAO,M,0ICpFxB,SAAUsH,GAAShY,GAEvB,OAAO,QAAYiY,KAAKC,GAAoBlY,EAAEmY,WAAY,KAG5D,SAASD,GAAoB1Y,EAAe4Y,GAC1C,IAAMC,EAAQ7Y,EAAM8Y,MAAM,KAC1B,OAAqB,IAAjBD,EAAMlb,QAAgBkb,EAAM,GAAGlb,QAAUib,EACpC5Y,EAEF6Y,EAAM,GAAK,IAAMA,EAAM,GAAGnD,OAAO,EAAGkD,GAYvC,SAAUG,GAAaC,EAAmB3G,GAAmC,IAAf4G,EAAe,uDAAH,GAC9E,GAAID,EAAOE,IAAI7G,GACb,OAAO2G,EAGT,IAAMG,EAAkBC,GACtBC,GAAiBhH,EAAS,IAAIiH,UAAUd,GAAS,EAAIS,IACrD,IAEF,GAAID,EAAOO,GAAGJ,GACZ,MAAM,IAAI7X,MAAJ,iBAAoB0X,EAAOL,WAA3B,qCAAkEtG,EAAQsG,aAQlF,OANA7H,QAAQE,IAAR,0CACqCqI,GAAiBL,EAAQ,IAD9D,eACwEK,GACpEhH,EACA,MAGGA,EASH,SAAUmH,GAAiBC,EAAgBC,GAC/C,OAAID,EAAIF,GAAGG,GACF,EACED,EAAIE,GAAGD,GACT,GAEC,EAIN,SAAUE,GAAepZ,EAAgBoY,GAC7C,IAAMiB,EAAYrZ,EAAEmY,WACpB,OAAO,QAAYmB,WAAWpB,GAAoBmB,EAAWjB,GAAWA,GAGpE,SAAUQ,GAAiB5Y,EAAgBoY,GAC/C,OAAO,YAAMmB,WAAWvZ,EAAEmY,WAAYC,GAElC,SAAUS,GAAiB7Y,EAAcoY,GAC7C,OAAO,QAAYH,KAAK,YAAMuB,YAAYxZ,EAAGoY,GAAWA,GAGpD,SAAU,GAAgBpY,GAAqB,IAAVyZ,EAAU,uDAAD,EAClD,YAAUrI,IAANpR,EACK,MAEFkY,GAAoBlY,EAAEmY,WAAYsB,GAGpC,IC7EKC,GD6ECC,GAAc,CACzBC,QAAS,CACP7C,gBADO,SACS/W,GAAqB,IAAVyZ,EAAU,uDAAD,EAClC,OAAO,GAAgBzZ,EAAGyZ,IAE5BI,cAJO,SAIO7Z,GAAwB,IAAb8Z,EAAa,uDAAD,EACnC,MAAO,KAAO,GAAgB9Z,EAAG8Z,IAEnCC,kBAPO,SAOW/Z,GAChB,QAAUoR,IAANpR,EACF,MAAO,MAET,GAAIA,GAAK,GACP,OAAO+Q,KAAK8I,cAAc7Z,GACrB,GAAIA,GAAK,EACd,OAAO+Q,KAAK8I,cAAc7Z,EAAG,GACxB,GAAIA,EAAI,KACb,MAAO,WAEP,IAAIga,EAAI,EACNP,EAAS,EACX,MAAOO,EAAIha,EACTga,GAAK,GACLP,IAEF,MAAO,KAAO,GAAgBzZ,EAAGyZ,EAAS,OCtGlD,SAAYC,GACV,sBACA,4BACA,2BAHF,CAAYA,QAAS,K,IAwBf,G,WAGJ,WAAYO,GAAyB,yEACnClJ,KAAKkJ,kBAAoBA,E,kDAG3B,SACEC,EACAC,GAA2C,WAErCC,EAAyB,GAGzBC,EAAkBH,EAAiBI,MACvC,SAACC,GAAD,OAAWA,EAAM5Z,IAAM,EAAKsZ,mBAAqBM,EAAMxb,MAAQ,EAAKkb,qBAEtE,IAAKI,EACH,KAAM,uDAIR,IAAMG,EAAuB,KAEzBC,EAAa,EACjBP,EAAiBQ,SAAQ,SAACH,GACxBE,GAAcF,EAAMI,YAAY3D,gBAAkBuD,EAAM/a,SAG1D,IAAIob,EAAY,EAEVC,EAA4B,GAC9BC,EAAc,EAkClB,GAhCAZ,EAAiBQ,SAAQ,SAACH,GAAS,MAC3BQ,EAAmBR,EAAMI,YAAY3D,gBAAkBuD,EAAM/a,MAASib,EACtEO,GAAkB,UAACb,EAAoBI,EAAM5Z,WAA3B,QAAkC,GAAO,IACjE,GAAIoa,EAAkBC,EAAkBR,EAAsB,CAC5D,IAAMS,EAAeF,EAAkBC,EACvCJ,GAAaK,EAAeR,EAC5B,IAAIjC,EAASR,GAAUiD,EAAeR,EAAcF,EAAM/a,OACtDwb,EAAkB,OACpBxC,EAAS+B,EAAMI,aAEbJ,EAAM5Z,IAAM0Z,EAAgB1Z,IAC9ByZ,EAAO3c,KAAK,CACVqZ,UAAWyD,EACXpD,QAASkD,EACTxD,WAAY2B,EACZ0C,UAAWxB,GAAUyB,YAGpB,GAAIJ,EAAkBC,GAAmBR,EAAsB,CACpE,IAAMY,EAAcJ,EAAkBD,EACtCD,GAAeM,EAAcX,EACzBF,EAAM5Z,IAAM0Z,EAAgB1Z,IAC9Bka,EAAUpd,KAAK,CACbqZ,UAAWuD,EACXlD,QAASoD,EACT1D,WAAYmB,GAAUoD,EAAcX,EAAcJ,EAAgB7a,OAClE0b,UAAWxB,GAAUyB,WAO3BL,GACAF,EAAYP,EAAgBM,YAAY3D,gBAAkBqD,EAAgB7a,MAC1E,CAIA,IAAM6b,EACiF,KAAnFT,EAAYP,EAAgBM,YAAY3D,gBAAkBqD,EAAgB7a,OAC5Esb,EACFD,EAAUH,SAAQ,SAAC9D,GACjBwD,EAAO3c,KAAP,mCACKmZ,GADL,IAEEC,WAAYD,EAAMC,WAAWiC,UAAUd,GAASqD,eAIpDjB,EAAO3c,KAAP,MAAA2c,EAAeS,GAGjB,OAAOT,M,KAIEkB,GAAwC,IAAI,GAAuB,iB,0BCzG1E,SAAUC,GAAkBzF,GAChC,IADsD,EAChD0F,EAAwC,GAC1Cf,EAAa,EAFqC,kBAGlC3E,GAHkC,IAGtD,2BAA+B,KAApB,EAAoB,QAC7B2E,GAAc,EAAME,YAAY3D,gBAAkB,EAAMxX,OAJJ,8BAMtD,GAAIib,EAAa,EAAG,yBACE3E,GADF,IAClB,2BAA+B,KAApByE,EAAoB,QAC7B,GAAIA,EAAMI,YAAY3D,gBAAkB,EAAG,CACzC,IAAMyE,EAAalB,EAAMI,YAAY3D,gBAAkBuD,EAAM/a,MAASib,EACtEe,EAAcjB,EAAM5Z,IAAM+a,KAAKC,MAAkB,IAAZF,EAAoB,IAAM,KAJjD,+BAQpB,OAAOD,EAGF,SAAeI,GAAtB,qC,iEAAO,WACLC,EACAjM,GAFK,kGAICS,EAAWuC,GAAY3C,cACvB6L,EAAM,CAAC,4DACPvH,EAAW,IAAI,QAASsH,EAAiBC,EAAKzL,GAN/C,kBAOEkE,EAASwH,UAAUnM,IAPrB,2C,yBAUA,SAAeoM,GAAtB,uC,iEAAO,WACLC,EACAC,EACAC,GAHK,kGAKC9L,EAAWuC,GAAY3C,cACvB6L,EAAM,CACV,sFAEIvH,EAAW,IAAI,QAAS0H,EAAcH,EAAKzL,GAT5C,kBAUEkE,EAAS6H,UAAUF,EAAgBC,IAVrC,2C,yBAaA,SAAeE,GAAtB,uC,iEAAO,WACLJ,EACAE,EACA3D,GAHK,kGAKCtH,EAAS0B,GAAYR,YACrB0J,EAAM,CAAC,6EACPvH,EAAW,IAAI,QAAS0H,EAAcH,EAAK5K,GAP5C,kBAQEqD,EAAS+H,QAAQH,EAAgB3D,IARnC,2C,gCCCK+D,GAuKAC,GAuIAC,GA0IAC,GA2IAC,GAwLAC,GAmBA,GA6SAC,GAwNAC,GA8QAC,GA2MAC,GAo3BAC,GAsJAC,GA0HAC,GAoLAC,GAwMAC,GA4JAC,GA4JAC,GA0HA,GA4FAC,GAmCA,G,2FC30HNC,GAAgB,CACpBC,IAAK,6CACLC,KAAM,6CACNC,KAAM,6CACNC,KAAM,6CACNC,KAAM,8CAEFC,GAAU,IAAIC,IAAY5gB,OAAO4D,KAAKyc,KAGtC,G,mGACI,SAAYQ,EAAgBC,GAClC,IAAMtO,EAAU6N,GAAcQ,GAE9B,OAAO,IAAI,QACTrO,EACA,GACAsO,EAAatL,GAAYR,YAAcQ,GAAY3C,iB,oFAIhD,oHACCL,EAAUgD,GAAYG,SAASnD,QAChCA,EAFA,yCAGI,IAHJ,cAOCuO,EAAe,GAPhB,SASoBC,QAAQC,IAC/BjhB,OAAOkhB,OAAOb,IAAejd,KAAI,SAACqb,GAChC,OAAIA,GAAmBsC,EAAqBC,QAAQnd,QAAQ,YAAMsd,WAAW,MACjE3C,GAAgBC,EAAiBjM,OAZ5C,cASC4O,EATD,OAeDC,GAAS,EAfR,kBAgBEL,QAAQC,IACbjhB,OAAOshB,QAAQjB,IAAejd,IAA9B,iBAAApD,OAAA,QAAAA,CAAA,yBAAkC,iJAAQ6gB,EAAR,KAAgBrO,EAAhB,KAC1BwI,EAAW,GAEjBqG,IACME,EAAUH,EAAWC,GACrBG,EAAQ/F,GAAiB8F,EAASvG,GACpC5Y,EAAQ,QAAYyY,KAAK,IACzB0G,EAAQ5F,GAAG,QAAUd,KAAK,IAPE,wBAQxB1D,EAAW,EAAKsK,YAAYZ,GAAQ,GARZ,UASM1J,EAASuK,aATf,QASxBA,EATwB,OAU9Btf,EAAQqZ,GAAiBiG,EAAY1G,GACrC9H,QAAQE,IAAIoO,EAAMzG,WAAY3Y,EAAM2Y,YAXN,eAa1B4G,EAAcH,EAAM9F,UAAUtZ,GAbJ,kBAczB,CACLmB,GAAIiP,EACJ7Q,KAAMkf,EACNA,OAAQA,EACR7F,SAAUA,EACVuC,YAAaiE,EACbpf,MAAOA,EAAMwX,gBACbgI,sBAAuBD,EACvBE,YAAa,GAAF,OAAK,GACdF,EAAY/H,gBACZ,GAFS,sBAGIiH,EAHJ,oBAIXiB,WAAW,IA1BmB,4CAAlC,yDAjBG,2C,uFAiDA,WACL,OAAOnB,K,oFAGF,WACLxD,EACA2B,EACA1D,GAHK,gHAKCyF,EAAS1D,EAAM0D,OACfA,KAAUR,GANX,sBAOG,IAAI3c,MAAJ,UAAamd,EAAb,2CAPH,cASCpC,EAAkB4B,GAAcQ,GAChC1J,EAAWxD,KAAK8N,YAAYZ,GAAQ,GACpCkB,EAAWvG,GAAiBJ,EAAQ+B,EAAMnC,UAX3C,SAcmB4D,GAAkBzB,EAAM5Z,GAAIub,EAAgBL,GAd/D,UAcCO,EAdD,QAeD+C,EAASpG,GAAGqD,GAfX,wBAiBGgD,EAAqB,QAAUnH,KAAK,GAAGoH,IAAI,KAAKC,IAAI,GAjBvD,UAkBcjD,GAAa9B,EAAM5Z,GAAIkb,EAAiBuD,GAlBtD,eAkBGG,EAlBH,OAmBHjP,QAAQE,IAAI,gBAAiB+O,GAnB1B,UAoBmBA,EAAGC,OApBtB,QAoBG,EApBH,OAqBHlP,QAAQE,IAAI,wBAAyB,GArBlC,yBAwBiBoL,GAAgBrB,EAAM5Z,GAAIub,GAxB3C,eAwBCrK,EAxBD,OAyBC4N,EAAclH,GAAa4G,EAAUtN,GAzBtC,UA2BgB0C,EAASmL,cAAcD,GAAa,EAAMvD,GA3B1D,eA2BCle,EA3BD,OA4BLsS,QAAQE,IAAIxS,GA5BP,UA6BiBA,EAAOwhB,OA7BxB,eA6BC3K,EA7BD,OA8BLvE,QAAQE,IAAIqE,GA9BP,kBAgCE,CACLnE,QAAS,UACTgD,SAAS,IAlCN,iD,iJAqCA,WACL6G,EACA2B,EACA1D,GAHK,sGAKCyF,EAAS1D,EAAM0D,OACfA,KAAUR,GANX,sBAOG,IAAI3c,MAAJ,UAAamd,EAAb,2CAPH,cASC1J,EAAWxD,KAAK8N,YAAYZ,GAAQ,GATrC,SAYiC1J,EAASoL,kBAAkBzD,GAZ5D,cAYC0D,EAZD,OAaDC,EAAejH,GAAiBJ,EAAOsH,UAAUjH,GAAiB+G,EAAc,KAAM,IAbrF,UAe4BrL,EAASwH,UAAUG,GAf/C,eAeCrK,EAfD,OAgBLgO,EAAetH,GAAasH,EAAchO,GAhBrC,UAkBgB0C,EAASwL,gBAAgBF,GAlBzC,eAkBC7hB,EAlBD,OAmBLsS,QAAQE,IAAIxS,GAnBP,UAoBiBA,EAAOwhB,OApBxB,eAoBC3K,EApBD,OAqBLvE,QAAQE,IAAIqE,GArBP,kBAuBE,CACLnE,QAAS,UACTgD,SAAS,IAzBN,iD,qEA8BHsM,GAAc,IAAI,G,aC9IlBC,GAAW,IAAI,eAYf,G,gFACe,c,oHAEZ,WAAyBrJ,GAAzB,8FACLqJ,GAASC,gBAAgBtN,GAAYuN,uBADhC,SAEoBF,GAASG,QAChCxJ,EAAME,UAAUnW,GAChBiW,EAAMO,QAAQxW,GACdiY,GAAiBhC,EAAMC,WAAYD,EAAME,UAAUsB,UAAUD,gBAC7D/G,EACA,CACEiP,SAAUtP,KAAKsP,WARd,UAECC,EAFD,OAWLhQ,QAAQE,IAAI8P,KACR,YAAaA,GAZZ,sBAaG,IAAIxf,MAAMwf,EAAW5P,SAbxB,gCAeI,CACL6P,gBAAiB,QAAUtI,KAAKqI,EAAWE,YAC3CF,WAAYA,IAjBX,iD,yIAsBA,WACL1J,EACAf,GAFK,gHAICjG,EAAUgD,GAAYG,SAASnD,QAChCA,EALA,sBAMG,IAAI9O,MAAM,gCANb,cAQLmf,GAASC,gBAAgBtN,GAAYuN,uBARhC,SAWmBF,GAASQ,aAAa7Q,EAASgH,EAAME,UAAUnW,IAXlE,UAWCyb,EAXD,SAYD,YAAaA,GAZZ,sBAaG,IAAItb,MAAM,sCAAwCsb,EAAU1L,SAb/D,UAeCgQ,EAAc,QAAUzI,KAAKmE,EAAUA,WACvCuE,EAAS/H,GAAiBhC,EAAMC,WAAYD,EAAME,UAAUsB,WAC9DsI,EAAYE,GAAGD,GAjBd,kCAkB2BV,GAASY,aACrC,0BACAjR,EACAgH,EAAME,UAAUnW,IArBf,WAkBGmgB,EAlBH,OAuBHxQ,QAAQE,IAAR,4BAAiCsQ,KAC7BA,EAxBD,kCA0BgBlO,GAAY3C,cAAc8Q,eAAeD,GA1BzD,eA0BK,EA1BL,iBA2BqB,EAAGtB,OA3BxB,QA2BK,EA3BL,OA4BDlP,QAAQE,IAAI,uBAAwB,GA5BnC,eAgCCwQ,EAAYnL,EAAK0K,gBAAgBjB,IAAIzJ,EAAK0K,gBAAgBU,IAAI,MAhC/D,UAkCYhB,GAASiB,QACxBtK,EAAME,UAAUnW,GAChBiW,EAAMO,QAAQxW,GACdggB,EAAOxI,WACP6I,EAAU7I,WACVtC,EAAKyK,WACL1Q,EACAmB,KAAKsP,cACLjP,OACAA,EACAwF,EAAME,UAAUsB,SAChBxB,EAAMO,QAAQiB,UA7CX,WAkCC+I,EAlCD,SA+CD,YAAaA,GA/CZ,uBAgDG,IAAIrgB,MAAM,sBAAwBqgB,EAAGzQ,SAhDxC,eAmDLJ,QAAQE,IAAI,uBAAwB2Q,GAC9BC,EAAWrQ,KAAKsQ,oBAAoBF,GAE1C7Q,QAAQE,IAAI,sBAAuB4Q,GAtD9B,UAuDgBxO,GAAYR,YAAYkP,gBAAgBF,GAvDxD,eAuDCG,EAvDD,iBAwDiBA,EAAO/B,OAxDxB,eAwDC3K,EAxDD,OAyDLvE,QAAQE,IAAIqE,GAzDP,kBA2DE,CACLnE,QAAS,UACTgD,SAAS,IA7DN,iD,6FAiEC,SACNyN,GAEA,IAAIK,OAAkCpQ,EAClCqQ,OAAkCrQ,EAOtC,MANI,QAAS+P,IACXK,EAAW,QAAUvJ,KAAKkJ,EAAG,SAE3B,aAAcA,IAChBM,EAAW,QAAUxJ,KAAKkJ,EAAG,cAExB,CACL3P,QAAS2P,EAAG3P,QACZyG,KAAMkJ,EAAGlJ,KACT/J,GAAIiT,EAAGjT,GACP1O,MAAO,QAAUyY,KAAKkJ,EAAG3hB,OACzB7C,KAAMwkB,EAAGxkB,KACT8kB,WACAD,gB,KAKAE,GAAkB,IAAI,IF9E5B,SAAYnF,GACV,aACA,gCAFF,CAAYA,QAAc,KAuK1B,SAAYC,GACV,aACA,+BACA,iBACA,qBACA,qBACA,2BACA,mBACA,qBACA,qBACA,uBACA,uBACA,2BACA,2BACA,2BACA,yBAfF,CAAYA,QAAY,KAuIxB,SAAYC,GACV,aACA,+BACA,2BACA,iBACA,mBACA,uBACA,uBACA,2BACA,2BACA,2BACA,yBAXF,CAAYA,QAAe,KA0I3B,SAAYC,GACV,aACA,2BACA,uBACA,qCACA,qCACA,iCACA,iCACA,6CACA,+CACA,+CACA,iEACA,iEACA,mBAbF,CAAYA,QAAe,KA2I3B,SAAYC,GACV,aACA,+BACA,2BACA,iBACA,qBACA,2BACA,uBACA,uBACA,2BACA,+BACA,+BACA,yBAZF,CAAYA,QAAa,KAwLzB,SAAYC,GACV,aACA,+BACA,2BACA,iBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,uBACA,uBACA,2BACA,2BACA,2BACA,yBAhBF,CAAYA,QAAY,KAmBxB,SAAY/S,GACV,eACA,iBAFF,CAAY,QAAc,KA6S1B,SAAYgT,GACV,aACA,iBACA,iBACA,2BACA,2BACA,+BACA,+BACA,iBACA,iDACA,iDACA,qBACA,iCACA,iCACA,2BACA,uBACA,uBACA,iBACA,iBACA,eACA,mBApBF,CAAYA,QAAmB,KAwN/B,SAAYC,GACV,aACA,uCACA,iBACA,2BACA,2BACA,+BACA,+BACA,iBACA,iDACA,iDACA,qBACA,iCACA,iCACA,2BACA,uBACA,uBACA,iBACA,iBACA,eACA,mBApBF,CAAYA,QAAoB,KA8QhC,SAAYC,GACV,aACA,6CACA,iDACA,qBACA,qBACA,uBACA,2BACA,2BACA,iDACA,iDACA,+BACA,+BACA,iBACA,yCACA,iCACA,iCACA,2BACA,6CACA,uBACA,uBACA,+CACA,+CACA,yCACA,qDACA,qDACA,+CACA,+CACA,iEACA,qDACA,iCACA,+BACA,mBACA,mBACA,mBACA,yBACA,mBApCF,CAAYA,QAAY,KA2MxB,SAAYC,GACV,aACA,mBACA,iBACA,qBACA,qBACA,2BACA,2BACA,2BACA,uCACA,uCACA,uCACA,uCACA,+CACA,+CACA,+BAfF,CAAYA,QAAgB,KAo3B5B,SAAYC,GACV,aACA,+BACA,2BACA,iBACA,qBACA,qBACA,qBACA,2BACA,qBACA,uBACA,uBACA,2BACA,iCACA,iBACA,yBAfF,CAAYA,QAAY,KAsJxB,SAAYC,GACV,aACA,iBACA,iBACA,iBACA,qCACA,iCACA,iCACA,iCACA,2BACA,uBAVF,CAAYA,QAAmB,KA0H/B,SAAYC,GACV,aACA,uCACA,iBACA,iBACA,qCACA,iCACA,iCACA,iCACA,2BACA,uBAVF,CAAYA,QAAoB,KAoLhC,SAAYC,GACV,aACA,+BACA,uBACA,iBACA,qCACA,iCACA,qBACA,qBACA,iCACA,iCACA,2BACA,6CACA,uBACA,+CACA,+CACA,yCACA,6CACA,iDACA,qDAnBF,CAAYA,QAAY,KAwMxB,SAAYC,GACV,aACA,iBACA,mBACA,qBACA,2BACA,6CACA,yCACA,+CACA,yBACA,uBACA,iBACA,iBACA,eACA,mBAdF,CAAYA,QAAoB,KA4JhC,SAAYC,GACV,aACA,uCACA,mBACA,qBACA,2BACA,6CACA,yCACA,+CACA,yBACA,uBACA,iBACA,iBACA,eACA,mBAdF,CAAYA,QAAqB,KA4JjC,SAAYC,GACV,aACA,qBACA,iBACA,yBACA,+BACA,qBACA,2BACA,6CACA,uBACA,uBACA,2BACA,yCACA,+CACA,iEACA,6BACA,qCACA,iCAjBF,CAAYA,QAAa,KA0HzB,SAAYrQ,GACV,aACA,+BACA,2BACA,uBACA,yBACA,mBACA,mBACA,mBACA,uBACA,yBAVF,CAAY,QAAmB,KA4F/B,SAAYsQ,GACV,aACA,iBACA,2BACA,2BACA,6CACA,uBACA,uBACA,qBARF,CAAYA,QAAsB,KAmClC,SAAY1P,GAEV,mBAEA,iBAJF,CAAY,QAAqB,KAqB1B,IAAM6T,GAAqB,gBAAH,mLAczB,GAAqC,SAACnT,EAAQC,GAAT,OAA4BD,KAEjE,SAAU,GAAOG,GAAuE,IAAhDC,EAAgD,uDAAd,GAC9E,MAAO,CACLkQ,WADK,SACMhQ,EAAsCC,GAC/C,OAAOH,GAAY,SAACI,GAAD,OAA2BL,EAAOM,QAAyB0S,GAAoB7S,EAApD,mCAAmEC,GAAmBC,MAAyB,gB,iBG/1HnK,SAAS4S,GAAoBC,GAC3B,MAAO,YAAaA,E,IAGhB,G,oKACG,WAAyBjL,GAAzB,uGACc7F,KAAK+Q,YAAYlL,EAAO,CAAC,qBAAemL,GAAI,qBAAeC,KADzE,UACCnM,EADD,QAED+L,GAAoB/L,GAFnB,sBAGG,IAAI/U,MAAM+U,EAAKnF,SAHlB,gCAKI,CAAE6P,gBAAiB1K,EAAKoM,oBAL5B,gD,6IASC,WACNC,EACAC,GAFM,4GAIAvS,EAAUgD,GAAYG,SAASnD,aACrBwB,IAAZxB,EALE,yCAMG,CAAEc,QAAS,2BAA4BgD,SAAS,IANnD,cAUA0O,EAAc,IAAI,kBAAY,CAClCC,yBAA0BH,EAAapL,UAAUnW,GACjD2hB,uBAAwBJ,EAAa/K,QAAQxW,GAC7C4hB,gBAAiB3S,EACjB4S,iBAAkB5P,GAAYuN,sBAC9BsC,SAAU,IAAI,0BAAoB,CAIhCC,SAAU,KAEVC,gBAAiB,GAIjBC,kBAAkB,EAIlBC,gBAAiBV,MA7Bf,SAgCgBC,EAAYU,gBAhC5B,cAgCAC,EAhCA,OAiCAC,EAAiB5J,GAAe8I,EAAarL,WAAYqL,EAAapL,UAAUsB,UAjChF,UAkCuB2K,EAAQE,sBAlC/B,WAkCAC,EAlCA,OAmCN5S,QAAQE,IAAI0S,IAEVtK,GAAiBoK,EAAgBd,EAAapL,UAAUsB,UAAUW,GAChE,YAAMQ,WAAW2J,EAAgBhB,EAAapL,UAAUsB,WAtCtD,0CAyCG,CAAE1H,QAAS,8CAA+CgD,SAAS,IAzCtE,yBA4CeqP,EAAQI,cAAcH,EAAe7K,WAAY,qBAAeiL,OA5C/E,eA4CAplB,EA5CA,OA6CNsS,QAAQE,IAAIxS,EAAOqlB,gBACbC,EAAS,YAAM/J,WAAWyJ,EAAe7K,WAAY+J,EAAapL,UAAUsB,UAE5EmL,EAAc,QAAYjK,WAAWtb,EAAOqlB,eAAeG,sBAE3DC,EAAYrK,GAChBmK,EAAYzK,UAAU,QAAYb,KAAK,SACvCiK,EAAa/K,QAAQiB,UAEjBsL,EAAO9K,GAAiB6K,EAAWvB,EAAa/K,QAAQiB,UAtDxD,kBAwDC,CACLuL,WAAYL,EACZM,iBAAkBF,EAClBzB,kBAAmBrJ,GAAiB2K,EAAarB,EAAa/K,QAAQiB,UACtEpE,KAAMhW,EAAOqlB,eAAeQ,eAC5BC,KAAMf,IA7DF,4C,2IAiED,WAAcb,GAAd,iHACcnR,KAAK+Q,YAAYI,EAAc,CAAC,qBAAeH,GAAI,qBAAeC,KADhF,UACCnM,EADD,QAED+L,GAAoB/L,GAFnB,yCAGIA,GAHJ,uBAMsBA,EAAKiO,KAAKC,MACnC3K,GAAe8I,EAAarL,WAAYqL,EAAapL,UAAUsB,UAAUD,WACzE,qBAAeiL,OARZ,UAMCY,EAND,iBAWCA,EAAaC,oBAXd,kCAYwBrR,GACtBR,YACAkP,gBAAgB0C,EAAaC,qBAd/B,eAYKC,EAZL,iBAe6BA,EAAW1E,OAfxC,QAeK2E,EAfL,OAgBD7T,QAAQE,IAAI2T,GAhBX,yBAkBcvR,GAAYR,YAAYkP,gBAAgB0C,EAAaxP,aAlBnE,eAkBG2M,EAlBH,iBAmBmBA,EAAG3B,OAnBtB,QAmBG3K,EAnBH,OAoBHvE,QAAQE,IAAIqE,GApBT,yBAsBHmP,EAAaI,UAtBV,8CAwBE,CACL1T,QAAS,WACTgD,SAAS,IA1BN,8D,kJA8BA,WAAuBwO,GAAvB,uGAEcnR,KAAK+Q,YAAYI,EAAc,CAAC,qBAAeH,KAF7D,UAEClM,EAFD,QAGD+L,GAAoB/L,GAHnB,yCAIIA,GAJJ,gCAMEd,GAAcsP,sBAAsBxO,EAAK7B,KAAM6B,EAAK+N,iBAAkB/N,EAAK8N,aAN7E,gD,iEAYH,GAAW,6DACjB,SAAS,GAAIrU,GACX,OAAO,GAAO,IAAI,oBAAcA,IAI3B,SAAegV,GAAtB,mC,iEAAO,WAA8BC,GAA9B,2GAEqB,GAAI,IAAUzF,WAAW,CACjD0F,YAAaD,EAAU/jB,KAAI,SAACwS,GAAD,OAAUA,EAAKnD,mBAHvC,cAEC4U,EAFD,OAKCC,EAAQD,EAAY1O,OAAO4O,QAAO,SAACnkB,EAAqC+Z,GAE5E,OADA/Z,EAAI+Z,EAAM5Z,IAAM4Z,EACT/Z,IACN,IAEGxC,EAAyC,GAC/CumB,EAAU7J,SAAQ,SAAC1H,GACjBhV,EAAOgV,GAAQ0R,EAAM1R,EAAKnD,kBAZvB,kBAcE7R,GAdF,2C,yBAiBP,IAAM4mB,GAAiB,IAAI,GCzIZ,gCAAgB,CAC7B7lB,KAAM,kBACN8lB,MAAO,CACL5O,QAAS6O,QACT3O,UAAW,CAAE4O,KAAM3nB,OAAoC4nB,UAAU,GACjE5O,SAAU0O,SAEZG,MAAO,CAAC,kBACRjQ,MAR6B,SAQvB6P,GACJ,IAAMlO,EAAoC,iBAAI,IAQ9C,OAPA,0BAAY,WACVA,EAAUnX,MAAQqlB,EAAM1O,UAAU3V,KAAI,SAACoW,GAAD,uBAAC,mBAClCA,GADiC,IAEpCS,eAAgBT,EAAMsE,WAAaxB,GAAUyB,UAAO/J,EAAY,YAElEd,QAAQE,IAAIqU,EAAM1O,UAAWQ,EAAUnX,UAElC,CAAEmX,cAEXiD,QAAS,CACDlC,cADC,SACad,GAAsB,0KAClChH,EAAUgD,GAAYG,SAASnD,QAChCA,EAFqC,CAAF,qBAGhC,IAAI9O,MAAM,4BAHsB,cAKlCokB,EAAwB,sBAAS,CACrCpN,SAAU,UACVP,YAAY,IAER4N,EAAyB,sBAAS,CACtCrN,SAAU,WACVP,YAAY,IAEdX,EAAMY,QAAU,CAAC0N,EAAeC,GAbQ,SAclC,EAAKC,aAAaxO,EAAOhH,GAdS,cAelCyV,EAAgBT,GAAeU,mBAAmB1O,GAAO3E,MAAK,SAACsT,GACnEjV,QAAQE,IAAI,mBAAoB+U,GAChCL,EAAc3N,YAAa,EAC3B2N,EAAcrP,KAAO0P,KAEjBC,EAAiB9D,GAAgB4D,mBAAmB1O,GAAO3E,MAAK,SAACsT,GACrEjV,QAAQE,IAAI,oBAAqB+U,GACjCJ,EAAe5N,YAAa,EAC5B4N,EAAetP,KAAO0P,KAvBgB,UAyBlCnH,QAAQC,IAAI,CAACgH,EAAeG,IAzBM,QA0BxC5O,EAAMY,QAAQiO,MAAK,SAACC,EAAGC,GACrB,YAAevU,IAAXsU,EAAE7P,WAAiCzE,IAAXuU,EAAE9P,MACpBmD,GAAiB0M,EAAE7P,KAAK0K,gBAAiBoF,EAAE9P,KAAK0K,sBACpCnP,IAAXsU,EAAE7P,UACIzE,IAAXuU,EAAE9P,KACG,EAEA,GAGD,KApC4B,+CAwCpC8B,QAzCC,SAyCOf,EAAwBkB,EAAmBjC,GAAsB,4KAC7Ee,EAAMW,YAAa,EACnBX,EAAMlG,aAAUU,EAF6D,SAIrExB,EAAUgD,GAAYG,SAASnD,QAChCA,EALwE,CAAF,qBAMnE,IAAI9O,MAAM,wBANyD,WAUvE,EAAK8kB,OAAOxP,SAV6D,CAAF,gBAWzEyP,EAAkB,SAACjP,GAAD,OAAWgO,GAAekB,iBAAiBlP,IAXY,2BAYhEA,EAAMsE,WAAaxB,GAAUqM,QAZmC,iBAazEF,EAAkB,SAACjP,GAAD,OAChBoJ,GAAYgG,aAAapP,EAAME,UAAWlH,EAASgH,EAAMC,aAdc,2BAehED,EAAMsE,WAAaxB,GAAUuM,OAfmC,iBAgBzEJ,EAAkB,SAACjP,GAAD,OAChBoJ,GAAYkG,YAAYtP,EAAME,UAAWlH,EAASgH,EAAMC,aAjBe,yCAmBnE,EAAKuO,aAAaxO,EAAOhH,GAnB0C,gBAoBxDwB,IAAb0G,EApBqE,wBAsBjE3G,EAtBiE,mBAsBrDyF,GAtBqD,UAuBjE,EAAKc,cAAcvG,GAvB8C,WAwBlEA,EAAKqG,SAAW,UAACrG,EAAKqG,QAAQ,UAAd,OAAC,EAAiB3B,KAxBgC,uBAyB/D,IAAI/U,MAAM,sBAzBqD,QA2BvEgX,EAAW3G,EAAKqG,QAAQ,GAAGM,SAC3BjC,EAAO1E,EAAKqG,QAAQ,GAAG3B,KACvBvF,QAAQE,IAAR,UAAesH,EAAf,8BAA6CjC,EAAK0K,gBAAgBpI,aA7BK,aA+BjEL,EA/BiE,OAgClE,YAhCkE,QAmClE,aAnCkE,gCAiCrE+N,EAAkB,SAACjP,GAAD,OAAWgO,GAAejN,QAAQf,IAjCiB,oCAoCrEiP,EAAkB,SAACjP,GAAD,OAChB8K,GAAgB/J,QAAQf,EAAOf,IArCoC,mCAwC/D,IAAI/U,MAAM,qBAAuBgX,GAxC8B,QA0CzElB,EAAMS,eAAiBS,EA1CkD,yBA4CtD+N,EAAgBjP,GA5CsC,QA4CrE5Y,EA5CqE,OA6C3EZ,OAAO+oB,OAAOvP,EAAO5Y,GA7CsD,qDA+C3EsS,QAAQE,IAAR,MACIE,EAAUgC,GAAoB,EAAD,IACjCkE,EAAMlD,SAAU,EAChBkD,EAAMlG,QAAUA,EAlD2D,yBAoD3EkG,EAAMW,YAAa,EApDwD,gFAuD/ED,aAhGO,SAgGMQ,GACX,OAAO,UAAQ,KAAcA,EAASjI,cAAgB,SAExDkI,aAnGO,SAmGMnB,EAAqBiB,GAAc,MACxC7Z,EAAM,UAAG6Z,EAAOhC,YAAV,aAAG,EAAa0K,gBAC5B,QAAenP,IAAXpT,EACF,MAAO,MAET,IAAMooB,EAAQvN,GAAiB7a,EAAQ4Y,EAAMO,QAAQiB,UACrD,OAAOxB,EAAMO,QAAQ8G,OAAS,IAAM,GAAgBmI,EAAMpP,kBAE5DS,OA3GO,SA2GAb,GACL,OAAOA,EAAMsE,WAAaxB,GAAUyB,MAEtCvD,kBA9GO,SA8GWhB,GAChB,OAAIA,EAAMsE,WAAaxB,GAAUyB,MAASpK,KAAKqF,SAGtC,UAFA,gBAKXc,SArHO,SAqHEN,GACP,IAAM7X,EAAO6X,EAAME,UAAU/X,KAC7B,OAAI6X,EAAMsE,WAAaxB,GAAUuM,OACxB,OAASrP,EAAME,UAAUmH,OAEzBlf,GAGXqY,OA7HO,SA6HAR,GACL,IAAM7X,EAAO6X,EAAMO,QAAQpY,KAC3B,OAAI6X,EAAMsE,WAAaxB,GAAUqM,QACxB,OAASnP,EAAME,UAAUmH,OAEzBlf,GAGLqmB,aArIC,SAqIYxO,EAAqBhH,GAAe,wKAE/BgM,GAAgBhF,EAAME,UAAUnW,GAAIiP,GAFL,OAE/CiC,EAF+C,OAG/CsN,EAAWvG,GAAiBhC,EAAMC,WAAYD,EAAME,UAAUsB,UAC9DiO,EAAY9N,GAAa4G,EAAUtN,GACzC+E,EAAMC,WAAagC,GAAiBwN,EAAWzP,EAAME,UAAUsB,UALV,+CAQzDkO,OAAQ,CAAC3M,M,UC9LX,GAAOnE,OAAS,GAED,U,uICEJtU,MAAM,gC,GACX,yBAQQ,cAPN,yBAMK,WALH,yBAA0B,MAAtBmV,MAAM,OAAM,SAChB,yBAA2C,MAAvCA,MAAM,MAAMnV,MAAM,YAAW,SACjC,yBAAqD,MAAjDmV,MAAM,MAAMnV,MAAM,YAAW,mBACjC,yBAAmD,MAA/CmV,MAAM,MAAMnV,MAAM,YAAW,iBACjC,yBAAoD,MAAhDmV,MAAM,MAAMnV,MAAM,YAAW,sB,OAI/BA,MAAM,gB,GACR,yBAAqB,WAAjB,yBAAY,SAAT,W,MACP,yBAAqB,MAAjBqV,QAAQ,KAAG,S,IACXrV,MAAM,Y,IACNA,MAAM,Y,IAMNA,MAAM,6B,IAIDA,MAAM,Q,UAMYA,MAAM,W,eAEtBqlB,QAAQ,YAAYrlB,MAAM,iB,GAC7B,yBAQU,UAPRA,MAAM,aACNslB,GAAG,KACHC,GAAG,KACHpnB,EAAE,oBACFqnB,KAAK,cACLC,OAAO,UACPC,eAAa,K,YAahB,yBAAmD,OAA9CzlB,IAAA,KAAwBD,MAAM,e,aAItCA,MAAM,Y,IACNA,MAAM,Y,IACHA,MAAM,sC,kOApErB,yBA+EM,YA9EJ,yBAKE,G,WAJS,EAAA2lB,qB,qDAAA,EAAAA,qBAAoB,IAC5BrP,QAAS,EAAAsP,cACVC,YAAY,OACZC,YAAY,gB,iCAGd,yBAsEQ,QAtER,GAsEQ,CArEN,GASA,yBA2DQ,cA1DN,yBAOK,KAPL,GAOK,CANH,GACA,GACA,yBAA0D,KAA1D,GAA0D,6BAAlC,EAAAnN,cAAc,EAAAoN,cAAW,GACjD,yBAEK,KAFL,GAEK,6BADA,EAAAC,gBAAgBC,QAAO,U,2BAI9B,yBAgDK,2CAhDe,EAAArR,WAAS,SAAlByE,G,gCAAX,yBAgDK,MAhDiCza,IAAKya,EAAMxb,KAAMmC,MAAM,gB,CAC3D,yBAMK,KANL,GAMK,CALQqZ,EAAMtD,S,yBAAjB,yBAAwE,O,MAA7C9V,IAAKoZ,EAAMtD,QAAS/V,MAAM,kB,wDACrD,yBAGM,OAHAkmB,MAAO7M,EAAM5Z,I,CACjB,yBAA2B,wCAAnB4Z,EAAMxb,MAAI,GAClB,yBAA0C,MAA1C,GAA0C,6BAArBwb,EAAM0D,QAAM,I,eAGrC,yBAAkF,MAA7EmJ,MAAO,EAAAC,gBAAgB9M,GAAQrZ,MAAM,Y,6BAAc,EAAAomB,YAAY/M,IAAK,aACzE,yBA4BK,MA5BDrZ,MAAM,WAAYkmB,MAAO,EAAAG,WAAWhN,I,2DACnC,EAAAiN,YAAYjN,IAAS,IACxB,GAAY,EAAAkN,a,yBAAZ,yBAyBO,OAzBP,GAyBO,CAxBO,EAAAC,cAAcnN,I,yBAA1B,yBAuBO,Y,yBAtBL,yBAqBC,MArBD,GAqBC,CApBC,GASA,yBAUU,UATRrZ,MAAM,gBACNslB,GAAG,KACHC,GAAG,KACHpnB,EAAE,oBACFqnB,KAAK,cACLC,OAAO,UACPC,eAAa,IACZe,mBAAkB,EAAAC,UAAUrN,GAC7BsN,oBAAkB,K,gCAErB,M,+FAIP,yBAAkD,KAAlD,GAAkD,6BAA1B,EAAAC,YAAYvN,IAAK,GACzC,yBAQK,KARL,GAQK,CAPH,yBAMM,MANN,GAMM,CALJ,yBAGE,GAFCwN,WAAY,EAAAhR,gBAAgB,EAAAyE,cAAcjB,EAAM5Z,KAChD,sBAAiB,mBAAE,EAAA6a,cAAcjB,EAAM5Z,IAAMqnB,WAAWtR,K,6CAE3D,yBAA4C,G,WAA3B,EAAA8E,cAAcjB,EAAM5Z,I,yCAApB,EAAA6a,cAAcjB,EAAM5Z,IAAE,I,qEClE/CsnB,I,oBAAqB,CACzBC,KAAM,KACNC,IAAK,EACLC,KAAM,IACNC,IAAK,IACLC,IAAK,EACLC,IAAK,IAGDC,GAAmB,CACvBC,IAAK,IACLJ,IAAK,IACLK,IAAK,IACL,QAAS,KACTC,IAAK,MAGP,SAASC,GAAQrO,EAAoBxb,EAAc8pB,GACjD,IAAMroB,EAA8B,GAChCsoB,EAAM,EASV,OARAvO,EAAMG,SAAQ,SAACjb,GAAK,MACZspB,EAAC,UAAGF,EAAKppB,EAAEwe,eAAV,QAAqB,EAC5B6K,GAAOC,EACPvoB,EAAIf,EAAEkB,IAAMooB,KAEd3rB,OAAO4D,KAAKR,GAAKka,SAAQ,SAACV,GACxBxZ,EAAIwZ,GAAe,IAATxZ,EAAIwZ,GAAY8O,KAErB,CAAE/pB,OAAMyB,OAKV,SAAewoB,GAAtB,mC,iEAAO,WAAgCzO,GAAhC,oGACC/Z,EAA8B,GACpC+Z,EAAMG,SAAQ,SAACjb,GACbe,EAAIf,EAAEkB,IAAM,IAAQ4Z,EAAMpd,UAEtB8rB,EAAgB,CACpBlqB,KAAM,YACNyB,OAGI0oB,EAAsC,GAC5C3O,EACG4O,QAAO,SAACC,GAAD,MAAqB,QAAbA,EAAGnL,QAAiC,OAAbmL,EAAGnL,UACzCvD,SAAQ,SAACjb,GACRypB,EAAYzpB,EAAEkB,IAAM,MAElB0oB,EAAW,CACftqB,KAAM,mBACNyB,IAAK0oB,GAlBF,kBAqBE,CACLD,EACAI,EACAT,GAAQrO,EAAO,UAAW0N,IAC1BW,GAAQrO,EAAO,QAASiO,MAzBrB,2C,oEChCP,SAASc,GACPC,EACAC,EACAC,GAEA,IAAIC,EAAI,EACR,MAAOA,IAAM,EAAG,CACd,IAAMC,EAAavsB,OAAOkhB,OAAOkL,GAAO7E,QAAO,SAACe,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAChE,KAAIgE,EAAa,MAASjO,KAAKkO,IAAID,EAAa,KAAO,MA+CrD,OA/C4D,WAC5D,IAAIE,EAAa,IAAMF,EACjBG,EAAc,IAAI9L,IACtB5gB,OAAO4D,KAAKuoB,GAAQJ,QAAO,SAACrpB,GAAD,OAAS4b,KAAKkO,IAAIL,EAAOzpB,GAAO0pB,EAAM1pB,IAAQ,SAG3E,IAAKgqB,EAAYC,IAAIN,GAAa,CAChC,IAAMO,EAAatO,KAAKuO,IAAI,EAAGT,EAAMC,GAAcI,GACnDA,GAAcG,EAAaR,EAAMC,GACjCD,EAAMC,GAAcO,EACpBF,EAAYI,IAAIT,GAGlB,GAAI/N,KAAKkO,IAAIC,GAAc,KAAO,CAEhC,IAAMM,EAAe/sB,OAAO4D,KAAKwoB,GAC9BL,QAAO,SAACrpB,GAAD,OAAUgqB,EAAYC,IAAIjqB,MACjCU,KAAI,SAACV,GAAD,OAAS0pB,EAAM1pB,MACnB6kB,QAAO,SAACe,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC3B,GAAIwE,EAAe,IAAM,CACvB,IAAMC,EAAqBP,EAAaM,EACxC/sB,OAAO4D,KAAKwoB,GACTL,QAAO,SAACrpB,GAAD,OAAUgqB,EAAYC,IAAIjqB,MACjC4a,SAAQ,SAAC5a,GACR,IAAMuqB,EAAUb,EAAM1pB,GAChBwqB,EAASF,EAAqBC,EACpCb,EAAM1pB,IAAQwqB,SAEb,CAEL,IAAMC,EAAQntB,OAAOkhB,OAAOkL,GAAO7E,QAAO,SAACe,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GACrD,EAAqBkE,EAAaU,EACxCntB,OAAO4D,KAAKwoB,GAAO9O,SAAQ,SAAC5a,GAC1B,IAAMuqB,EAAUb,EAAM1pB,GAChBwqB,EAAS,EAAqBD,EACpCb,EAAM1pB,IAAQwqB,MAIpBltB,OAAO4D,KAAKwoB,GAAO9O,SAAQ,SAAC5a,GAC1B,IAAIuqB,EAAUb,EAAM1pB,GAChB0qB,MAAMH,KACRA,EAAU,GAEZb,EAAM1pB,GAAO4b,KAAKuO,IAAI,EAAGvO,KAAK+O,IAAI,IAAKzC,WAAWqC,EAAQlD,QAAQ,UA5CR,IAoDnD,oCAAgB,CAC7BpoB,KAAM,cACN8lB,MAAO,CACL/O,UAAW,CACTiP,KAAM2F,MACN1F,UAAU,GAEZ+C,WAAY3qB,OACZqqB,YAAa3C,SAEf6F,WAAY,CAAEC,SAAA,SACd5V,MAX6B,SAWvB6P,EAXuB,GAWR,IAANgG,EAAM,EAANA,KACPrP,EAAwC,sBAAS,IACnDsP,EAAe,6CACnB,oBACE,iBAAM,CAACjG,EAAM/O,UAAW+O,EAAMkD,eAC9B,WACE,GAAIlD,EAAMkD,WACR,cAAwB3qB,OAAOshB,QAAQmG,EAAMkD,YAA7C,eAA0D,CAArD,8BAAKpnB,EAAL,KAASnB,EAAT,KACHgc,EAAc7a,GAAMnB,OAGtBpC,OAAO+oB,OAAO3K,EAAeD,GAAkBsJ,EAAM/O,iBAGrB1E,IAAhCoK,EAAcsP,IACdA,EAAajb,gBAAiB2L,IAE9BsP,EAAeA,EAAajb,eAE9B,cAAsBzS,OAAOshB,QAAQmG,EAAM/O,WAA3C,eAAuD,CAAlD,8BAAOyE,EAAP,KACGA,EAAM5Z,MAAM6a,IAChBA,EAAcjB,EAAM5Z,IAAM,OAKlC,IAAMoqB,EAAU,GACVC,EAAY,WAChB1B,GAAayB,EAASvP,EAAesP,GACrC1tB,OAAO+oB,OAAO4E,EAASvP,IAGzB,gBACEA,GACA,WACEwP,MAEF,CAAEC,SAAU,MAGd,IAAM/D,EAAkB,uBAAS,WAE/B,IADA,IAAI1nB,EAAQ,EACZ,MAA0BpC,OAAOshB,QAAQlD,GAAzC,eAAyD,CAApD,8BAAO0P,EAAP,KACH1rB,GAAS0rB,EAEX,OAAO1rB,KAGT,mBAAMgc,GAAe,WACnBqP,EAAK,oBAAqBrP,MAG5B,IAAMyL,EAAc,uBAAS,WAE3B,IADA,IAAIznB,EAAQ,EACZ,MAAsBpC,OAAOshB,QAAQmG,EAAM/O,WAA3C,eAAuD,CAAlD,8BAAOyE,EAAP,KACH/a,GAAS+a,EAAMI,YAAY3D,gBAAkBuD,EAAM/a,MAErD,OAAOA,KAGHqnB,EAAiD,iBAAI,MACrDC,EAAgB,gBAAa,yCAAC,uHAAYkC,GAAiBnE,EAAM/O,YAAnC,4CAUpC,OATA,mBAAM+Q,GAAsB,WAAK,MACzBvI,EAAM,UAAGuI,EAAqBrnB,aAAxB,aAAG,EAA4BgB,IACvC8d,IACFlhB,OAAO4D,KAAKwa,GAAed,SAAQ,SAAC5a,GAClC0b,EAAc1b,GAAO,KAEvB1C,OAAO+oB,OAAO3K,EAAe8C,OAG1B,CAAE9C,gBAAe0L,kBAAiBD,cAAaJ,uBAAsBC,kBAE9ElN,QAAS,CACP0N,YADO,SACK/M,GACV,OAAoB,IAAhBA,EAAM/a,MACD,MAEFuR,KAAKgJ,kBAAkBQ,EAAM/a,QAEtC6nB,gBAPO,SAOS9M,GACd,OAAOA,EAAM/a,MAAM2Y,YAErBqP,YAVO,SAUKjN,GACV,OAAOxJ,KAAKgG,gBAAgBwD,EAAMI,YAAY3D,kBAEhD8Q,YAbO,SAaKvN,GACV,OAAOxJ,KAAK8I,cAAcU,EAAMI,YAAY3D,gBAAkBuD,EAAM/a,QAEtE+nB,WAhBO,SAgBIhN,GACT,MAAO,gBAAiBA,EAASA,EAAsB0E,YAAc,IAEvEyI,cAnBO,SAmBOnN,GACZ,MACE,cAAeA,GACdA,EAAsB2E,WACvB3E,EAAMI,YAAY3D,gBAAkB,GAGxC4Q,UA1BO,SA0BGuD,GACR,IAAM5Q,EAAQ4Q,EAERC,EACH7Q,EAAMyE,sBAAsBhI,gBAAkBuD,EAAMI,YAAY3D,gBAAmB,IACtF,gBAAUoU,EAAiBjE,QAAQ,GAAnC,aAA0C,IAAMiE,GAAkBjE,QAAQ,MAG9Eb,OAAQ,CAAC3M,M,UCtLX,GAAOnE,OAAS,GAChB,GAAOC,UAAY,kBAEJ,UCDT,SAAU4V,GACdhB,EACAiB,GAEA,IAAIC,EAAc,EACdC,EAAgB,EAChBC,EAAc,EAWlB,OAVAruB,OAAOshB,QAAQ2L,GAAS3P,SAAQ,SAACgR,GAAS,MAClCC,EAAQ,UAAGL,EAAII,EAAM,WAAb,QAAoB,GAC9BA,EAAM,GAAK,GAAKC,EAAW,KAC7BJ,GAAe7P,KAAKkO,IAAI8B,EAAM,GAAKC,GACnCF,IACIC,EAAM,IAAMC,GACdH,QAIC,CACLI,WAAYJ,EAAgB,EAC5B9a,QAAS,GAAF,OAAK8a,EAAL,cAAwBC,EAAxB,qBAAgDF,EAAYpE,QACjE,GADK,mC,cCxBL0E,GAAgB,CACpB,kDACA,gDAYIC,GAAgB,IAAI9N,IACxB,CACE,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,8CACAxd,KAAI,SAACjC,GAAD,OAAOA,EAAEsR,kBAGV,SAAekc,KAAtB,gC,iEAAO,wHACCC,EAAU,GADX,kBAEaH,IAFb,IAEL,2BAAWI,EAAsB,QAC/BD,EAAQvuB,KAAKyuB,MAAMD,IAHhB,8BAMClW,EAAsB,GACtBoW,EAAc,IAAInO,IAPnB,MAQgBgO,EARhB,gDAQMhuB,EARN,eASoBA,EATpB,eASGouB,EATH,iBAUgCA,EAASC,OAVzC,QAUGC,EAVH,OAWHvW,EAAOtY,KAAP,MAAAsY,EAAM,gBACDuW,EAAUvW,OACVoT,QACC,SAAC5O,GAAD,OACmB,GAAjBA,EAAM/I,UACL2a,EAAYpC,IAAIxP,EAAM3K,QAAQC,iBAC9Bic,GAAc/B,IAAIxP,EAAM3K,QAAQC,kBAEpCrP,KAAI,SAAC+Z,GAEJ,OADA4R,EAAYjC,IAAI3P,EAAM3K,QAAQC,eAC1B0K,EAAMgS,SAAWhS,EAAMgS,QAAQ5b,SAAS,WAC1C,mCACK4J,GADL,IAEEgS,QAAShS,EAAMgS,QAAQC,QAAQ,UAAW,mCAGrCjS,OA3BZ,0CAgCLxE,EAAO0P,MAAK,SAACC,EAAGC,GACd,IAAM8G,EAAQ/G,EAAE3mB,KACV2tB,EAAQ/G,EAAE5mB,KAChB,OAAI0tB,EAAQC,EACH,EAELD,EAAQC,GACF,EAEH,KAzCJ,kBA2CE3W,GA3CF,4C,kCC7BQ4W,G,sGAAf,WACE/c,EACAS,GAFF,kGAIQuc,EAAM,IAAI,QAAShd,EAASgD,GAAY3C,eAJhD,SAKyB2c,EAAIC,mBAL7B,cAKQC,EALR,OAMQC,EAAsC,GAN9C,SAOQ3O,QAAQC,IACZyO,EAAStsB,KAAI,SAAC+Z,GACZ,IAAMyS,EAAgB,IAAI,QAAczS,EAAOlK,GAC/C,OAAO2c,EAAcjR,UAClBrH,KAAK9E,GACLrS,OACA0U,MAAK,SAACzS,GAAD,OAAYutB,EAASxS,EAAM1K,eAAiBrQ,SAb1D,gCAgBSutB,GAhBT,2C,yBAmBe,oCAAgB,CAC7BhuB,KAAM,gBACNiW,MAF6B,WAK3B,IAAMiY,EAAkC,gBAAa,yCAAC,wHACnBvd,GAAUkD,GAAYK,aADH,cAC9Cia,EAD8C,YAE3BC,IAF2B,SAG3CpB,KAH2C,0BAG5BvrB,KAAI,SAAC+Z,GAAD,MAAW,CAACA,EAAM3K,QAAQC,cAAe0K,MAD/D6S,EAF8C,eAK9CC,EAA2BH,EAAmBre,OAEjDsa,QAAO,SAACmE,GAAD,OAAYA,EAAMC,kBACzB/sB,KAAI,SAAC8sB,GAAD,kBAAY,CACf3sB,GAAI2sB,EAAM3sB,GAAGkP,cACb9Q,KAAMuuB,EAAMvuB,KACZkf,OAAQqP,EAAMrP,OACdze,MAAOwoB,WAAU,oBAACsF,EAAME,aAAP,aAAC,EAAaA,aAAd,QAAuB,MACxC7S,YAAa,QAAY1C,KAAK,KAC9BG,SAAUkV,EAAMlV,SAChBnB,QAAO,oBACLmW,EAAahuB,IAAIkuB,EAAM3sB,GAAGkP,sBADrB,aACL,EAA0C0c,eADrC,6DAEyCe,EAAMrP,OAAOpO,mBAjBb,kBAmB7Cwd,GAnB6C,6CAsBhDtX,EAA2B,iBAAI,IAC/BC,EAA4C,iBAAI,IAChDyX,EAAoD,iBAAI,IAExDte,EAAQ,uBAAS,kBAAM4F,GAAcI,cACrCuY,EAAa,SAACxa,GAAD,OAAgB6B,GAAc2Y,WAAWxa,IAE5D,yBAAW,yCAAC,iHACJA,EAAO6B,GAAchC,SAASF,aAC9ByZ,EAAYW,EAAcztB,OAC5B8sB,EAHM,qBAIJpZ,EAJI,iCAKiByZ,GAAYzZ,EAAKvS,GAAIiS,GAAY3C,eALlD,OAKA0d,EALA,OAMAC,EANA,oBAMWtB,EAAUhS,MAAK,SAACC,GAAD,MAA2B,OAAhBA,EAAM0D,iBAN3C,aAMW,EAAkDze,aAN7D,QAMsE,EAC5EuW,EAAOvW,MAAQ8sB,EACZ9rB,KAAI,SAAC+Z,GACJ,IAAI/a,EAAQ+a,EAAM/a,MAAQouB,EACtBpuB,EAAQ,IAEVA,EAAQ,GAEV,IAAIof,EAAQrE,EAAMI,YACZkT,EAAiBF,EAASpT,EAAM5Z,IAItC,OAHIktB,IACFjP,EAAQ,QAAYkP,UAAUD,EAAgBtT,EAAMnC,WAEtD,mCACKmC,GADL,IAEEI,YAAaiE,EACbpf,MAAOA,OAGVimB,MACC,SAACC,EAAGC,GAAJ,OACEA,EAAEnmB,MAAQmmB,EAAEhL,YAAY3D,gBAAkB0O,EAAElmB,MAAQkmB,EAAE/K,YAAY3D,mBAExEhB,EAAaxW,MAAQ+b,GAAkBxF,EAAOvW,OAC9CiuB,EAAqBjuB,MAAQpC,OAAO+oB,OAAO,GAAInQ,EAAaxW,OA9BtD,wBAgCNuW,EAAOvW,MAAQ8sB,EAhCT,6CAqCZ,IAAM1W,EAAe,kBAAI,GACnBD,EAAmB,iBAAI,IAC7B,0BAAY,WACV,IAAM3X,EAASqtB,GAAuBrV,EAAaxW,MAAOiuB,EAAqBjuB,OAC/EoW,EAAapW,MAAQxB,EAAO4tB,WAC5BjW,EAAiBnW,MAAQxB,EAAO0S,WAGlC,IAAMwF,EAAc,kBAAI,GAClBC,EAAiC,iBAAI,IAErCN,EAAO,WACXM,EAAU3W,MAAQ8b,GAAoByS,WAAWhY,EAAOvW,MAAOwW,EAAaxW,OAC5E0W,EAAY1W,OAAQ,GAEtB,MAAO,CACLuW,SACAC,eACA7G,QACA6B,MAAO4B,GAAYG,SACnB2a,aACAM,YAAajZ,GAAchC,SAC3B4C,mBACAE,OACAK,cACAC,YACAP,iBAGJ+U,WAAY,CAAEsD,eAAaC,sB,UCjI7B,GAAO1Y,OAAS,GAChB,GAAOC,UAAY,kBAEJ,U,GCPb,yBAEM,YADJ,yBAAuC,UAAnC,oC,MAIJ,yBAAsC,SAAnC,mCAA+B,G,GAEhC,yBAMK,WALH,yBAAa,UAAT,QACJ,yBAAc,UAAV,SACJ,yBAAgB,UAAZ,WACJ,yBAAkC,UAA9B,6BACJ,yBAAyB,UAArB,sB,OAGAY,MAAM,O,GAEV,yBAAgB,UAAZ,WAAO,G,GACX,yBAAiB,UAAb,YAAQ,G,GACZ,yBAAU,UAAN,KAAC,G,sGAnBX,GAIA,yBAkBM,YAjBJ,GACA,yBAeQ,cAdN,I,2BAOA,yBAMK,2CANc,EAAAN,QAAM,SAAdoY,G,gCAAX,yBAMK,MANuBruB,IAAKquB,EAAKxtB,I,CACpC,yBAAoC,KAApC,GAAoC,6BAAjBwtB,EAAKpvB,MAAI,GAC5B,yBAA+B,uCAAxBovB,EAAKxT,aAAW,GACvB,GACA,GACA,Q,UAKN,yBAEM,YADJ,yBAAqC,SAAlC,cAAW,6BAAG,EAAA8G,UAAW,QAAK,M,oHCzBnC,yBAAW,UCEE,gCAAgB,CAC7B1iB,KAAM,kBACN8lB,MAAO,CACLuJ,IAAKC,U,UCDT,GAAO7Y,OAAS,GAChB,GAAOC,UAAY,kBAEJ,U,wBCNR,SAAe6Y,GAAtB,mC,iEAAO,WAA2BC,GAA3B,oHAEoB,GAAA7I,EAAMtmB,IAAI,kDAF9B,cAEGgtB,EAFH,OAGGzvB,EAAOyvB,EAASzvB,KAAK6xB,cACrBhB,EAAQpwB,OAAO4D,KAAKrE,GAAM2d,MAAK,SAACkT,GAAD,OAAWxF,WAAWrrB,EAAK6wB,KAAWe,KAJxE,mBAKKf,GAASpB,EAASzvB,KAAK8xB,MAAQ,IALpC,yCAOG,IAAI3tB,MAAJ,iDAPH,yD,kCCWQ,G,sGAAf,WACE8O,EACAS,GAFF,kGAIQuc,EAAM,IAAI,QAAShd,EAASgD,GAAY3C,eAJhD,SAKyB2c,EAAIC,mBAL7B,cAKQC,EALR,OAMQC,EAAsC,GAN9C,SAOQ3O,QAAQC,IACZyO,EAAStsB,KAAI,SAAC+Z,GACZ,IAAMyS,EAAgB,IAAI,QAAczS,EAAOlK,GAC/C,OAAO2c,EAAcjR,UAClBrH,KAAK9E,GACLrS,OACA0U,MAAK,SAACzS,GAAD,OAAYutB,EAASxS,EAAM1K,eAAiBrQ,SAb1D,gCAgBSutB,GAhBT,2C,yBAmBe,oCAAgB,CAC7BhuB,KAAM,kBAENiW,MAH6B,WAI3B,IAAMiY,EAAkC,gBAAa,yCAAC,sHACnBvd,GAAUkD,GAAYK,aADH,cAC9Cia,EAD8C,OAE9CwB,EAAyBxB,EAAmBre,OAE/Csa,QAAO,SAACmE,GAAD,OAAWA,EAAMC,gBAAkBD,EAAMvuB,KAAK4R,SAAS,eAC9DnQ,KAAI,SAAC8sB,GAAD,cAAY,CACf3sB,GAAI2sB,EAAM3sB,GAAGkP,cACb9Q,KAAMuuB,EAAMvuB,KACZkf,OAAQqP,EAAMrP,OACdze,MAAK,oBAAE8tB,EAAME,aAAR,aAAE,EAAaA,aAAf,SAAyB,EAC9B7S,YAAa,QAAY1C,KAAK,KAC9BG,SAAUkV,EAAMlV,aAXgC,kBAa7CsW,GAb6C,4CAgBhD3Y,EAA2B,iBAAI,IAC/BC,EAA4C,iBAAI,IAChDyX,EAAoD,iBAAI,IAExDte,EAAQ,uBAAS,kBAAM4F,GAAcI,cACrCuY,EAAa,SAACxa,GAAD,OAAgB6B,GAAc2Y,WAAWxa,IAE5D,yBAAW,yCAAC,2GACJA,EAAO6B,GAAchC,SAASF,aAC9ByZ,EAAYW,EAAcztB,OAE5B8sB,EAJM,qBAKJpZ,EALI,iCAMiB,GAAYA,EAAKvS,GAAIiS,GAAY3C,eANlD,OAMA0d,EANA,OAQN5X,EAAOvW,MAAQ8sB,EAAU9rB,KAAI,SAAC+Z,GAC5B,IAAI/a,EAAQ+a,EAAM/a,MACdA,EAAQ,IAEVA,EAAQ,GAEV,IAAIof,EAAQrE,EAAMI,YACZkT,EAAiBF,EAASpT,EAAM5Z,IAItC,OAHIktB,IACFjP,EAAQ,QAAYkP,UAAUD,EAAgBtT,EAAMnC,WAEtD,mCACKmC,GADL,IAEEI,YAAaiE,EACbpf,MAAOA,OAGXwW,EAAaxW,MAAQ+b,GAAkBxF,EAAOvW,OAC9CiuB,EAAqBjuB,MAAQpC,OAAO+oB,OAAO,GAAInQ,EAAaxW,OA1BtD,wBA4BNuW,EAAOvW,MAAQ8sB,EA5BT,6CAqCZ,IAAM7K,EAAW,iBAAc,kBAAM6M,GAAY,OAE3C3Y,EAAmB,uBAAS,WAChC,IAAIyY,EAAM,GAOV,OANAhxB,OAAOshB,QAAQ1I,EAAaxW,OAAOkb,SAAQ,SAACgR,GAAS,MAC7CC,EAAQ,UAAG8B,EAAqBjuB,MAAMksB,EAAM,WAApC,QAA2C,EACrDA,EAAM,IAAMC,IACdyC,GAAO,GAAJ,OAAO1C,EAAM,GAAb,oBAA2BA,EAAM,GAAKC,EAAtC,UAGAyC,KAGT,MAAO,CACLrY,SACAC,eACA7G,QACA6B,MAAO4B,GAAYG,SACnB2a,aACAM,YAAajZ,GAAchC,SAC3B4C,mBACA8L,aAIJkJ,WAAY,CAAEgE,gBAAAC,MCtHhB,GAAOpZ,OAAS,GAED,UCEA,gCAAgB,CAC7BqP,MAAO,CACLlV,QAAS0e,QAEXrZ,MAJ6B,SAIvB6P,GAAK,MAaT,OAZA,0BAAY,WACV,IAAMhS,EAAegS,EAAMlV,QACrBkf,EAAiB9Z,GAAchC,SAAS5D,MAC9C,GAAI0D,EAAc,CAChB,IAAMK,EAAO2b,EAAevU,MAC1B,SAACpH,GAAD,OAAUA,EAAKvS,GAAGkP,eAAiBgD,EAAahD,iBAE9CqD,GACF6B,GAAc2Y,WAAWxa,OAIxB,CACLA,KAAM,uBAAS,kBAAM6B,GAAchC,SAASF,gBAC5C6C,YAAW,UAAE,kBAAWoZ,MAAMC,eAAnB,WAGfpE,WAAY,CAAEqE,iBAAeL,sBC1B/B,GAAOnZ,OAAS,GAED,U,mGCJRtU,MAAM,Q,GACT,yBAGM,OAHDA,MAAM,0CAAwC,CACjD,yBAAqE,MAAjEA,MAAM,aAAW,CAAC,yBAA+B,OAA1BC,IAAA,M,6BAA0B,iBACrD,yBAA8E,MAA1ED,MAAM,MAAK,gE,mCAId,qB,GAEH,yBAEM,OAFDA,MAAM,eAAa,S,8IAT1B,yBAYM,MAZN,GAYM,CAXJ,GAIA,yBAAyC,OAApC,UAAQ,EAAA+tB,QAAS/tB,MAAM,Q,sBAC5B,yBAEC,GAFagN,GAAI,uBAA2BhN,MAAM,wB,aAChD,iBAAiB,C,aAEpB,Q,wBCVW,orBCKA,gCAAgB,CAC7BnC,KAAM,OACNiW,MAF6B,WAG3B,MAAO,CACLia,QAAS,KAAO,Q,UCJtB,GAAOzZ,OAAS,GAChB,GAAOC,UAAY,kBAEJ,U,mGCPb,IAAF,G,IAAE,IAAF,EACwBvU,MAAM,uB,GAD9B,6BACoD,qF,GAE9C,yBAIC,KAHCguB,KAAK,6GACLC,OAAO,QACN,YAAQ,G,IANf,IAAF,EAWMjuB,MAAM,YACNguB,KAAK,6GACLC,OAAO,Q,IAIJjuB,MAAM,O,IAOJA,MAAM,O,oNAxBN,QAAM,W,yBAAjB,yBA6BQ,MA7BR,IACe,EAAAkuB,S,yBAAX,yBAOM,MAPN,GAOM,CARV,GAGM,O,yBAMF,yBAMC,IAND,GAKG,aAEH,yBAA4B,uCAArB,EAAApe,MAAMpB,SAAO,GACpB,yBAUM,MAVN,GAUM,CATJ,yBAKM,YAvBZ,0DAmBW,EAAA+F,kBAAmB,IACtB,GAAiE,EAAAC,c,yBAAjE,yBAES,UAtBjB,MAoBgB1U,MAAM,4BAA6B,QAAK,8BAAE,EAAAyW,SAAA,EAAAA,QAAA,sBAA6B,cApBvF,yCAwBM,yBAEM,MAFN,GAEM,CADJ,yBAAiF,GAAnE7B,UAAW,EAAAA,UAzBjC,WAyBqD,EAAAE,aAzBrD,qDAyBqD,EAAAA,aAAY,IAAGyR,aAAa,G,uCAG7E,yBAA+E,GAAtDxR,QAAS,EAAAoZ,mBA5BtC,kDA4BsC,EAAAA,mBAAkB,IAAGlZ,UAAW,EAAAA,W,6DAEpE,yBAAmB,GA9BrB,Y,UCCoCjV,MAAM,e,UACHA,MAAM,yC,GAEvC,yBAA8E,KAA3EA,MAAM,aAAY,yDAAqD,G,GAC1E,yBAEC,KAFEA,MAAM,oBAAoBiuB,OAAO,SAASD,KAAK,qCAC/C,gBAAY,G,UAImBhuB,MAAM,4B,oEAV5C,yBAeM,YAdO,EAAA6R,OAAOlC,c,yBAAlB,yBAAuE,MAAvE,GAAoD,kBACnC,EAAAkC,OAAOpB,W,yBAYxB,yBAAuD,UAA1C,iBAAc,6BAAG,EAAAoB,OAAOpD,SAAO,K,yBAZ5C,yBAWM,MAXN,GAWM,CAVJ,yBAAqD,OAA/CxO,IAAK,EAAAmuB,WAAU,cAAkBpuB,MAAM,O,gBAC7C,GACA,GAIA,yBAAwF,UAAhF6jB,KAAK,SAAS7jB,MAAM,uBAAwB,QAAK,8BAAE,EAAAquB,SAAA,EAAAA,QAAA,sBAAS,eAC3D,EAAAxc,OAAOf,kB,yBAAhB,yBAEI,IAFJ,GAEI,6BADC,EAAAe,OAAOf,kBAAgB,I,4CCRnB,oCAAgB,CAC7BgD,MAD6B,WAE3B,IAAMjC,EAASH,GAAYG,SACrBwc,EAAU,WACd3c,GAAYtB,QAEd,MAAO,CACLyB,SACAwc,UACAD,WAAY,mBCVlB,GAAO9Z,OAAS,GAED,U,oBCMT,SAAUga,GAAaC,GAE3B,IAFiD,EAE3CC,EAA8C,GAFH,kBAG7BD,GAH6B,IAGjD,2BAA+B,KAApBlV,EAAoB,QACvB,EAAamV,EAAenV,EAAM0D,QACnC,EAGH,EAAWxgB,KAAK8c,GAFhBmV,EAAenV,EAAM0D,QAAU,CAAC1D,IANa,8BAWjDjK,QAAQE,IAAIif,EAAWC,GAIvB,IADA,IAAM1xB,EAAwB,GAC9B,MAAmCZ,OAAOshB,QAAQgR,GAAlD,eAAmE,CAA9D,8BAAOzR,EAAP,KAAe0R,EAAf,KACH,GAA0B,IAAtBA,EAAWxyB,OAAf,CAKA,IAAMyyB,EAAiBD,EAAWE,WAAU,SAACtV,GAAD,QAAa,0BAA2BA,MACpF,IAAwB,IAApBqV,EACF,MAAM,IAAI9uB,MAAJ,UAAamd,EAAb,oCAA+C0R,IAEvD,IAViE,EAU3DG,EAA2BH,EAAWtxB,OAAOuxB,EAAgB,GAAG,GAChEG,EAAQ,mCACTD,GADS,IAEZ9Q,sBAAuB,QAAY/G,KAAK,GACxCgH,YAAa,GAAF,OAAK6Q,EAAcnV,YAAnB,YAAkCsD,GAC7CiB,WAAW,IAfoD,kBAkBtCyQ,GAlBsC,IAkBjE,2BAAuC,KAA5BK,EAA4B,QACrC,KAAM,0BAA2BA,GAC/B,MAAM,IAAIlvB,MAAJ,UAAamd,EAAb,2CAER,IAAMgS,EAAcD,EACpBD,EAASpV,YAAcoV,EAASpV,YAAYuV,UAAUD,EAAYjR,uBAClE+Q,EAAS/Q,sBAAwB+Q,EAAS/Q,sBAAsBkR,UAC9DD,EAAYjR,uBAEd+Q,EAAS9Q,aAAe,KAAOgR,EAAYhR,YAC3C8Q,EAAS7Q,WAAY,GA5B0C,8BA8BjElhB,EAAOP,KAAKsyB,QA5BVzf,QAAQE,IAAI,mBAAqByN,GA8BrC,OAAOjgB,EAQH,SAAUmyB,GACd7D,EACA8D,EACAC,GAEA,IAAMryB,EAAS,gBAAIoyB,GACbE,EAAiB,IAAInD,IACrBoD,EAAc,IAAIpD,IACxBb,EAAU5R,SAAQ,SAACH,GACjBgW,EAAYC,IAAIjW,EAAM5Z,GAAtB,mBAA+B4Z,IAC/B+V,EAAeE,IAAIjW,EAAM5Z,GAAI4Z,MAG/B,IAV6B,EAUvBkW,EAAgB,IAAItD,IAVG,kBAYTiD,GAZS,IAY7B,2BAA+B,KAApBxZ,EAAoB,QACvB4J,EAAa5J,EAAMC,WACtBiC,UAAUd,GAASpB,EAAME,UAAUtX,QACnCsgB,UAAU9H,GAASpB,EAAMO,QAAQ3X,QAC9ByY,EAAOsY,EAAYnxB,IAAIwX,EAAME,UAAUnW,IACvCuN,EAAKqiB,EAAYnxB,IAAIwX,EAAMO,QAAQxW,IACzC,IAAKsX,IAAS/J,EACZ,MAAM,IAAIpN,MAAJ,2BAA8B8V,EAA9B,MAIR,GAFAqB,EAAK0C,YAAc1C,EAAK0C,YAAY+V,UAAU9Z,EAAMC,YACpD3I,EAAGyM,YAAczM,EAAGyM,YAAYuV,UAAU1P,GACtC,0BAA2BvI,EAAM,CACnC,IAAMgY,EAAchY,EACd0Y,EAAaV,EAAYtV,YAAY+V,UAAUT,EAAYjR,uBAEjE,GADA1O,QAAQE,IAAIoG,EAAME,UAAW6Z,EAAWxY,YACpCwY,EAAWC,aAAc,CAC3B,IAAMC,EAAoBJ,EAAcrxB,IAAI6wB,EAAYtvB,IACnDkwB,EAGHJ,EAAcD,IACZP,EAAYtvB,GACZkwB,EAAkBX,UAAUS,EAAW7X,UAAUd,IAAU,MAJ7DyY,EAAcD,IAAIP,EAAYtvB,GAAIgwB,EAAW7X,UAAUd,IAAU,QA9B5C,8BA4E7B,OApCA1H,QAAQE,IAAIigB,GAEZA,EAAc/V,SAAQ,SAACmF,EAAclf,GACnC,IAAM4Z,EAAQ+V,EAAelxB,IAAIuB,GACjC,IAAK4Z,EACH,MAAM,IAAIzZ,MAAM,yBAEduvB,EAAiBtG,IAAIxP,EAAM0D,SAC7BjgB,EAAO8yB,QAAQ,CACbha,UAAWyD,EACXpD,QAASoD,EACT1D,WAAYgJ,EACZ3E,UAAWxB,GAAUuM,YAK3BsK,EAAY7V,SAAQ,SAAC6V,EAAa5vB,GAChC,GAAI,0BAA2B4vB,GAAeF,EAAiBtG,IAAIwG,EAAYtS,QAAS,CACtF,IAAMgS,EAAcM,EACdI,EAAaV,EAAYtV,YAAY+V,UAAUT,EAAYjR,uBAC3D+R,EAAgBT,EAAelxB,IAAIuB,GACzC,IAAKowB,EACH,MAAM,IAAIjwB,MAAM,yBAGd6vB,EAAW3Z,gBAAkBuZ,EAAY/wB,MAAQ,IACnDxB,EAAOP,KAAK,CACVqZ,UAAWia,EACX5Z,QAAS4Z,EACTla,WAAY8Z,EACZzV,UAAWxB,GAAUqM,cAKtB/nB,ECjIM,oCAAgB,CAC7BgX,MAD6B,WAE3B,IAAMsX,EAAY,iBAAc,kBAAMP,OAAe,IAC/CjW,EAA8B,iBAAI,IAClCE,EAA4C,iBAAI,IAChDyX,EAAoD,iBAAI,IACxDuD,EAAgB,iBAAc,kBAAMhR,GAAYiR,kBAItD,yBAAW,yCAAC,mIACJthB,EAAUiD,GAAYG,SAASnD,QAC/BmG,EAASuW,EAAU9sB,MACnB0xB,EAAaF,EAAcxxB,MAE3B2xB,EAAWpb,EAAOvV,KAAI,SAAC+Z,GAC3B,OAAI5K,EACKiM,GAAgBrB,EAAM3K,QAASD,GAE/ByO,QAAQnd,QAAQ,QAAUgX,KAAK,SAGpCmZ,EAAa,6CACbC,EAAgB/M,GAAevO,EAAOvV,KAAI,SAAC+Z,GAAD,OAAWA,EAAM3K,YAbvD,SAcgByhB,EAdhB,cAcJC,EAdI,OAeJC,EAAa,uBAAOD,EAAYF,UAAnB,aAAO,EAAyBI,kBAAhC,QAA8C,GAE7D/S,GAAS,EAjBH,UAkBcL,QAAQC,IAC9BtI,EAAOvV,IAAP,0DAAW,WAAOixB,GAAP,kGACThT,IACIjf,EACFwoB,WAAU,oBAACsJ,EAAYG,EAAU7hB,gBAAvB,aAAC,EAAgC4hB,kBAAjC,QAA+C,UAAYD,EAC1D,GAAT/xB,IACFA,EAAQ,KAAS+xB,GALV,KAQHE,EAAU7hB,QARP,KASD6hB,EAAU1yB,KATT,KAUC0yB,EAAUxT,OAVX,KAWGwT,EAAUrZ,SAXb,KAYM,QAZN,UAYkC+Y,EAAS1S,GAZ3C,gCAYmDgT,EAAUrZ,SAZ7D,UAYkB0V,UAZlB,0BAaAtuB,EAbA,KAcEiyB,EAAUlF,QAdZ,mBAQP5rB,GARO,KASP5B,KATO,KAUPkf,OAVO,KAWP7F,SAXO,KAYPuC,YAZO,KAaPnb,MAbO,KAcPyX,QAdO,mDAAX,wDAnBQ,QAkBNya,EAlBM,OAqCNA,EAAYv0B,OAAS,GAAK+zB,KAC5B,EAAAQ,GAAYj0B,KAAZ,wBAAoByzB,IACpBQ,EAAclC,GAAakC,IAE7B5b,EAAUtW,MAAQkyB,EAAYjM,MAC5B,SAACC,EAAGC,GAAJ,OAAUA,EAAEnmB,MAAQmmB,EAAEhL,YAAY3D,gBAAkB0O,EAAElmB,MAAQkmB,EAAE/K,YAAY3D,mBAE9EhB,EAAaxW,MAAQ+b,GAAkBzF,EAAUtW,OACjDiuB,EAAqBjuB,MAAQpC,OAAO+oB,OAAO,GAAInQ,EAAaxW,OA7ClD,6CA+CZ,IAAM4vB,EAAU,uBAAS,WACvB,IAAI5vB,EAAQ,EAEZ,OADAsW,EAAUtW,MAAMkb,SAAQ,SAACH,GAAD,OAAY/a,GAAS+a,EAAMI,YAAY3D,mBACxDxX,EAAQ,QAGXoW,EAAe,kBAAI,GACnBD,EAAmB,iBAAI,IAC7B,0BAAY,WACV,IAAM3X,EAASqtB,GAAuBrV,EAAaxW,MAAOiuB,EAAqBjuB,OAC/EoW,EAAapW,MAAQxB,EAAO4tB,WAC5BjW,EAAiBnW,MAAQxB,EAAO0S,WAElC,IAAM2e,EAAqB,kBAAI,GACzBlZ,EAAiC,iBAAI,IACrCwB,EAAU,WACdrH,QAAQE,IAAIsF,EAAUtW,OACtB8Q,QAAQE,IAAI,0BAA2BsF,EAAUtW,MAAM,IACvD,IAAMqW,EAAOyF,GAAoByS,WAAWjY,EAAUtW,MAAOwW,EAAaxW,OACpEmyB,EAAkBxB,GAAara,EAAUtW,MAAOqW,EAAMmK,GAAY4R,oBACxEzb,EAAU3W,MAAQmyB,EAClBtC,EAAmB7vB,OAAQ,GAGvBwR,EAAQ4B,GAAYG,SAC1B,MAAO,CACL/B,QACA8E,YACAE,eACAJ,eACAD,mBACAgC,UACA0X,qBACAlZ,YACAiZ,YAGJzE,WAAY,CAAEsD,eAAaC,mBAAiB2D,aAC5CjY,QAAS,K,UC1GX,GAAOpE,OAAS,GAChB,GAAOC,UAAY,kBAEJ,UCHTqc,GAAgC,CACpC,CACE9d,KAAM,IACNjV,KAAM,OACNgzB,UAAWC,IAEb,CACEhe,KAAM,mBACNjV,KAAM,gBACNgzB,UAAWE,GACXpN,OAAO,GAET,CACE7Q,KAAM,UACNjV,KAAM,gBACNgzB,UAAWG,KAITC,GAAS,gBAAa,CAG1BC,QAAS,kBACTN,YAGa,MCpBflf,GAAYtB,OACZ,IAAM+gB,GAAM,uBAAUC,IACtBD,GAAIE,IAAI,QAAUA,IAAI,IACtBF,GAAIN,UAAU,SAAU,QACxBM,GAAIN,UAAU,YAAa,QAC3BM,GAAIN,UAAU,SAAU,QACxBM,GAAIN,UAAU,UAAW,QAEzBM,GAAIG,MAAM,S,qBCnBV9zB,EAAOD,QAAU,IAA0B,yB,27jBCA3CC,EAAOD,QAAU,IAA0B,6B","file":"js/app.dc28166f.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/tokenblend/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./OrderPlanDialog.vue?vue&type=style&index=0&id=2b550cc3&lang=scss\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./EnzymeSliders.vue?vue&type=style&index=0&id=bf9846ee&lang=scss&scoped=true\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=637b801c&lang=scss&scoped=true\"","module.exports = __webpack_public_path__ + \"img/tokenblend.e42bb92a.png\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Home.vue?vue&type=style&index=0&id=6d3d355a&lang=scss&scoped=true\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./WalletAccount.vue?vue&type=style&index=0&id=5251df3b&lang=scss&scoped=true\"","module.exports = __webpack_public_path__ + \"img/idle.7830dd0c.png\";","var map = {\n\t\"./idle.png\": \"8b09\",\n\t\"./logo.png\": \"cf05\",\n\t\"./paraswap.png\": \"faf7\",\n\t\"./tokenblend.png\": \"6c75\",\n\t\"./uniswap.png\": \"cd3c\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"9e01\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SliderPanel.vue?vue&type=style&index=0&id=08653f40&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Farming.vue?vue&type=style&index=0&id=403560f2&scoped=true&lang=scss\"","module.exports = __webpack_public_path__ + \"img/uniswap.f6e23e94.png\";","<template>\n  <div>\n    <div class=\"menubar\">\n      <div class=\"container\">\n        <Menubar :model=\"items\">\n          <template #start>\n            <router-link to=\"/\" class=\"logo\"\n              ><img src=\"@/assets/logo.png\" class=\"img-fluid\" /> TokenBlend</router-link\n            >\n          </template>\n        </Menubar>\n      </div>\n    </div>\n    <div class=\"container\">\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, Ref, ref, watchEffect } from 'vue';\nimport { enzymeService } from './web3/enzymeService';\nimport { web3Service } from './web3/web3Service';\n\nexport default defineComponent({\n  setup() {\n    const state = web3Service.status();\n    // Weird, the menu only seems to work when items is a ref (not when it's a computed function)\n    const items: Ref<any[]> = ref([]);\n    watchEffect(() => {\n      let walletLabel = 'Wallet...';\n      const address = state.address;\n      if (address) {\n        walletLabel = `Wallet 0x${address.substr(0, 6)}...${address.substr(address.length - 6)}`;\n      }\n      const funds = enzymeService.getFunds();\n      let enzymeItems = [];\n      if (funds.length == 0) {\n        enzymeItems.push({ label: 'No enzyme funds' });\n      } else {\n        enzymeItems = funds.map((fund) => ({\n          label: fund.name,\n          icon: 'pi pi-money-bill',\n          to: { name: 'EnzymeAccount', params: { account: fund.id } },\n        }));\n      }\n\n      items.value = [\n        {\n          label: walletLabel,\n          icon: 'pi pi-wallet',\n          to: { name: 'WalletAccount' },\n        },\n        {\n          label: 'Enzyme vaults',\n          icon: 'pi pi-money-bill',\n          items: enzymeItems,\n        },\n      ];\n    });\n    return { state, items };\n  },\n});\n</script>\n<style lang=\"scss\" scoped>\n.logo img {\n  width: 2rem;\n  height: 2rem;\n}\n</style>\n","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: any;\n  BigInt: any;\n  Bytes: any;\n};\n\n\n\n\nexport type AccessorSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AccessorSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  prevAccessor?: Maybe<Scalars['String']>;\n  nextAccessor: Scalars['String'];\n  transaction: Transaction;\n  timestamp: Scalars['BigInt'];\n};\n\nexport type AccessorSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  prevAccessor?: Maybe<Scalars['String']>;\n  prevAccessor_not?: Maybe<Scalars['String']>;\n  prevAccessor_gt?: Maybe<Scalars['String']>;\n  prevAccessor_lt?: Maybe<Scalars['String']>;\n  prevAccessor_gte?: Maybe<Scalars['String']>;\n  prevAccessor_lte?: Maybe<Scalars['String']>;\n  prevAccessor_in?: Maybe<Array<Scalars['String']>>;\n  prevAccessor_not_in?: Maybe<Array<Scalars['String']>>;\n  prevAccessor_contains?: Maybe<Scalars['String']>;\n  prevAccessor_not_contains?: Maybe<Scalars['String']>;\n  prevAccessor_starts_with?: Maybe<Scalars['String']>;\n  prevAccessor_not_starts_with?: Maybe<Scalars['String']>;\n  prevAccessor_ends_with?: Maybe<Scalars['String']>;\n  prevAccessor_not_ends_with?: Maybe<Scalars['String']>;\n  nextAccessor?: Maybe<Scalars['String']>;\n  nextAccessor_not?: Maybe<Scalars['String']>;\n  nextAccessor_gt?: Maybe<Scalars['String']>;\n  nextAccessor_lt?: Maybe<Scalars['String']>;\n  nextAccessor_gte?: Maybe<Scalars['String']>;\n  nextAccessor_lte?: Maybe<Scalars['String']>;\n  nextAccessor_in?: Maybe<Array<Scalars['String']>>;\n  nextAccessor_not_in?: Maybe<Array<Scalars['String']>>;\n  nextAccessor_contains?: Maybe<Scalars['String']>;\n  nextAccessor_not_contains?: Maybe<Scalars['String']>;\n  nextAccessor_starts_with?: Maybe<Scalars['String']>;\n  nextAccessor_not_starts_with?: Maybe<Scalars['String']>;\n  nextAccessor_ends_with?: Maybe<Scalars['String']>;\n  nextAccessor_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum AccessorSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  PrevAccessor = 'prevAccessor',\n  NextAccessor = 'nextAccessor',\n  Transaction = 'transaction',\n  Timestamp = 'timestamp'\n}\n\nexport type Account = {\n  __typename?: 'Account';\n  id: Scalars['ID'];\n  firstSeen: Scalars['BigInt'];\n  manager: Scalars['Boolean'];\n  managerSince?: Maybe<Scalars['BigInt']>;\n  managements: Array<Fund>;\n  investor: Scalars['Boolean'];\n  investorSince?: Maybe<Scalars['BigInt']>;\n  investments: Array<Investment>;\n  authUser: Scalars['Boolean'];\n  authorizedForComptroller: Array<ComptrollerProxy>;\n  sharesRequests: Array<SharesRequest>;\n  sharesChanges: Array<SharesChangeInterface>;\n  feeSharesChanges: Array<FeeSharesChangeInterface>;\n  investmentSharesChanges: Array<InvestmentSharesChangeInterface>;\n  whitelisted: Array<InvestorWhitelistSetting>;\n};\n\n\nexport type AccountManagementsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fund_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fund_Filter>;\n};\n\n\nexport type AccountInvestmentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Investment_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Investment_Filter>;\n};\n\n\nexport type AccountAuthorizedForComptrollerArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerProxy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerProxy_Filter>;\n};\n\n\nexport type AccountSharesRequestsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequest_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequest_Filter>;\n};\n\n\nexport type AccountSharesChangesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesChangeInterface_Filter>;\n};\n\n\nexport type AccountFeeSharesChangesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSharesChangeInterface_Filter>;\n};\n\n\nexport type AccountInvestmentSharesChangesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestmentSharesChangeInterface_Filter>;\n};\n\n\nexport type AccountWhitelistedArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestorWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestorWhitelistSetting_Filter>;\n};\n\nexport type Account_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  firstSeen?: Maybe<Scalars['BigInt']>;\n  firstSeen_not?: Maybe<Scalars['BigInt']>;\n  firstSeen_gt?: Maybe<Scalars['BigInt']>;\n  firstSeen_lt?: Maybe<Scalars['BigInt']>;\n  firstSeen_gte?: Maybe<Scalars['BigInt']>;\n  firstSeen_lte?: Maybe<Scalars['BigInt']>;\n  firstSeen_in?: Maybe<Array<Scalars['BigInt']>>;\n  firstSeen_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  manager?: Maybe<Scalars['Boolean']>;\n  manager_not?: Maybe<Scalars['Boolean']>;\n  manager_in?: Maybe<Array<Scalars['Boolean']>>;\n  manager_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  managerSince?: Maybe<Scalars['BigInt']>;\n  managerSince_not?: Maybe<Scalars['BigInt']>;\n  managerSince_gt?: Maybe<Scalars['BigInt']>;\n  managerSince_lt?: Maybe<Scalars['BigInt']>;\n  managerSince_gte?: Maybe<Scalars['BigInt']>;\n  managerSince_lte?: Maybe<Scalars['BigInt']>;\n  managerSince_in?: Maybe<Array<Scalars['BigInt']>>;\n  managerSince_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  investor?: Maybe<Scalars['Boolean']>;\n  investor_not?: Maybe<Scalars['Boolean']>;\n  investor_in?: Maybe<Array<Scalars['Boolean']>>;\n  investor_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  investorSince?: Maybe<Scalars['BigInt']>;\n  investorSince_not?: Maybe<Scalars['BigInt']>;\n  investorSince_gt?: Maybe<Scalars['BigInt']>;\n  investorSince_lt?: Maybe<Scalars['BigInt']>;\n  investorSince_gte?: Maybe<Scalars['BigInt']>;\n  investorSince_lte?: Maybe<Scalars['BigInt']>;\n  investorSince_in?: Maybe<Array<Scalars['BigInt']>>;\n  investorSince_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  authUser?: Maybe<Scalars['Boolean']>;\n  authUser_not?: Maybe<Scalars['Boolean']>;\n  authUser_in?: Maybe<Array<Scalars['Boolean']>>;\n  authUser_not_in?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport enum Account_OrderBy {\n  Id = 'id',\n  FirstSeen = 'firstSeen',\n  Manager = 'manager',\n  ManagerSince = 'managerSince',\n  Managements = 'managements',\n  Investor = 'investor',\n  InvestorSince = 'investorSince',\n  Investments = 'investments',\n  AuthUser = 'authUser',\n  AuthorizedForComptroller = 'authorizedForComptroller',\n  SharesRequests = 'sharesRequests',\n  SharesChanges = 'sharesChanges',\n  FeeSharesChanges = 'feeSharesChanges',\n  InvestmentSharesChanges = 'investmentSharesChanges',\n  Whitelisted = 'whitelisted'\n}\n\nexport type AdapterBlacklistAddressesAddedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AdapterBlacklistAddressesAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<IntegrationAdapter>;\n};\n\n\nexport type AdapterBlacklistAddressesAddedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\nexport type AdapterBlacklistAddressesAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AdapterBlacklistAddressesAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AdapterBlacklistAddressesRemovedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AdapterBlacklistAddressesRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<IntegrationAdapter>;\n};\n\n\nexport type AdapterBlacklistAddressesRemovedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\nexport type AdapterBlacklistAddressesRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AdapterBlacklistAddressesRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AdapterBlacklistSetting = PolicySettingInterface & {\n  __typename?: 'AdapterBlacklistSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  listed: Array<Scalars['String']>;\n  adapters: Array<Maybe<IntegrationAdapter>>;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type AdapterBlacklistSettingAdaptersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\n\nexport type AdapterBlacklistSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type AdapterBlacklistSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  listed?: Maybe<Array<Scalars['String']>>;\n  listed_not?: Maybe<Array<Scalars['String']>>;\n  listed_contains?: Maybe<Array<Scalars['String']>>;\n  listed_not_contains?: Maybe<Array<Scalars['String']>>;\n  adapters?: Maybe<Array<Scalars['String']>>;\n  adapters_not?: Maybe<Array<Scalars['String']>>;\n  adapters_contains?: Maybe<Array<Scalars['String']>>;\n  adapters_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AdapterBlacklistSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Listed = 'listed',\n  Adapters = 'adapters',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type AdapterDeregisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'AdapterDeregisteredEvent';\n  id: Scalars['ID'];\n  identifier: Scalars['String'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  integrationAdapter: IntegrationAdapter;\n};\n\nexport type AdapterDeregisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  integrationAdapter?: Maybe<Scalars['String']>;\n  integrationAdapter_not?: Maybe<Scalars['String']>;\n  integrationAdapter_gt?: Maybe<Scalars['String']>;\n  integrationAdapter_lt?: Maybe<Scalars['String']>;\n  integrationAdapter_gte?: Maybe<Scalars['String']>;\n  integrationAdapter_lte?: Maybe<Scalars['String']>;\n  integrationAdapter_in?: Maybe<Array<Scalars['String']>>;\n  integrationAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  integrationAdapter_contains?: Maybe<Scalars['String']>;\n  integrationAdapter_not_contains?: Maybe<Scalars['String']>;\n  integrationAdapter_starts_with?: Maybe<Scalars['String']>;\n  integrationAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  integrationAdapter_ends_with?: Maybe<Scalars['String']>;\n  integrationAdapter_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AdapterDeregisteredEvent_OrderBy {\n  Id = 'id',\n  Identifier = 'identifier',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  IntegrationAdapter = 'integrationAdapter'\n}\n\nexport type AdapterRegisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'AdapterRegisteredEvent';\n  id: Scalars['ID'];\n  identifier: Scalars['String'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  integrationAdapter: IntegrationAdapter;\n};\n\nexport type AdapterRegisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  integrationAdapter?: Maybe<Scalars['String']>;\n  integrationAdapter_not?: Maybe<Scalars['String']>;\n  integrationAdapter_gt?: Maybe<Scalars['String']>;\n  integrationAdapter_lt?: Maybe<Scalars['String']>;\n  integrationAdapter_gte?: Maybe<Scalars['String']>;\n  integrationAdapter_lte?: Maybe<Scalars['String']>;\n  integrationAdapter_in?: Maybe<Array<Scalars['String']>>;\n  integrationAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  integrationAdapter_contains?: Maybe<Scalars['String']>;\n  integrationAdapter_not_contains?: Maybe<Scalars['String']>;\n  integrationAdapter_starts_with?: Maybe<Scalars['String']>;\n  integrationAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  integrationAdapter_ends_with?: Maybe<Scalars['String']>;\n  integrationAdapter_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AdapterRegisteredEvent_OrderBy {\n  Id = 'id',\n  Identifier = 'identifier',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  IntegrationAdapter = 'integrationAdapter'\n}\n\nexport type AdapterWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AdapterWhitelistAddressesAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<IntegrationAdapter>;\n};\n\n\nexport type AdapterWhitelistAddressesAddedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\nexport type AdapterWhitelistAddressesAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AdapterWhitelistAddressesAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AdapterWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AdapterWhitelistAddressesRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<IntegrationAdapter>;\n};\n\n\nexport type AdapterWhitelistAddressesRemovedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\nexport type AdapterWhitelistAddressesRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AdapterWhitelistAddressesRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AdapterWhitelistSetting = PolicySettingInterface & {\n  __typename?: 'AdapterWhitelistSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  listed: Array<Scalars['String']>;\n  adapters: Array<Maybe<IntegrationAdapter>>;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type AdapterWhitelistSettingAdaptersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\n\nexport type AdapterWhitelistSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type AdapterWhitelistSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  listed?: Maybe<Array<Scalars['String']>>;\n  listed_not?: Maybe<Array<Scalars['String']>>;\n  listed_contains?: Maybe<Array<Scalars['String']>>;\n  listed_not_contains?: Maybe<Array<Scalars['String']>>;\n  adapters?: Maybe<Array<Scalars['String']>>;\n  adapters_not?: Maybe<Array<Scalars['String']>>;\n  adapters_contains?: Maybe<Array<Scalars['String']>>;\n  adapters_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AdapterWhitelistSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Listed = 'listed',\n  Adapters = 'adapters',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type AddTrackedAssetsTrade = Trade & {\n  __typename?: 'AddTrackedAssetsTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type AddTrackedAssetsTradeIncomingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type AddTrackedAssetsTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AddTrackedAssetsTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmounts = 'incomingAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type AggregatorUpdatedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'AggregatorUpdatedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  primitive: Asset;\n  prevAggregator: Scalars['String'];\n  nextAggregator: Scalars['String'];\n};\n\nexport type AggregatorUpdatedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  primitive?: Maybe<Scalars['String']>;\n  primitive_not?: Maybe<Scalars['String']>;\n  primitive_gt?: Maybe<Scalars['String']>;\n  primitive_lt?: Maybe<Scalars['String']>;\n  primitive_gte?: Maybe<Scalars['String']>;\n  primitive_lte?: Maybe<Scalars['String']>;\n  primitive_in?: Maybe<Array<Scalars['String']>>;\n  primitive_not_in?: Maybe<Array<Scalars['String']>>;\n  primitive_contains?: Maybe<Scalars['String']>;\n  primitive_not_contains?: Maybe<Scalars['String']>;\n  primitive_starts_with?: Maybe<Scalars['String']>;\n  primitive_not_starts_with?: Maybe<Scalars['String']>;\n  primitive_ends_with?: Maybe<Scalars['String']>;\n  primitive_not_ends_with?: Maybe<Scalars['String']>;\n  prevAggregator?: Maybe<Scalars['String']>;\n  prevAggregator_not?: Maybe<Scalars['String']>;\n  prevAggregator_gt?: Maybe<Scalars['String']>;\n  prevAggregator_lt?: Maybe<Scalars['String']>;\n  prevAggregator_gte?: Maybe<Scalars['String']>;\n  prevAggregator_lte?: Maybe<Scalars['String']>;\n  prevAggregator_in?: Maybe<Array<Scalars['String']>>;\n  prevAggregator_not_in?: Maybe<Array<Scalars['String']>>;\n  prevAggregator_contains?: Maybe<Scalars['String']>;\n  prevAggregator_not_contains?: Maybe<Scalars['String']>;\n  prevAggregator_starts_with?: Maybe<Scalars['String']>;\n  prevAggregator_not_starts_with?: Maybe<Scalars['String']>;\n  prevAggregator_ends_with?: Maybe<Scalars['String']>;\n  prevAggregator_not_ends_with?: Maybe<Scalars['String']>;\n  nextAggregator?: Maybe<Scalars['String']>;\n  nextAggregator_not?: Maybe<Scalars['String']>;\n  nextAggregator_gt?: Maybe<Scalars['String']>;\n  nextAggregator_lt?: Maybe<Scalars['String']>;\n  nextAggregator_gte?: Maybe<Scalars['String']>;\n  nextAggregator_lte?: Maybe<Scalars['String']>;\n  nextAggregator_in?: Maybe<Array<Scalars['String']>>;\n  nextAggregator_not_in?: Maybe<Array<Scalars['String']>>;\n  nextAggregator_contains?: Maybe<Scalars['String']>;\n  nextAggregator_not_contains?: Maybe<Scalars['String']>;\n  nextAggregator_starts_with?: Maybe<Scalars['String']>;\n  nextAggregator_not_starts_with?: Maybe<Scalars['String']>;\n  nextAggregator_ends_with?: Maybe<Scalars['String']>;\n  nextAggregator_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AggregatorUpdatedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Primitive = 'primitive',\n  PrevAggregator = 'prevAggregator',\n  NextAggregator = 'nextAggregator'\n}\n\nexport type AllSharesOutstandingForcePaidForFundEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {\n  __typename?: 'AllSharesOutstandingForcePaidForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  type: ShareChangeType;\n  investor: Account;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  comptrollerProxy: Scalars['String'];\n  payee: Scalars['String'];\n  sharesDue: Scalars['BigDecimal'];\n  fundState: FundState;\n};\n\nexport type AllSharesOutstandingForcePaidForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  payee?: Maybe<Scalars['String']>;\n  payee_not?: Maybe<Scalars['String']>;\n  payee_gt?: Maybe<Scalars['String']>;\n  payee_lt?: Maybe<Scalars['String']>;\n  payee_gte?: Maybe<Scalars['String']>;\n  payee_lte?: Maybe<Scalars['String']>;\n  payee_in?: Maybe<Array<Scalars['String']>>;\n  payee_not_in?: Maybe<Array<Scalars['String']>>;\n  payee_contains?: Maybe<Scalars['String']>;\n  payee_not_contains?: Maybe<Scalars['String']>;\n  payee_starts_with?: Maybe<Scalars['String']>;\n  payee_not_starts_with?: Maybe<Scalars['String']>;\n  payee_ends_with?: Maybe<Scalars['String']>;\n  payee_not_ends_with?: Maybe<Scalars['String']>;\n  sharesDue?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_not?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AllSharesOutstandingForcePaidForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Type = 'type',\n  Investor = 'investor',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  ComptrollerProxy = 'comptrollerProxy',\n  Payee = 'payee',\n  SharesDue = 'sharesDue',\n  FundState = 'fundState'\n}\n\nexport type ApprovalEvent = EventInterface & FundEventInterface & {\n  __typename?: 'ApprovalEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  owner: Scalars['String'];\n  spender: Scalars['String'];\n  value: Scalars['BigDecimal'];\n};\n\nexport type ApprovalEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  owner?: Maybe<Scalars['String']>;\n  owner_not?: Maybe<Scalars['String']>;\n  owner_gt?: Maybe<Scalars['String']>;\n  owner_lt?: Maybe<Scalars['String']>;\n  owner_gte?: Maybe<Scalars['String']>;\n  owner_lte?: Maybe<Scalars['String']>;\n  owner_in?: Maybe<Array<Scalars['String']>>;\n  owner_not_in?: Maybe<Array<Scalars['String']>>;\n  owner_contains?: Maybe<Scalars['String']>;\n  owner_not_contains?: Maybe<Scalars['String']>;\n  owner_starts_with?: Maybe<Scalars['String']>;\n  owner_not_starts_with?: Maybe<Scalars['String']>;\n  owner_ends_with?: Maybe<Scalars['String']>;\n  owner_not_ends_with?: Maybe<Scalars['String']>;\n  spender?: Maybe<Scalars['String']>;\n  spender_not?: Maybe<Scalars['String']>;\n  spender_gt?: Maybe<Scalars['String']>;\n  spender_lt?: Maybe<Scalars['String']>;\n  spender_gte?: Maybe<Scalars['String']>;\n  spender_lte?: Maybe<Scalars['String']>;\n  spender_in?: Maybe<Array<Scalars['String']>>;\n  spender_not_in?: Maybe<Array<Scalars['String']>>;\n  spender_contains?: Maybe<Scalars['String']>;\n  spender_not_contains?: Maybe<Scalars['String']>;\n  spender_starts_with?: Maybe<Scalars['String']>;\n  spender_not_starts_with?: Maybe<Scalars['String']>;\n  spender_ends_with?: Maybe<Scalars['String']>;\n  spender_not_ends_with?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['BigDecimal']>;\n  value_not?: Maybe<Scalars['BigDecimal']>;\n  value_gt?: Maybe<Scalars['BigDecimal']>;\n  value_lt?: Maybe<Scalars['BigDecimal']>;\n  value_gte?: Maybe<Scalars['BigDecimal']>;\n  value_lte?: Maybe<Scalars['BigDecimal']>;\n  value_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  value_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum ApprovalEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Owner = 'owner',\n  Spender = 'spender',\n  Value = 'value'\n}\n\nexport type ApproveAssetsTrade = Trade & {\n  __typename?: 'ApproveAssetsTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssets: Array<Asset>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type ApproveAssetsTradeIncomingAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\nexport type ApproveAssetsTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssets?: Maybe<Array<Scalars['String']>>;\n  incomingAssets_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssets_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssets_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ApproveAssetsTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssets = 'incomingAssets',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type Asset = {\n  __typename?: 'Asset';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  symbol: Scalars['String'];\n  decimals: Scalars['Int'];\n  type: AssetType;\n  releases: Array<Release>;\n  derivativeType?: Maybe<DerivativeType>;\n  underlyingAsset?: Maybe<Asset>;\n  curvePoolAssetDetails?: Maybe<CurvePoolAssetDetail>;\n  uniswapV2PoolAssetDetails?: Maybe<UniswapV2PoolAssetDetail>;\n  price?: Maybe<AssetPrice>;\n  hourly?: Maybe<HourlyAssetPriceCandle>;\n  daily?: Maybe<DailyAssetPriceCandle>;\n  monthly?: Maybe<MonthlyAssetPriceCandle>;\n  priceHistory: Array<AssetPrice>;\n  hourlyHistory: Array<HourlyAssetPriceCandle>;\n  dailyHistory: Array<DailyAssetPriceCandle>;\n  monthlyHistory: Array<MonthlyAssetPriceCandle>;\n  trackingFunds: Array<Fund>;\n  blacklisted: Array<AssetBlacklistSetting>;\n  whitelisted: Array<AssetWhitelistSetting>;\n  networkAssetHolding?: Maybe<NetworkAssetHolding>;\n  networkAssetHoldingHistory: Array<NetworkAssetHolding>;\n};\n\n\nexport type AssetReleasesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Release_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Release_Filter>;\n};\n\n\nexport type AssetPriceHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetPrice_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetPrice_Filter>;\n};\n\n\nexport type AssetHourlyHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyAssetPriceCandle_Filter>;\n};\n\n\nexport type AssetDailyHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyAssetPriceCandle_Filter>;\n};\n\n\nexport type AssetMonthlyHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyAssetPriceCandle_Filter>;\n};\n\n\nexport type AssetTrackingFundsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fund_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fund_Filter>;\n};\n\n\nexport type AssetBlacklistedArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetBlacklistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetBlacklistSetting_Filter>;\n};\n\n\nexport type AssetWhitelistedArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWhitelistSetting_Filter>;\n};\n\n\nexport type AssetNetworkAssetHoldingHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkAssetHolding_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkAssetHolding_Filter>;\n};\n\nexport type AssetAmount = {\n  __typename?: 'AssetAmount';\n  id: Scalars['ID'];\n  asset: Asset;\n  amount: Scalars['BigDecimal'];\n  price?: Maybe<AssetPrice>;\n};\n\nexport type AssetAmount_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['BigDecimal']>;\n  amount_not?: Maybe<Scalars['BigDecimal']>;\n  amount_gt?: Maybe<Scalars['BigDecimal']>;\n  amount_lt?: Maybe<Scalars['BigDecimal']>;\n  amount_gte?: Maybe<Scalars['BigDecimal']>;\n  amount_lte?: Maybe<Scalars['BigDecimal']>;\n  amount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price?: Maybe<Scalars['String']>;\n  price_not?: Maybe<Scalars['String']>;\n  price_gt?: Maybe<Scalars['String']>;\n  price_lt?: Maybe<Scalars['String']>;\n  price_gte?: Maybe<Scalars['String']>;\n  price_lte?: Maybe<Scalars['String']>;\n  price_in?: Maybe<Array<Scalars['String']>>;\n  price_not_in?: Maybe<Array<Scalars['String']>>;\n  price_contains?: Maybe<Scalars['String']>;\n  price_not_contains?: Maybe<Scalars['String']>;\n  price_starts_with?: Maybe<Scalars['String']>;\n  price_not_starts_with?: Maybe<Scalars['String']>;\n  price_ends_with?: Maybe<Scalars['String']>;\n  price_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AssetAmount_OrderBy {\n  Id = 'id',\n  Asset = 'asset',\n  Amount = 'amount',\n  Price = 'price'\n}\n\nexport type AssetBlacklistAddressesAddedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AssetBlacklistAddressesAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Asset>;\n};\n\n\nexport type AssetBlacklistAddressesAddedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\nexport type AssetBlacklistAddressesAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AssetBlacklistAddressesAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AssetBlacklistAddressesRemovedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AssetBlacklistAddressesRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Asset>;\n};\n\n\nexport type AssetBlacklistAddressesRemovedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\nexport type AssetBlacklistAddressesRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AssetBlacklistAddressesRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AssetBlacklistSetting = PolicySettingInterface & {\n  __typename?: 'AssetBlacklistSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  listed: Array<Scalars['String']>;\n  assets: Array<Maybe<Asset>>;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type AssetBlacklistSettingAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type AssetBlacklistSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type AssetBlacklistSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  listed?: Maybe<Array<Scalars['String']>>;\n  listed_not?: Maybe<Array<Scalars['String']>>;\n  listed_contains?: Maybe<Array<Scalars['String']>>;\n  listed_not_contains?: Maybe<Array<Scalars['String']>>;\n  assets?: Maybe<Array<Scalars['String']>>;\n  assets_not?: Maybe<Array<Scalars['String']>>;\n  assets_contains?: Maybe<Array<Scalars['String']>>;\n  assets_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AssetBlacklistSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Listed = 'listed',\n  Assets = 'assets',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type AssetPrice = {\n  __typename?: 'AssetPrice';\n  id: Scalars['ID'];\n  asset: Asset;\n  price: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n};\n\nexport type AssetPrice_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['BigDecimal']>;\n  price_not?: Maybe<Scalars['BigDecimal']>;\n  price_gt?: Maybe<Scalars['BigDecimal']>;\n  price_lt?: Maybe<Scalars['BigDecimal']>;\n  price_gte?: Maybe<Scalars['BigDecimal']>;\n  price_lte?: Maybe<Scalars['BigDecimal']>;\n  price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum AssetPrice_OrderBy {\n  Id = 'id',\n  Asset = 'asset',\n  Price = 'price',\n  Timestamp = 'timestamp'\n}\n\nexport enum AssetType {\n  Unknown = 'UNKNOWN',\n  Derivative = 'DERIVATIVE',\n  Eth = 'ETH',\n  Usd = 'USD'\n}\n\nexport type AssetWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AssetWhitelistAddressesAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Asset>;\n};\n\n\nexport type AssetWhitelistAddressesAddedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\nexport type AssetWhitelistAddressesAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AssetWhitelistAddressesAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AssetWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AssetWhitelistAddressesRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Asset>;\n};\n\n\nexport type AssetWhitelistAddressesRemovedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\nexport type AssetWhitelistAddressesRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AssetWhitelistAddressesRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type AssetWhitelistSetting = PolicySettingInterface & {\n  __typename?: 'AssetWhitelistSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  listed: Array<Scalars['String']>;\n  assets: Array<Maybe<Asset>>;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type AssetWhitelistSettingAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type AssetWhitelistSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type AssetWhitelistSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  listed?: Maybe<Array<Scalars['String']>>;\n  listed_not?: Maybe<Array<Scalars['String']>>;\n  listed_contains?: Maybe<Array<Scalars['String']>>;\n  listed_not_contains?: Maybe<Array<Scalars['String']>>;\n  assets?: Maybe<Array<Scalars['String']>>;\n  assets_not?: Maybe<Array<Scalars['String']>>;\n  assets_contains?: Maybe<Array<Scalars['String']>>;\n  assets_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum AssetWhitelistSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Listed = 'listed',\n  Assets = 'assets',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type AssetWithdrawnEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AssetWithdrawnEvent';\n  id: Scalars['ID'];\n  asset: Asset;\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  target: Scalars['String'];\n  amount: Scalars['BigDecimal'];\n};\n\nexport type AssetWithdrawnEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  target?: Maybe<Scalars['String']>;\n  target_not?: Maybe<Scalars['String']>;\n  target_gt?: Maybe<Scalars['String']>;\n  target_lt?: Maybe<Scalars['String']>;\n  target_gte?: Maybe<Scalars['String']>;\n  target_lte?: Maybe<Scalars['String']>;\n  target_in?: Maybe<Array<Scalars['String']>>;\n  target_not_in?: Maybe<Array<Scalars['String']>>;\n  target_contains?: Maybe<Scalars['String']>;\n  target_not_contains?: Maybe<Scalars['String']>;\n  target_starts_with?: Maybe<Scalars['String']>;\n  target_not_starts_with?: Maybe<Scalars['String']>;\n  target_ends_with?: Maybe<Scalars['String']>;\n  target_not_ends_with?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['BigDecimal']>;\n  amount_not?: Maybe<Scalars['BigDecimal']>;\n  amount_gt?: Maybe<Scalars['BigDecimal']>;\n  amount_lt?: Maybe<Scalars['BigDecimal']>;\n  amount_gte?: Maybe<Scalars['BigDecimal']>;\n  amount_lte?: Maybe<Scalars['BigDecimal']>;\n  amount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum AssetWithdrawnEvent_OrderBy {\n  Id = 'id',\n  Asset = 'asset',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Target = 'target',\n  Amount = 'amount'\n}\n\nexport type Asset_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  symbol?: Maybe<Scalars['String']>;\n  symbol_not?: Maybe<Scalars['String']>;\n  symbol_gt?: Maybe<Scalars['String']>;\n  symbol_lt?: Maybe<Scalars['String']>;\n  symbol_gte?: Maybe<Scalars['String']>;\n  symbol_lte?: Maybe<Scalars['String']>;\n  symbol_in?: Maybe<Array<Scalars['String']>>;\n  symbol_not_in?: Maybe<Array<Scalars['String']>>;\n  symbol_contains?: Maybe<Scalars['String']>;\n  symbol_not_contains?: Maybe<Scalars['String']>;\n  symbol_starts_with?: Maybe<Scalars['String']>;\n  symbol_not_starts_with?: Maybe<Scalars['String']>;\n  symbol_ends_with?: Maybe<Scalars['String']>;\n  symbol_not_ends_with?: Maybe<Scalars['String']>;\n  decimals?: Maybe<Scalars['Int']>;\n  decimals_not?: Maybe<Scalars['Int']>;\n  decimals_gt?: Maybe<Scalars['Int']>;\n  decimals_lt?: Maybe<Scalars['Int']>;\n  decimals_gte?: Maybe<Scalars['Int']>;\n  decimals_lte?: Maybe<Scalars['Int']>;\n  decimals_in?: Maybe<Array<Scalars['Int']>>;\n  decimals_not_in?: Maybe<Array<Scalars['Int']>>;\n  type?: Maybe<AssetType>;\n  type_not?: Maybe<AssetType>;\n  releases?: Maybe<Array<Scalars['String']>>;\n  releases_not?: Maybe<Array<Scalars['String']>>;\n  releases_contains?: Maybe<Array<Scalars['String']>>;\n  releases_not_contains?: Maybe<Array<Scalars['String']>>;\n  derivativeType?: Maybe<DerivativeType>;\n  derivativeType_not?: Maybe<DerivativeType>;\n  underlyingAsset?: Maybe<Scalars['String']>;\n  underlyingAsset_not?: Maybe<Scalars['String']>;\n  underlyingAsset_gt?: Maybe<Scalars['String']>;\n  underlyingAsset_lt?: Maybe<Scalars['String']>;\n  underlyingAsset_gte?: Maybe<Scalars['String']>;\n  underlyingAsset_lte?: Maybe<Scalars['String']>;\n  underlyingAsset_in?: Maybe<Array<Scalars['String']>>;\n  underlyingAsset_not_in?: Maybe<Array<Scalars['String']>>;\n  underlyingAsset_contains?: Maybe<Scalars['String']>;\n  underlyingAsset_not_contains?: Maybe<Scalars['String']>;\n  underlyingAsset_starts_with?: Maybe<Scalars['String']>;\n  underlyingAsset_not_starts_with?: Maybe<Scalars['String']>;\n  underlyingAsset_ends_with?: Maybe<Scalars['String']>;\n  underlyingAsset_not_ends_with?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_not?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_gt?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_lt?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_gte?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_lte?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_in?: Maybe<Array<Scalars['String']>>;\n  curvePoolAssetDetails_not_in?: Maybe<Array<Scalars['String']>>;\n  curvePoolAssetDetails_contains?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_not_contains?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_starts_with?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_not_starts_with?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_ends_with?: Maybe<Scalars['String']>;\n  curvePoolAssetDetails_not_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_not?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_gt?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_lt?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_gte?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_lte?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2PoolAssetDetails_not_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2PoolAssetDetails_contains?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_not_contains?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_not_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolAssetDetails_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['String']>;\n  price_not?: Maybe<Scalars['String']>;\n  price_gt?: Maybe<Scalars['String']>;\n  price_lt?: Maybe<Scalars['String']>;\n  price_gte?: Maybe<Scalars['String']>;\n  price_lte?: Maybe<Scalars['String']>;\n  price_in?: Maybe<Array<Scalars['String']>>;\n  price_not_in?: Maybe<Array<Scalars['String']>>;\n  price_contains?: Maybe<Scalars['String']>;\n  price_not_contains?: Maybe<Scalars['String']>;\n  price_starts_with?: Maybe<Scalars['String']>;\n  price_not_starts_with?: Maybe<Scalars['String']>;\n  price_ends_with?: Maybe<Scalars['String']>;\n  price_not_ends_with?: Maybe<Scalars['String']>;\n  hourly?: Maybe<Scalars['String']>;\n  hourly_not?: Maybe<Scalars['String']>;\n  hourly_gt?: Maybe<Scalars['String']>;\n  hourly_lt?: Maybe<Scalars['String']>;\n  hourly_gte?: Maybe<Scalars['String']>;\n  hourly_lte?: Maybe<Scalars['String']>;\n  hourly_in?: Maybe<Array<Scalars['String']>>;\n  hourly_not_in?: Maybe<Array<Scalars['String']>>;\n  hourly_contains?: Maybe<Scalars['String']>;\n  hourly_not_contains?: Maybe<Scalars['String']>;\n  hourly_starts_with?: Maybe<Scalars['String']>;\n  hourly_not_starts_with?: Maybe<Scalars['String']>;\n  hourly_ends_with?: Maybe<Scalars['String']>;\n  hourly_not_ends_with?: Maybe<Scalars['String']>;\n  daily?: Maybe<Scalars['String']>;\n  daily_not?: Maybe<Scalars['String']>;\n  daily_gt?: Maybe<Scalars['String']>;\n  daily_lt?: Maybe<Scalars['String']>;\n  daily_gte?: Maybe<Scalars['String']>;\n  daily_lte?: Maybe<Scalars['String']>;\n  daily_in?: Maybe<Array<Scalars['String']>>;\n  daily_not_in?: Maybe<Array<Scalars['String']>>;\n  daily_contains?: Maybe<Scalars['String']>;\n  daily_not_contains?: Maybe<Scalars['String']>;\n  daily_starts_with?: Maybe<Scalars['String']>;\n  daily_not_starts_with?: Maybe<Scalars['String']>;\n  daily_ends_with?: Maybe<Scalars['String']>;\n  daily_not_ends_with?: Maybe<Scalars['String']>;\n  monthly?: Maybe<Scalars['String']>;\n  monthly_not?: Maybe<Scalars['String']>;\n  monthly_gt?: Maybe<Scalars['String']>;\n  monthly_lt?: Maybe<Scalars['String']>;\n  monthly_gte?: Maybe<Scalars['String']>;\n  monthly_lte?: Maybe<Scalars['String']>;\n  monthly_in?: Maybe<Array<Scalars['String']>>;\n  monthly_not_in?: Maybe<Array<Scalars['String']>>;\n  monthly_contains?: Maybe<Scalars['String']>;\n  monthly_not_contains?: Maybe<Scalars['String']>;\n  monthly_starts_with?: Maybe<Scalars['String']>;\n  monthly_not_starts_with?: Maybe<Scalars['String']>;\n  monthly_ends_with?: Maybe<Scalars['String']>;\n  monthly_not_ends_with?: Maybe<Scalars['String']>;\n  networkAssetHolding?: Maybe<Scalars['String']>;\n  networkAssetHolding_not?: Maybe<Scalars['String']>;\n  networkAssetHolding_gt?: Maybe<Scalars['String']>;\n  networkAssetHolding_lt?: Maybe<Scalars['String']>;\n  networkAssetHolding_gte?: Maybe<Scalars['String']>;\n  networkAssetHolding_lte?: Maybe<Scalars['String']>;\n  networkAssetHolding_in?: Maybe<Array<Scalars['String']>>;\n  networkAssetHolding_not_in?: Maybe<Array<Scalars['String']>>;\n  networkAssetHolding_contains?: Maybe<Scalars['String']>;\n  networkAssetHolding_not_contains?: Maybe<Scalars['String']>;\n  networkAssetHolding_starts_with?: Maybe<Scalars['String']>;\n  networkAssetHolding_not_starts_with?: Maybe<Scalars['String']>;\n  networkAssetHolding_ends_with?: Maybe<Scalars['String']>;\n  networkAssetHolding_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Asset_OrderBy {\n  Id = 'id',\n  Name = 'name',\n  Symbol = 'symbol',\n  Decimals = 'decimals',\n  Type = 'type',\n  Releases = 'releases',\n  DerivativeType = 'derivativeType',\n  UnderlyingAsset = 'underlyingAsset',\n  CurvePoolAssetDetails = 'curvePoolAssetDetails',\n  UniswapV2PoolAssetDetails = 'uniswapV2PoolAssetDetails',\n  Price = 'price',\n  Hourly = 'hourly',\n  Daily = 'daily',\n  Monthly = 'monthly',\n  PriceHistory = 'priceHistory',\n  HourlyHistory = 'hourlyHistory',\n  DailyHistory = 'dailyHistory',\n  MonthlyHistory = 'monthlyHistory',\n  TrackingFunds = 'trackingFunds',\n  Blacklisted = 'blacklisted',\n  Whitelisted = 'whitelisted',\n  NetworkAssetHolding = 'networkAssetHolding',\n  NetworkAssetHoldingHistory = 'networkAssetHoldingHistory'\n}\n\nexport type AuthUserAddedForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AuthUserAddedForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  comptrollerProxy: ComptrollerProxy;\n  user: Account;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type AuthUserAddedForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  user?: Maybe<Scalars['String']>;\n  user_not?: Maybe<Scalars['String']>;\n  user_gt?: Maybe<Scalars['String']>;\n  user_lt?: Maybe<Scalars['String']>;\n  user_gte?: Maybe<Scalars['String']>;\n  user_lte?: Maybe<Scalars['String']>;\n  user_in?: Maybe<Array<Scalars['String']>>;\n  user_not_in?: Maybe<Array<Scalars['String']>>;\n  user_contains?: Maybe<Scalars['String']>;\n  user_not_contains?: Maybe<Scalars['String']>;\n  user_starts_with?: Maybe<Scalars['String']>;\n  user_not_starts_with?: Maybe<Scalars['String']>;\n  user_ends_with?: Maybe<Scalars['String']>;\n  user_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AuthUserAddedForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  ComptrollerProxy = 'comptrollerProxy',\n  User = 'user',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type AuthUserRemovedForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'AuthUserRemovedForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  comptrollerProxy: ComptrollerProxy;\n  user: Account;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type AuthUserRemovedForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  user?: Maybe<Scalars['String']>;\n  user_not?: Maybe<Scalars['String']>;\n  user_gt?: Maybe<Scalars['String']>;\n  user_lt?: Maybe<Scalars['String']>;\n  user_gte?: Maybe<Scalars['String']>;\n  user_lte?: Maybe<Scalars['String']>;\n  user_in?: Maybe<Array<Scalars['String']>>;\n  user_not_in?: Maybe<Array<Scalars['String']>>;\n  user_contains?: Maybe<Scalars['String']>;\n  user_not_contains?: Maybe<Scalars['String']>;\n  user_starts_with?: Maybe<Scalars['String']>;\n  user_not_starts_with?: Maybe<Scalars['String']>;\n  user_ends_with?: Maybe<Scalars['String']>;\n  user_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum AuthUserRemovedForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  ComptrollerProxy = 'comptrollerProxy',\n  User = 'user',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\n\n\nexport type Block_Height = {\n  hash?: Maybe<Scalars['Bytes']>;\n  number?: Maybe<Scalars['Int']>;\n};\n\nexport type BuySharesCallerWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'BuySharesCallerWhitelistAddressesAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Scalars['String']>;\n};\n\nexport type BuySharesCallerWhitelistAddressesAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum BuySharesCallerWhitelistAddressesAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type BuySharesCallerWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'BuySharesCallerWhitelistAddressesRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Scalars['String']>;\n};\n\nexport type BuySharesCallerWhitelistAddressesRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum BuySharesCallerWhitelistAddressesRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type BuySharesCallerWhitelistSetting = PolicySettingInterface & {\n  __typename?: 'BuySharesCallerWhitelistSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  listed: Array<Scalars['String']>;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type BuySharesCallerWhitelistSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type BuySharesCallerWhitelistSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  listed?: Maybe<Array<Scalars['String']>>;\n  listed_not?: Maybe<Array<Scalars['String']>>;\n  listed_contains?: Maybe<Array<Scalars['String']>>;\n  listed_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum BuySharesCallerWhitelistSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Listed = 'listed',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\n\nexport type CallOnIntegrationExecutedForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'CallOnIntegrationExecutedForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  selector: Scalars['String'];\n  integrationData: Scalars['String'];\n  incomingAssets: Array<Asset>;\n  outgoingAssets: Array<Asset>;\n  incomingAssetAmounts: Array<AssetAmount>;\n  outgoingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\n\nexport type CallOnIntegrationExecutedForFundEventIncomingAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type CallOnIntegrationExecutedForFundEventOutgoingAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type CallOnIntegrationExecutedForFundEventIncomingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\n\nexport type CallOnIntegrationExecutedForFundEventOutgoingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type CallOnIntegrationExecutedForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  selector?: Maybe<Scalars['String']>;\n  selector_not?: Maybe<Scalars['String']>;\n  selector_gt?: Maybe<Scalars['String']>;\n  selector_lt?: Maybe<Scalars['String']>;\n  selector_gte?: Maybe<Scalars['String']>;\n  selector_lte?: Maybe<Scalars['String']>;\n  selector_in?: Maybe<Array<Scalars['String']>>;\n  selector_not_in?: Maybe<Array<Scalars['String']>>;\n  selector_contains?: Maybe<Scalars['String']>;\n  selector_not_contains?: Maybe<Scalars['String']>;\n  selector_starts_with?: Maybe<Scalars['String']>;\n  selector_not_starts_with?: Maybe<Scalars['String']>;\n  selector_ends_with?: Maybe<Scalars['String']>;\n  selector_not_ends_with?: Maybe<Scalars['String']>;\n  integrationData?: Maybe<Scalars['String']>;\n  integrationData_not?: Maybe<Scalars['String']>;\n  integrationData_gt?: Maybe<Scalars['String']>;\n  integrationData_lt?: Maybe<Scalars['String']>;\n  integrationData_gte?: Maybe<Scalars['String']>;\n  integrationData_lte?: Maybe<Scalars['String']>;\n  integrationData_in?: Maybe<Array<Scalars['String']>>;\n  integrationData_not_in?: Maybe<Array<Scalars['String']>>;\n  integrationData_contains?: Maybe<Scalars['String']>;\n  integrationData_not_contains?: Maybe<Scalars['String']>;\n  integrationData_starts_with?: Maybe<Scalars['String']>;\n  integrationData_not_starts_with?: Maybe<Scalars['String']>;\n  integrationData_ends_with?: Maybe<Scalars['String']>;\n  integrationData_not_ends_with?: Maybe<Scalars['String']>;\n  incomingAssets?: Maybe<Array<Scalars['String']>>;\n  incomingAssets_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssets_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssets_not_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssets?: Maybe<Array<Scalars['String']>>;\n  outgoingAssets_not?: Maybe<Array<Scalars['String']>>;\n  outgoingAssets_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssets_not_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum CallOnIntegrationExecutedForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Selector = 'selector',\n  IntegrationData = 'integrationData',\n  IncomingAssets = 'incomingAssets',\n  OutgoingAssets = 'outgoingAssets',\n  IncomingAssetAmounts = 'incomingAssetAmounts',\n  OutgoingAssetAmounts = 'outgoingAssetAmounts',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type ChainlinkAggregatorProxy = {\n  __typename?: 'ChainlinkAggregatorProxy';\n  id: Scalars['ID'];\n  aggregator: Scalars['String'];\n  type: ChainlinkAggregatorProxyType;\n  decimals: Scalars['Int'];\n  asset?: Maybe<Asset>;\n  currency?: Maybe<Currency>;\n};\n\nexport enum ChainlinkAggregatorProxyType {\n  Asset = 'ASSET',\n  Ethusd = 'ETHUSD',\n  Currency = 'CURRENCY'\n}\n\nexport type ChainlinkAggregatorProxy_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  aggregator?: Maybe<Scalars['String']>;\n  aggregator_not?: Maybe<Scalars['String']>;\n  aggregator_gt?: Maybe<Scalars['String']>;\n  aggregator_lt?: Maybe<Scalars['String']>;\n  aggregator_gte?: Maybe<Scalars['String']>;\n  aggregator_lte?: Maybe<Scalars['String']>;\n  aggregator_in?: Maybe<Array<Scalars['String']>>;\n  aggregator_not_in?: Maybe<Array<Scalars['String']>>;\n  aggregator_contains?: Maybe<Scalars['String']>;\n  aggregator_not_contains?: Maybe<Scalars['String']>;\n  aggregator_starts_with?: Maybe<Scalars['String']>;\n  aggregator_not_starts_with?: Maybe<Scalars['String']>;\n  aggregator_ends_with?: Maybe<Scalars['String']>;\n  aggregator_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ChainlinkAggregatorProxyType>;\n  type_not?: Maybe<ChainlinkAggregatorProxyType>;\n  decimals?: Maybe<Scalars['Int']>;\n  decimals_not?: Maybe<Scalars['Int']>;\n  decimals_gt?: Maybe<Scalars['Int']>;\n  decimals_lt?: Maybe<Scalars['Int']>;\n  decimals_gte?: Maybe<Scalars['Int']>;\n  decimals_lte?: Maybe<Scalars['Int']>;\n  decimals_in?: Maybe<Array<Scalars['Int']>>;\n  decimals_not_in?: Maybe<Array<Scalars['Int']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  currency?: Maybe<Scalars['String']>;\n  currency_not?: Maybe<Scalars['String']>;\n  currency_gt?: Maybe<Scalars['String']>;\n  currency_lt?: Maybe<Scalars['String']>;\n  currency_gte?: Maybe<Scalars['String']>;\n  currency_lte?: Maybe<Scalars['String']>;\n  currency_in?: Maybe<Array<Scalars['String']>>;\n  currency_not_in?: Maybe<Array<Scalars['String']>>;\n  currency_contains?: Maybe<Scalars['String']>;\n  currency_not_contains?: Maybe<Scalars['String']>;\n  currency_starts_with?: Maybe<Scalars['String']>;\n  currency_not_starts_with?: Maybe<Scalars['String']>;\n  currency_ends_with?: Maybe<Scalars['String']>;\n  currency_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ChainlinkAggregatorProxy_OrderBy {\n  Id = 'id',\n  Aggregator = 'aggregator',\n  Type = 'type',\n  Decimals = 'decimals',\n  Asset = 'asset',\n  Currency = 'currency'\n}\n\nexport type ClaimRewardsAndReinvestTrade = Trade & {\n  __typename?: 'ClaimRewardsAndReinvestTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type ClaimRewardsAndReinvestTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ClaimRewardsAndReinvestTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type ClaimRewardsAndSwapTrade = Trade & {\n  __typename?: 'ClaimRewardsAndSwapTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type ClaimRewardsAndSwapTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ClaimRewardsAndSwapTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type ClaimRewardsTrade = Trade & {\n  __typename?: 'ClaimRewardsTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type ClaimRewardsTradeIncomingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type ClaimRewardsTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ClaimRewardsTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmounts = 'incomingAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type ComptrollerEventInterface = {\n  id: Scalars['ID'];\n  comptroller: ComptrollerProxy;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type ComptrollerEventInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ComptrollerEventInterface_OrderBy {\n  Id = 'id',\n  Comptroller = 'comptroller',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type ComptrollerLibSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'ComptrollerLibSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerLib: Scalars['String'];\n};\n\nexport type ComptrollerLibSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerLib?: Maybe<Scalars['String']>;\n  comptrollerLib_not?: Maybe<Scalars['String']>;\n  comptrollerLib_gt?: Maybe<Scalars['String']>;\n  comptrollerLib_lt?: Maybe<Scalars['String']>;\n  comptrollerLib_gte?: Maybe<Scalars['String']>;\n  comptrollerLib_lte?: Maybe<Scalars['String']>;\n  comptrollerLib_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerLib_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerLib_contains?: Maybe<Scalars['String']>;\n  comptrollerLib_not_contains?: Maybe<Scalars['String']>;\n  comptrollerLib_starts_with?: Maybe<Scalars['String']>;\n  comptrollerLib_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerLib_ends_with?: Maybe<Scalars['String']>;\n  comptrollerLib_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ComptrollerLibSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerLib = 'comptrollerLib'\n}\n\nexport type ComptrollerProxy = {\n  __typename?: 'ComptrollerProxy';\n  id: Scalars['ID'];\n  fund?: Maybe<Fund>;\n  creator: Account;\n  timestamp: Scalars['BigInt'];\n  activationTime: Scalars['BigInt'];\n  destructionTime?: Maybe<Scalars['BigInt']>;\n  denominationAsset: Asset;\n  sharesActionTimelock: Scalars['BigInt'];\n  feeManagerConfigData: Scalars['String'];\n  policyManagerConfigData: Scalars['String'];\n  release: Release;\n  authUsers: Array<Account>;\n  status: ComptrollerProxyStatus;\n  feeSettings: Array<FeeSettingInterface>;\n  policySettings: Array<PolicySettingInterface>;\n};\n\n\nexport type ComptrollerProxyAuthUsersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Account_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Account_Filter>;\n};\n\n\nexport type ComptrollerProxyFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSettingInterface_Filter>;\n};\n\n\nexport type ComptrollerProxyPolicySettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicySettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicySettingInterface_Filter>;\n};\n\nexport type ComptrollerProxyDeployedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'ComptrollerProxyDeployedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  creator: Account;\n  comptrollerProxy: Scalars['String'];\n  transaction: Transaction;\n  denominationAsset: Asset;\n  sharesActionTimelock: Scalars['BigInt'];\n  feeManagerConfigData: Scalars['String'];\n  policyManagerConfigData: Scalars['String'];\n  forMigration: Scalars['Boolean'];\n};\n\nexport type ComptrollerProxyDeployedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  creator?: Maybe<Scalars['String']>;\n  creator_not?: Maybe<Scalars['String']>;\n  creator_gt?: Maybe<Scalars['String']>;\n  creator_lt?: Maybe<Scalars['String']>;\n  creator_gte?: Maybe<Scalars['String']>;\n  creator_lte?: Maybe<Scalars['String']>;\n  creator_in?: Maybe<Array<Scalars['String']>>;\n  creator_not_in?: Maybe<Array<Scalars['String']>>;\n  creator_contains?: Maybe<Scalars['String']>;\n  creator_not_contains?: Maybe<Scalars['String']>;\n  creator_starts_with?: Maybe<Scalars['String']>;\n  creator_not_starts_with?: Maybe<Scalars['String']>;\n  creator_ends_with?: Maybe<Scalars['String']>;\n  creator_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  denominationAsset?: Maybe<Scalars['String']>;\n  denominationAsset_not?: Maybe<Scalars['String']>;\n  denominationAsset_gt?: Maybe<Scalars['String']>;\n  denominationAsset_lt?: Maybe<Scalars['String']>;\n  denominationAsset_gte?: Maybe<Scalars['String']>;\n  denominationAsset_lte?: Maybe<Scalars['String']>;\n  denominationAsset_in?: Maybe<Array<Scalars['String']>>;\n  denominationAsset_not_in?: Maybe<Array<Scalars['String']>>;\n  denominationAsset_contains?: Maybe<Scalars['String']>;\n  denominationAsset_not_contains?: Maybe<Scalars['String']>;\n  denominationAsset_starts_with?: Maybe<Scalars['String']>;\n  denominationAsset_not_starts_with?: Maybe<Scalars['String']>;\n  denominationAsset_ends_with?: Maybe<Scalars['String']>;\n  denominationAsset_not_ends_with?: Maybe<Scalars['String']>;\n  sharesActionTimelock?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_not?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_gt?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_lt?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_gte?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_lte?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesActionTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeManagerConfigData?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not?: Maybe<Scalars['String']>;\n  feeManagerConfigData_gt?: Maybe<Scalars['String']>;\n  feeManagerConfigData_lt?: Maybe<Scalars['String']>;\n  feeManagerConfigData_gte?: Maybe<Scalars['String']>;\n  feeManagerConfigData_lte?: Maybe<Scalars['String']>;\n  feeManagerConfigData_in?: Maybe<Array<Scalars['String']>>;\n  feeManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;\n  feeManagerConfigData_contains?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_contains?: Maybe<Scalars['String']>;\n  feeManagerConfigData_starts_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_ends_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not?: Maybe<Scalars['String']>;\n  policyManagerConfigData_gt?: Maybe<Scalars['String']>;\n  policyManagerConfigData_lt?: Maybe<Scalars['String']>;\n  policyManagerConfigData_gte?: Maybe<Scalars['String']>;\n  policyManagerConfigData_lte?: Maybe<Scalars['String']>;\n  policyManagerConfigData_in?: Maybe<Array<Scalars['String']>>;\n  policyManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;\n  policyManagerConfigData_contains?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_contains?: Maybe<Scalars['String']>;\n  policyManagerConfigData_starts_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_ends_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;\n  forMigration?: Maybe<Scalars['Boolean']>;\n  forMigration_not?: Maybe<Scalars['Boolean']>;\n  forMigration_in?: Maybe<Array<Scalars['Boolean']>>;\n  forMigration_not_in?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport enum ComptrollerProxyDeployedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Creator = 'creator',\n  ComptrollerProxy = 'comptrollerProxy',\n  Transaction = 'transaction',\n  DenominationAsset = 'denominationAsset',\n  SharesActionTimelock = 'sharesActionTimelock',\n  FeeManagerConfigData = 'feeManagerConfigData',\n  PolicyManagerConfigData = 'policyManagerConfigData',\n  ForMigration = 'forMigration'\n}\n\nexport enum ComptrollerProxyStatus {\n  Free = 'FREE',\n  Signalled = 'SIGNALLED',\n  Committed = 'COMMITTED',\n  Destructed = 'DESTRUCTED'\n}\n\nexport type ComptrollerProxy_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  creator?: Maybe<Scalars['String']>;\n  creator_not?: Maybe<Scalars['String']>;\n  creator_gt?: Maybe<Scalars['String']>;\n  creator_lt?: Maybe<Scalars['String']>;\n  creator_gte?: Maybe<Scalars['String']>;\n  creator_lte?: Maybe<Scalars['String']>;\n  creator_in?: Maybe<Array<Scalars['String']>>;\n  creator_not_in?: Maybe<Array<Scalars['String']>>;\n  creator_contains?: Maybe<Scalars['String']>;\n  creator_not_contains?: Maybe<Scalars['String']>;\n  creator_starts_with?: Maybe<Scalars['String']>;\n  creator_not_starts_with?: Maybe<Scalars['String']>;\n  creator_ends_with?: Maybe<Scalars['String']>;\n  creator_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  activationTime?: Maybe<Scalars['BigInt']>;\n  activationTime_not?: Maybe<Scalars['BigInt']>;\n  activationTime_gt?: Maybe<Scalars['BigInt']>;\n  activationTime_lt?: Maybe<Scalars['BigInt']>;\n  activationTime_gte?: Maybe<Scalars['BigInt']>;\n  activationTime_lte?: Maybe<Scalars['BigInt']>;\n  activationTime_in?: Maybe<Array<Scalars['BigInt']>>;\n  activationTime_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  destructionTime?: Maybe<Scalars['BigInt']>;\n  destructionTime_not?: Maybe<Scalars['BigInt']>;\n  destructionTime_gt?: Maybe<Scalars['BigInt']>;\n  destructionTime_lt?: Maybe<Scalars['BigInt']>;\n  destructionTime_gte?: Maybe<Scalars['BigInt']>;\n  destructionTime_lte?: Maybe<Scalars['BigInt']>;\n  destructionTime_in?: Maybe<Array<Scalars['BigInt']>>;\n  destructionTime_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  denominationAsset?: Maybe<Scalars['String']>;\n  denominationAsset_not?: Maybe<Scalars['String']>;\n  denominationAsset_gt?: Maybe<Scalars['String']>;\n  denominationAsset_lt?: Maybe<Scalars['String']>;\n  denominationAsset_gte?: Maybe<Scalars['String']>;\n  denominationAsset_lte?: Maybe<Scalars['String']>;\n  denominationAsset_in?: Maybe<Array<Scalars['String']>>;\n  denominationAsset_not_in?: Maybe<Array<Scalars['String']>>;\n  denominationAsset_contains?: Maybe<Scalars['String']>;\n  denominationAsset_not_contains?: Maybe<Scalars['String']>;\n  denominationAsset_starts_with?: Maybe<Scalars['String']>;\n  denominationAsset_not_starts_with?: Maybe<Scalars['String']>;\n  denominationAsset_ends_with?: Maybe<Scalars['String']>;\n  denominationAsset_not_ends_with?: Maybe<Scalars['String']>;\n  sharesActionTimelock?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_not?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_gt?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_lt?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_gte?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_lte?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesActionTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeManagerConfigData?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not?: Maybe<Scalars['String']>;\n  feeManagerConfigData_gt?: Maybe<Scalars['String']>;\n  feeManagerConfigData_lt?: Maybe<Scalars['String']>;\n  feeManagerConfigData_gte?: Maybe<Scalars['String']>;\n  feeManagerConfigData_lte?: Maybe<Scalars['String']>;\n  feeManagerConfigData_in?: Maybe<Array<Scalars['String']>>;\n  feeManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;\n  feeManagerConfigData_contains?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_contains?: Maybe<Scalars['String']>;\n  feeManagerConfigData_starts_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_ends_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not?: Maybe<Scalars['String']>;\n  policyManagerConfigData_gt?: Maybe<Scalars['String']>;\n  policyManagerConfigData_lt?: Maybe<Scalars['String']>;\n  policyManagerConfigData_gte?: Maybe<Scalars['String']>;\n  policyManagerConfigData_lte?: Maybe<Scalars['String']>;\n  policyManagerConfigData_in?: Maybe<Array<Scalars['String']>>;\n  policyManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;\n  policyManagerConfigData_contains?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_contains?: Maybe<Scalars['String']>;\n  policyManagerConfigData_starts_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_ends_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;\n  release?: Maybe<Scalars['String']>;\n  release_not?: Maybe<Scalars['String']>;\n  release_gt?: Maybe<Scalars['String']>;\n  release_lt?: Maybe<Scalars['String']>;\n  release_gte?: Maybe<Scalars['String']>;\n  release_lte?: Maybe<Scalars['String']>;\n  release_in?: Maybe<Array<Scalars['String']>>;\n  release_not_in?: Maybe<Array<Scalars['String']>>;\n  release_contains?: Maybe<Scalars['String']>;\n  release_not_contains?: Maybe<Scalars['String']>;\n  release_starts_with?: Maybe<Scalars['String']>;\n  release_not_starts_with?: Maybe<Scalars['String']>;\n  release_ends_with?: Maybe<Scalars['String']>;\n  release_not_ends_with?: Maybe<Scalars['String']>;\n  authUsers?: Maybe<Array<Scalars['String']>>;\n  authUsers_not?: Maybe<Array<Scalars['String']>>;\n  authUsers_contains?: Maybe<Array<Scalars['String']>>;\n  authUsers_not_contains?: Maybe<Array<Scalars['String']>>;\n  status?: Maybe<ComptrollerProxyStatus>;\n  status_not?: Maybe<ComptrollerProxyStatus>;\n};\n\nexport enum ComptrollerProxy_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Creator = 'creator',\n  Timestamp = 'timestamp',\n  ActivationTime = 'activationTime',\n  DestructionTime = 'destructionTime',\n  DenominationAsset = 'denominationAsset',\n  SharesActionTimelock = 'sharesActionTimelock',\n  FeeManagerConfigData = 'feeManagerConfigData',\n  PolicyManagerConfigData = 'policyManagerConfigData',\n  Release = 'release',\n  AuthUsers = 'authUsers',\n  Status = 'status',\n  FeeSettings = 'feeSettings',\n  PolicySettings = 'policySettings'\n}\n\nexport type Cron = {\n  __typename?: 'Cron';\n  id: Scalars['ID'];\n  cron: Scalars['BigInt'];\n  primitives: Array<Asset>;\n  usdQuotedPrimitives: Array<Asset>;\n  derivatives: Array<Asset>;\n  currencies: Array<Currency>;\n  chainlinkAggregatorProxies: Array<ChainlinkAggregatorProxy>;\n};\n\n\nexport type CronPrimitivesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type CronUsdQuotedPrimitivesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type CronDerivativesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type CronCurrenciesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Currency_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Currency_Filter>;\n};\n\n\nexport type CronChainlinkAggregatorProxiesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ChainlinkAggregatorProxy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ChainlinkAggregatorProxy_Filter>;\n};\n\nexport type Cron_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  cron?: Maybe<Scalars['BigInt']>;\n  cron_not?: Maybe<Scalars['BigInt']>;\n  cron_gt?: Maybe<Scalars['BigInt']>;\n  cron_lt?: Maybe<Scalars['BigInt']>;\n  cron_gte?: Maybe<Scalars['BigInt']>;\n  cron_lte?: Maybe<Scalars['BigInt']>;\n  cron_in?: Maybe<Array<Scalars['BigInt']>>;\n  cron_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  primitives?: Maybe<Array<Scalars['String']>>;\n  primitives_not?: Maybe<Array<Scalars['String']>>;\n  primitives_contains?: Maybe<Array<Scalars['String']>>;\n  primitives_not_contains?: Maybe<Array<Scalars['String']>>;\n  usdQuotedPrimitives?: Maybe<Array<Scalars['String']>>;\n  usdQuotedPrimitives_not?: Maybe<Array<Scalars['String']>>;\n  usdQuotedPrimitives_contains?: Maybe<Array<Scalars['String']>>;\n  usdQuotedPrimitives_not_contains?: Maybe<Array<Scalars['String']>>;\n  derivatives?: Maybe<Array<Scalars['String']>>;\n  derivatives_not?: Maybe<Array<Scalars['String']>>;\n  derivatives_contains?: Maybe<Array<Scalars['String']>>;\n  derivatives_not_contains?: Maybe<Array<Scalars['String']>>;\n  currencies?: Maybe<Array<Scalars['String']>>;\n  currencies_not?: Maybe<Array<Scalars['String']>>;\n  currencies_contains?: Maybe<Array<Scalars['String']>>;\n  currencies_not_contains?: Maybe<Array<Scalars['String']>>;\n  chainlinkAggregatorProxies?: Maybe<Array<Scalars['String']>>;\n  chainlinkAggregatorProxies_not?: Maybe<Array<Scalars['String']>>;\n  chainlinkAggregatorProxies_contains?: Maybe<Array<Scalars['String']>>;\n  chainlinkAggregatorProxies_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum Cron_OrderBy {\n  Id = 'id',\n  Cron = 'cron',\n  Primitives = 'primitives',\n  UsdQuotedPrimitives = 'usdQuotedPrimitives',\n  Derivatives = 'derivatives',\n  Currencies = 'currencies',\n  ChainlinkAggregatorProxies = 'chainlinkAggregatorProxies'\n}\n\nexport type Currency = {\n  __typename?: 'Currency';\n  id: Scalars['ID'];\n  price?: Maybe<CurrencyPrice>;\n  hourly?: Maybe<HourlyCurrencyPriceCandle>;\n  daily?: Maybe<DailyCurrencyPriceCandle>;\n  monthly?: Maybe<MonthlyCurrencyPriceCandle>;\n  priceHistory: Array<CurrencyPrice>;\n  hourlyHistory: Array<HourlyCurrencyPriceCandle>;\n  dailyHistory: Array<DailyCurrencyPriceCandle>;\n  monthlyHistory: Array<MonthlyCurrencyPriceCandle>;\n};\n\n\nexport type CurrencyPriceHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CurrencyPrice_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CurrencyPrice_Filter>;\n};\n\n\nexport type CurrencyHourlyHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyCurrencyPriceCandle_Filter>;\n};\n\n\nexport type CurrencyDailyHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyCurrencyPriceCandle_Filter>;\n};\n\n\nexport type CurrencyMonthlyHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;\n};\n\nexport type CurrencyPrice = {\n  __typename?: 'CurrencyPrice';\n  id: Scalars['ID'];\n  currency: Currency;\n  price: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n};\n\nexport type CurrencyPrice_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  currency?: Maybe<Scalars['String']>;\n  currency_not?: Maybe<Scalars['String']>;\n  currency_gt?: Maybe<Scalars['String']>;\n  currency_lt?: Maybe<Scalars['String']>;\n  currency_gte?: Maybe<Scalars['String']>;\n  currency_lte?: Maybe<Scalars['String']>;\n  currency_in?: Maybe<Array<Scalars['String']>>;\n  currency_not_in?: Maybe<Array<Scalars['String']>>;\n  currency_contains?: Maybe<Scalars['String']>;\n  currency_not_contains?: Maybe<Scalars['String']>;\n  currency_starts_with?: Maybe<Scalars['String']>;\n  currency_not_starts_with?: Maybe<Scalars['String']>;\n  currency_ends_with?: Maybe<Scalars['String']>;\n  currency_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['BigDecimal']>;\n  price_not?: Maybe<Scalars['BigDecimal']>;\n  price_gt?: Maybe<Scalars['BigDecimal']>;\n  price_lt?: Maybe<Scalars['BigDecimal']>;\n  price_gte?: Maybe<Scalars['BigDecimal']>;\n  price_lte?: Maybe<Scalars['BigDecimal']>;\n  price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum CurrencyPrice_OrderBy {\n  Id = 'id',\n  Currency = 'currency',\n  Price = 'price',\n  Timestamp = 'timestamp'\n}\n\nexport type Currency_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  price?: Maybe<Scalars['String']>;\n  price_not?: Maybe<Scalars['String']>;\n  price_gt?: Maybe<Scalars['String']>;\n  price_lt?: Maybe<Scalars['String']>;\n  price_gte?: Maybe<Scalars['String']>;\n  price_lte?: Maybe<Scalars['String']>;\n  price_in?: Maybe<Array<Scalars['String']>>;\n  price_not_in?: Maybe<Array<Scalars['String']>>;\n  price_contains?: Maybe<Scalars['String']>;\n  price_not_contains?: Maybe<Scalars['String']>;\n  price_starts_with?: Maybe<Scalars['String']>;\n  price_not_starts_with?: Maybe<Scalars['String']>;\n  price_ends_with?: Maybe<Scalars['String']>;\n  price_not_ends_with?: Maybe<Scalars['String']>;\n  hourly?: Maybe<Scalars['String']>;\n  hourly_not?: Maybe<Scalars['String']>;\n  hourly_gt?: Maybe<Scalars['String']>;\n  hourly_lt?: Maybe<Scalars['String']>;\n  hourly_gte?: Maybe<Scalars['String']>;\n  hourly_lte?: Maybe<Scalars['String']>;\n  hourly_in?: Maybe<Array<Scalars['String']>>;\n  hourly_not_in?: Maybe<Array<Scalars['String']>>;\n  hourly_contains?: Maybe<Scalars['String']>;\n  hourly_not_contains?: Maybe<Scalars['String']>;\n  hourly_starts_with?: Maybe<Scalars['String']>;\n  hourly_not_starts_with?: Maybe<Scalars['String']>;\n  hourly_ends_with?: Maybe<Scalars['String']>;\n  hourly_not_ends_with?: Maybe<Scalars['String']>;\n  daily?: Maybe<Scalars['String']>;\n  daily_not?: Maybe<Scalars['String']>;\n  daily_gt?: Maybe<Scalars['String']>;\n  daily_lt?: Maybe<Scalars['String']>;\n  daily_gte?: Maybe<Scalars['String']>;\n  daily_lte?: Maybe<Scalars['String']>;\n  daily_in?: Maybe<Array<Scalars['String']>>;\n  daily_not_in?: Maybe<Array<Scalars['String']>>;\n  daily_contains?: Maybe<Scalars['String']>;\n  daily_not_contains?: Maybe<Scalars['String']>;\n  daily_starts_with?: Maybe<Scalars['String']>;\n  daily_not_starts_with?: Maybe<Scalars['String']>;\n  daily_ends_with?: Maybe<Scalars['String']>;\n  daily_not_ends_with?: Maybe<Scalars['String']>;\n  monthly?: Maybe<Scalars['String']>;\n  monthly_not?: Maybe<Scalars['String']>;\n  monthly_gt?: Maybe<Scalars['String']>;\n  monthly_lt?: Maybe<Scalars['String']>;\n  monthly_gte?: Maybe<Scalars['String']>;\n  monthly_lte?: Maybe<Scalars['String']>;\n  monthly_in?: Maybe<Array<Scalars['String']>>;\n  monthly_not_in?: Maybe<Array<Scalars['String']>>;\n  monthly_contains?: Maybe<Scalars['String']>;\n  monthly_not_contains?: Maybe<Scalars['String']>;\n  monthly_starts_with?: Maybe<Scalars['String']>;\n  monthly_not_starts_with?: Maybe<Scalars['String']>;\n  monthly_ends_with?: Maybe<Scalars['String']>;\n  monthly_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Currency_OrderBy {\n  Id = 'id',\n  Price = 'price',\n  Hourly = 'hourly',\n  Daily = 'daily',\n  Monthly = 'monthly',\n  PriceHistory = 'priceHistory',\n  HourlyHistory = 'hourlyHistory',\n  DailyHistory = 'dailyHistory',\n  MonthlyHistory = 'monthlyHistory'\n}\n\nexport enum CurveAssetType {\n  Gauge = 'GAUGE',\n  Pool = 'POOL'\n}\n\nexport type CurvePoolAssetDetail = {\n  __typename?: 'CurvePoolAssetDetail';\n  id: Scalars['ID'];\n  pool: Scalars['String'];\n  gauge: Scalars['String'];\n  lpToken: Asset;\n  gaugeToken: Asset;\n  curveAssetType: CurveAssetType;\n  invariantProxyAsset: Asset;\n  numberOfTokens: Scalars['Int'];\n  token0: Asset;\n  token1: Asset;\n  token2?: Maybe<Asset>;\n};\n\nexport type CurvePoolAssetDetail_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  gauge?: Maybe<Scalars['String']>;\n  gauge_not?: Maybe<Scalars['String']>;\n  gauge_gt?: Maybe<Scalars['String']>;\n  gauge_lt?: Maybe<Scalars['String']>;\n  gauge_gte?: Maybe<Scalars['String']>;\n  gauge_lte?: Maybe<Scalars['String']>;\n  gauge_in?: Maybe<Array<Scalars['String']>>;\n  gauge_not_in?: Maybe<Array<Scalars['String']>>;\n  gauge_contains?: Maybe<Scalars['String']>;\n  gauge_not_contains?: Maybe<Scalars['String']>;\n  gauge_starts_with?: Maybe<Scalars['String']>;\n  gauge_not_starts_with?: Maybe<Scalars['String']>;\n  gauge_ends_with?: Maybe<Scalars['String']>;\n  gauge_not_ends_with?: Maybe<Scalars['String']>;\n  lpToken?: Maybe<Scalars['String']>;\n  lpToken_not?: Maybe<Scalars['String']>;\n  lpToken_gt?: Maybe<Scalars['String']>;\n  lpToken_lt?: Maybe<Scalars['String']>;\n  lpToken_gte?: Maybe<Scalars['String']>;\n  lpToken_lte?: Maybe<Scalars['String']>;\n  lpToken_in?: Maybe<Array<Scalars['String']>>;\n  lpToken_not_in?: Maybe<Array<Scalars['String']>>;\n  lpToken_contains?: Maybe<Scalars['String']>;\n  lpToken_not_contains?: Maybe<Scalars['String']>;\n  lpToken_starts_with?: Maybe<Scalars['String']>;\n  lpToken_not_starts_with?: Maybe<Scalars['String']>;\n  lpToken_ends_with?: Maybe<Scalars['String']>;\n  lpToken_not_ends_with?: Maybe<Scalars['String']>;\n  gaugeToken?: Maybe<Scalars['String']>;\n  gaugeToken_not?: Maybe<Scalars['String']>;\n  gaugeToken_gt?: Maybe<Scalars['String']>;\n  gaugeToken_lt?: Maybe<Scalars['String']>;\n  gaugeToken_gte?: Maybe<Scalars['String']>;\n  gaugeToken_lte?: Maybe<Scalars['String']>;\n  gaugeToken_in?: Maybe<Array<Scalars['String']>>;\n  gaugeToken_not_in?: Maybe<Array<Scalars['String']>>;\n  gaugeToken_contains?: Maybe<Scalars['String']>;\n  gaugeToken_not_contains?: Maybe<Scalars['String']>;\n  gaugeToken_starts_with?: Maybe<Scalars['String']>;\n  gaugeToken_not_starts_with?: Maybe<Scalars['String']>;\n  gaugeToken_ends_with?: Maybe<Scalars['String']>;\n  gaugeToken_not_ends_with?: Maybe<Scalars['String']>;\n  curveAssetType?: Maybe<CurveAssetType>;\n  curveAssetType_not?: Maybe<CurveAssetType>;\n  invariantProxyAsset?: Maybe<Scalars['String']>;\n  invariantProxyAsset_not?: Maybe<Scalars['String']>;\n  invariantProxyAsset_gt?: Maybe<Scalars['String']>;\n  invariantProxyAsset_lt?: Maybe<Scalars['String']>;\n  invariantProxyAsset_gte?: Maybe<Scalars['String']>;\n  invariantProxyAsset_lte?: Maybe<Scalars['String']>;\n  invariantProxyAsset_in?: Maybe<Array<Scalars['String']>>;\n  invariantProxyAsset_not_in?: Maybe<Array<Scalars['String']>>;\n  invariantProxyAsset_contains?: Maybe<Scalars['String']>;\n  invariantProxyAsset_not_contains?: Maybe<Scalars['String']>;\n  invariantProxyAsset_starts_with?: Maybe<Scalars['String']>;\n  invariantProxyAsset_not_starts_with?: Maybe<Scalars['String']>;\n  invariantProxyAsset_ends_with?: Maybe<Scalars['String']>;\n  invariantProxyAsset_not_ends_with?: Maybe<Scalars['String']>;\n  numberOfTokens?: Maybe<Scalars['Int']>;\n  numberOfTokens_not?: Maybe<Scalars['Int']>;\n  numberOfTokens_gt?: Maybe<Scalars['Int']>;\n  numberOfTokens_lt?: Maybe<Scalars['Int']>;\n  numberOfTokens_gte?: Maybe<Scalars['Int']>;\n  numberOfTokens_lte?: Maybe<Scalars['Int']>;\n  numberOfTokens_in?: Maybe<Array<Scalars['Int']>>;\n  numberOfTokens_not_in?: Maybe<Array<Scalars['Int']>>;\n  token0?: Maybe<Scalars['String']>;\n  token0_not?: Maybe<Scalars['String']>;\n  token0_gt?: Maybe<Scalars['String']>;\n  token0_lt?: Maybe<Scalars['String']>;\n  token0_gte?: Maybe<Scalars['String']>;\n  token0_lte?: Maybe<Scalars['String']>;\n  token0_in?: Maybe<Array<Scalars['String']>>;\n  token0_not_in?: Maybe<Array<Scalars['String']>>;\n  token0_contains?: Maybe<Scalars['String']>;\n  token0_not_contains?: Maybe<Scalars['String']>;\n  token0_starts_with?: Maybe<Scalars['String']>;\n  token0_not_starts_with?: Maybe<Scalars['String']>;\n  token0_ends_with?: Maybe<Scalars['String']>;\n  token0_not_ends_with?: Maybe<Scalars['String']>;\n  token1?: Maybe<Scalars['String']>;\n  token1_not?: Maybe<Scalars['String']>;\n  token1_gt?: Maybe<Scalars['String']>;\n  token1_lt?: Maybe<Scalars['String']>;\n  token1_gte?: Maybe<Scalars['String']>;\n  token1_lte?: Maybe<Scalars['String']>;\n  token1_in?: Maybe<Array<Scalars['String']>>;\n  token1_not_in?: Maybe<Array<Scalars['String']>>;\n  token1_contains?: Maybe<Scalars['String']>;\n  token1_not_contains?: Maybe<Scalars['String']>;\n  token1_starts_with?: Maybe<Scalars['String']>;\n  token1_not_starts_with?: Maybe<Scalars['String']>;\n  token1_ends_with?: Maybe<Scalars['String']>;\n  token1_not_ends_with?: Maybe<Scalars['String']>;\n  token2?: Maybe<Scalars['String']>;\n  token2_not?: Maybe<Scalars['String']>;\n  token2_gt?: Maybe<Scalars['String']>;\n  token2_lt?: Maybe<Scalars['String']>;\n  token2_gte?: Maybe<Scalars['String']>;\n  token2_lte?: Maybe<Scalars['String']>;\n  token2_in?: Maybe<Array<Scalars['String']>>;\n  token2_not_in?: Maybe<Array<Scalars['String']>>;\n  token2_contains?: Maybe<Scalars['String']>;\n  token2_not_contains?: Maybe<Scalars['String']>;\n  token2_starts_with?: Maybe<Scalars['String']>;\n  token2_not_starts_with?: Maybe<Scalars['String']>;\n  token2_ends_with?: Maybe<Scalars['String']>;\n  token2_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum CurvePoolAssetDetail_OrderBy {\n  Id = 'id',\n  Pool = 'pool',\n  Gauge = 'gauge',\n  LpToken = 'lpToken',\n  GaugeToken = 'gaugeToken',\n  CurveAssetType = 'curveAssetType',\n  InvariantProxyAsset = 'invariantProxyAsset',\n  NumberOfTokens = 'numberOfTokens',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  Token2 = 'token2'\n}\n\nexport type DailyAssetPriceCandle = {\n  __typename?: 'DailyAssetPriceCandle';\n  id: Scalars['ID'];\n  asset: Asset;\n  group: DailyPriceCandleGroup;\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  openRef: AssetPrice;\n  close: Scalars['BigDecimal'];\n  closeRef: AssetPrice;\n  low: Scalars['BigDecimal'];\n  lowRef: AssetPrice;\n  high: Scalars['BigDecimal'];\n  highRef: AssetPrice;\n};\n\nexport type DailyAssetPriceCandle_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  group?: Maybe<Scalars['String']>;\n  group_not?: Maybe<Scalars['String']>;\n  group_gt?: Maybe<Scalars['String']>;\n  group_lt?: Maybe<Scalars['String']>;\n  group_gte?: Maybe<Scalars['String']>;\n  group_lte?: Maybe<Scalars['String']>;\n  group_in?: Maybe<Array<Scalars['String']>>;\n  group_not_in?: Maybe<Array<Scalars['String']>>;\n  group_contains?: Maybe<Scalars['String']>;\n  group_not_contains?: Maybe<Scalars['String']>;\n  group_starts_with?: Maybe<Scalars['String']>;\n  group_not_starts_with?: Maybe<Scalars['String']>;\n  group_ends_with?: Maybe<Scalars['String']>;\n  group_not_ends_with?: Maybe<Scalars['String']>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  openRef?: Maybe<Scalars['String']>;\n  openRef_not?: Maybe<Scalars['String']>;\n  openRef_gt?: Maybe<Scalars['String']>;\n  openRef_lt?: Maybe<Scalars['String']>;\n  openRef_gte?: Maybe<Scalars['String']>;\n  openRef_lte?: Maybe<Scalars['String']>;\n  openRef_in?: Maybe<Array<Scalars['String']>>;\n  openRef_not_in?: Maybe<Array<Scalars['String']>>;\n  openRef_contains?: Maybe<Scalars['String']>;\n  openRef_not_contains?: Maybe<Scalars['String']>;\n  openRef_starts_with?: Maybe<Scalars['String']>;\n  openRef_not_starts_with?: Maybe<Scalars['String']>;\n  openRef_ends_with?: Maybe<Scalars['String']>;\n  openRef_not_ends_with?: Maybe<Scalars['String']>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  closeRef?: Maybe<Scalars['String']>;\n  closeRef_not?: Maybe<Scalars['String']>;\n  closeRef_gt?: Maybe<Scalars['String']>;\n  closeRef_lt?: Maybe<Scalars['String']>;\n  closeRef_gte?: Maybe<Scalars['String']>;\n  closeRef_lte?: Maybe<Scalars['String']>;\n  closeRef_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_not_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_contains?: Maybe<Scalars['String']>;\n  closeRef_not_contains?: Maybe<Scalars['String']>;\n  closeRef_starts_with?: Maybe<Scalars['String']>;\n  closeRef_not_starts_with?: Maybe<Scalars['String']>;\n  closeRef_ends_with?: Maybe<Scalars['String']>;\n  closeRef_not_ends_with?: Maybe<Scalars['String']>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  lowRef?: Maybe<Scalars['String']>;\n  lowRef_not?: Maybe<Scalars['String']>;\n  lowRef_gt?: Maybe<Scalars['String']>;\n  lowRef_lt?: Maybe<Scalars['String']>;\n  lowRef_gte?: Maybe<Scalars['String']>;\n  lowRef_lte?: Maybe<Scalars['String']>;\n  lowRef_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_not_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_contains?: Maybe<Scalars['String']>;\n  lowRef_not_contains?: Maybe<Scalars['String']>;\n  lowRef_starts_with?: Maybe<Scalars['String']>;\n  lowRef_not_starts_with?: Maybe<Scalars['String']>;\n  lowRef_ends_with?: Maybe<Scalars['String']>;\n  lowRef_not_ends_with?: Maybe<Scalars['String']>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highRef?: Maybe<Scalars['String']>;\n  highRef_not?: Maybe<Scalars['String']>;\n  highRef_gt?: Maybe<Scalars['String']>;\n  highRef_lt?: Maybe<Scalars['String']>;\n  highRef_gte?: Maybe<Scalars['String']>;\n  highRef_lte?: Maybe<Scalars['String']>;\n  highRef_in?: Maybe<Array<Scalars['String']>>;\n  highRef_not_in?: Maybe<Array<Scalars['String']>>;\n  highRef_contains?: Maybe<Scalars['String']>;\n  highRef_not_contains?: Maybe<Scalars['String']>;\n  highRef_starts_with?: Maybe<Scalars['String']>;\n  highRef_not_starts_with?: Maybe<Scalars['String']>;\n  highRef_ends_with?: Maybe<Scalars['String']>;\n  highRef_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum DailyAssetPriceCandle_OrderBy {\n  Id = 'id',\n  Asset = 'asset',\n  Group = 'group',\n  From = 'from',\n  To = 'to',\n  Open = 'open',\n  OpenRef = 'openRef',\n  Close = 'close',\n  CloseRef = 'closeRef',\n  Low = 'low',\n  LowRef = 'lowRef',\n  High = 'high',\n  HighRef = 'highRef'\n}\n\nexport type DailyCurrencyPriceCandle = {\n  __typename?: 'DailyCurrencyPriceCandle';\n  id: Scalars['ID'];\n  currency: Currency;\n  group: DailyPriceCandleGroup;\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  openRef: CurrencyPrice;\n  close: Scalars['BigDecimal'];\n  closeRef: CurrencyPrice;\n  low: Scalars['BigDecimal'];\n  lowRef: CurrencyPrice;\n  high: Scalars['BigDecimal'];\n  highRef: CurrencyPrice;\n};\n\nexport type DailyCurrencyPriceCandle_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  currency?: Maybe<Scalars['String']>;\n  currency_not?: Maybe<Scalars['String']>;\n  currency_gt?: Maybe<Scalars['String']>;\n  currency_lt?: Maybe<Scalars['String']>;\n  currency_gte?: Maybe<Scalars['String']>;\n  currency_lte?: Maybe<Scalars['String']>;\n  currency_in?: Maybe<Array<Scalars['String']>>;\n  currency_not_in?: Maybe<Array<Scalars['String']>>;\n  currency_contains?: Maybe<Scalars['String']>;\n  currency_not_contains?: Maybe<Scalars['String']>;\n  currency_starts_with?: Maybe<Scalars['String']>;\n  currency_not_starts_with?: Maybe<Scalars['String']>;\n  currency_ends_with?: Maybe<Scalars['String']>;\n  currency_not_ends_with?: Maybe<Scalars['String']>;\n  group?: Maybe<Scalars['String']>;\n  group_not?: Maybe<Scalars['String']>;\n  group_gt?: Maybe<Scalars['String']>;\n  group_lt?: Maybe<Scalars['String']>;\n  group_gte?: Maybe<Scalars['String']>;\n  group_lte?: Maybe<Scalars['String']>;\n  group_in?: Maybe<Array<Scalars['String']>>;\n  group_not_in?: Maybe<Array<Scalars['String']>>;\n  group_contains?: Maybe<Scalars['String']>;\n  group_not_contains?: Maybe<Scalars['String']>;\n  group_starts_with?: Maybe<Scalars['String']>;\n  group_not_starts_with?: Maybe<Scalars['String']>;\n  group_ends_with?: Maybe<Scalars['String']>;\n  group_not_ends_with?: Maybe<Scalars['String']>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  openRef?: Maybe<Scalars['String']>;\n  openRef_not?: Maybe<Scalars['String']>;\n  openRef_gt?: Maybe<Scalars['String']>;\n  openRef_lt?: Maybe<Scalars['String']>;\n  openRef_gte?: Maybe<Scalars['String']>;\n  openRef_lte?: Maybe<Scalars['String']>;\n  openRef_in?: Maybe<Array<Scalars['String']>>;\n  openRef_not_in?: Maybe<Array<Scalars['String']>>;\n  openRef_contains?: Maybe<Scalars['String']>;\n  openRef_not_contains?: Maybe<Scalars['String']>;\n  openRef_starts_with?: Maybe<Scalars['String']>;\n  openRef_not_starts_with?: Maybe<Scalars['String']>;\n  openRef_ends_with?: Maybe<Scalars['String']>;\n  openRef_not_ends_with?: Maybe<Scalars['String']>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  closeRef?: Maybe<Scalars['String']>;\n  closeRef_not?: Maybe<Scalars['String']>;\n  closeRef_gt?: Maybe<Scalars['String']>;\n  closeRef_lt?: Maybe<Scalars['String']>;\n  closeRef_gte?: Maybe<Scalars['String']>;\n  closeRef_lte?: Maybe<Scalars['String']>;\n  closeRef_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_not_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_contains?: Maybe<Scalars['String']>;\n  closeRef_not_contains?: Maybe<Scalars['String']>;\n  closeRef_starts_with?: Maybe<Scalars['String']>;\n  closeRef_not_starts_with?: Maybe<Scalars['String']>;\n  closeRef_ends_with?: Maybe<Scalars['String']>;\n  closeRef_not_ends_with?: Maybe<Scalars['String']>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  lowRef?: Maybe<Scalars['String']>;\n  lowRef_not?: Maybe<Scalars['String']>;\n  lowRef_gt?: Maybe<Scalars['String']>;\n  lowRef_lt?: Maybe<Scalars['String']>;\n  lowRef_gte?: Maybe<Scalars['String']>;\n  lowRef_lte?: Maybe<Scalars['String']>;\n  lowRef_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_not_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_contains?: Maybe<Scalars['String']>;\n  lowRef_not_contains?: Maybe<Scalars['String']>;\n  lowRef_starts_with?: Maybe<Scalars['String']>;\n  lowRef_not_starts_with?: Maybe<Scalars['String']>;\n  lowRef_ends_with?: Maybe<Scalars['String']>;\n  lowRef_not_ends_with?: Maybe<Scalars['String']>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highRef?: Maybe<Scalars['String']>;\n  highRef_not?: Maybe<Scalars['String']>;\n  highRef_gt?: Maybe<Scalars['String']>;\n  highRef_lt?: Maybe<Scalars['String']>;\n  highRef_gte?: Maybe<Scalars['String']>;\n  highRef_lte?: Maybe<Scalars['String']>;\n  highRef_in?: Maybe<Array<Scalars['String']>>;\n  highRef_not_in?: Maybe<Array<Scalars['String']>>;\n  highRef_contains?: Maybe<Scalars['String']>;\n  highRef_not_contains?: Maybe<Scalars['String']>;\n  highRef_starts_with?: Maybe<Scalars['String']>;\n  highRef_not_starts_with?: Maybe<Scalars['String']>;\n  highRef_ends_with?: Maybe<Scalars['String']>;\n  highRef_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum DailyCurrencyPriceCandle_OrderBy {\n  Id = 'id',\n  Currency = 'currency',\n  Group = 'group',\n  From = 'from',\n  To = 'to',\n  Open = 'open',\n  OpenRef = 'openRef',\n  Close = 'close',\n  CloseRef = 'closeRef',\n  Low = 'low',\n  LowRef = 'lowRef',\n  High = 'high',\n  HighRef = 'highRef'\n}\n\nexport type DailyFundState = PeriodicFundStateInterface & {\n  __typename?: 'DailyFundState';\n  id: Scalars['ID'];\n  fund: Fund;\n  start: Scalars['BigInt'];\n  end: Scalars['BigInt'];\n  first: FundState;\n  last: FundState;\n};\n\nexport type DailyFundState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  start?: Maybe<Scalars['BigInt']>;\n  start_not?: Maybe<Scalars['BigInt']>;\n  start_gt?: Maybe<Scalars['BigInt']>;\n  start_lt?: Maybe<Scalars['BigInt']>;\n  start_gte?: Maybe<Scalars['BigInt']>;\n  start_lte?: Maybe<Scalars['BigInt']>;\n  start_in?: Maybe<Array<Scalars['BigInt']>>;\n  start_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  end?: Maybe<Scalars['BigInt']>;\n  end_not?: Maybe<Scalars['BigInt']>;\n  end_gt?: Maybe<Scalars['BigInt']>;\n  end_lt?: Maybe<Scalars['BigInt']>;\n  end_gte?: Maybe<Scalars['BigInt']>;\n  end_lte?: Maybe<Scalars['BigInt']>;\n  end_in?: Maybe<Array<Scalars['BigInt']>>;\n  end_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  first?: Maybe<Scalars['String']>;\n  first_not?: Maybe<Scalars['String']>;\n  first_gt?: Maybe<Scalars['String']>;\n  first_lt?: Maybe<Scalars['String']>;\n  first_gte?: Maybe<Scalars['String']>;\n  first_lte?: Maybe<Scalars['String']>;\n  first_in?: Maybe<Array<Scalars['String']>>;\n  first_not_in?: Maybe<Array<Scalars['String']>>;\n  first_contains?: Maybe<Scalars['String']>;\n  first_not_contains?: Maybe<Scalars['String']>;\n  first_starts_with?: Maybe<Scalars['String']>;\n  first_not_starts_with?: Maybe<Scalars['String']>;\n  first_ends_with?: Maybe<Scalars['String']>;\n  first_not_ends_with?: Maybe<Scalars['String']>;\n  last?: Maybe<Scalars['String']>;\n  last_not?: Maybe<Scalars['String']>;\n  last_gt?: Maybe<Scalars['String']>;\n  last_lt?: Maybe<Scalars['String']>;\n  last_gte?: Maybe<Scalars['String']>;\n  last_lte?: Maybe<Scalars['String']>;\n  last_in?: Maybe<Array<Scalars['String']>>;\n  last_not_in?: Maybe<Array<Scalars['String']>>;\n  last_contains?: Maybe<Scalars['String']>;\n  last_not_contains?: Maybe<Scalars['String']>;\n  last_starts_with?: Maybe<Scalars['String']>;\n  last_not_starts_with?: Maybe<Scalars['String']>;\n  last_ends_with?: Maybe<Scalars['String']>;\n  last_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum DailyFundState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Start = 'start',\n  End = 'end',\n  First = 'first',\n  Last = 'last'\n}\n\nexport type DailyPriceCandleGroup = {\n  __typename?: 'DailyPriceCandleGroup';\n  id: Scalars['ID'];\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  assetCandles: Array<DailyAssetPriceCandle>;\n  currencyCandles: Array<DailyCurrencyPriceCandle>;\n};\n\n\nexport type DailyPriceCandleGroupAssetCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyAssetPriceCandle_Filter>;\n};\n\n\nexport type DailyPriceCandleGroupCurrencyCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyCurrencyPriceCandle_Filter>;\n};\n\nexport type DailyPriceCandleGroup_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum DailyPriceCandleGroup_OrderBy {\n  Id = 'id',\n  From = 'from',\n  To = 'to',\n  AssetCandles = 'assetCandles',\n  CurrencyCandles = 'currencyCandles'\n}\n\nexport type DerivativeAddedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'DerivativeAddedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  derivative: Asset;\n  priceFeed: Scalars['String'];\n};\n\nexport type DerivativeAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  derivative?: Maybe<Scalars['String']>;\n  derivative_not?: Maybe<Scalars['String']>;\n  derivative_gt?: Maybe<Scalars['String']>;\n  derivative_lt?: Maybe<Scalars['String']>;\n  derivative_gte?: Maybe<Scalars['String']>;\n  derivative_lte?: Maybe<Scalars['String']>;\n  derivative_in?: Maybe<Array<Scalars['String']>>;\n  derivative_not_in?: Maybe<Array<Scalars['String']>>;\n  derivative_contains?: Maybe<Scalars['String']>;\n  derivative_not_contains?: Maybe<Scalars['String']>;\n  derivative_starts_with?: Maybe<Scalars['String']>;\n  derivative_not_starts_with?: Maybe<Scalars['String']>;\n  derivative_ends_with?: Maybe<Scalars['String']>;\n  derivative_not_ends_with?: Maybe<Scalars['String']>;\n  priceFeed?: Maybe<Scalars['String']>;\n  priceFeed_not?: Maybe<Scalars['String']>;\n  priceFeed_gt?: Maybe<Scalars['String']>;\n  priceFeed_lt?: Maybe<Scalars['String']>;\n  priceFeed_gte?: Maybe<Scalars['String']>;\n  priceFeed_lte?: Maybe<Scalars['String']>;\n  priceFeed_in?: Maybe<Array<Scalars['String']>>;\n  priceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  priceFeed_contains?: Maybe<Scalars['String']>;\n  priceFeed_not_contains?: Maybe<Scalars['String']>;\n  priceFeed_starts_with?: Maybe<Scalars['String']>;\n  priceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  priceFeed_ends_with?: Maybe<Scalars['String']>;\n  priceFeed_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum DerivativeAddedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Derivative = 'derivative',\n  PriceFeed = 'priceFeed'\n}\n\nexport type DerivativeRemovedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'DerivativeRemovedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  derivative: Asset;\n};\n\nexport type DerivativeRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  derivative?: Maybe<Scalars['String']>;\n  derivative_not?: Maybe<Scalars['String']>;\n  derivative_gt?: Maybe<Scalars['String']>;\n  derivative_lt?: Maybe<Scalars['String']>;\n  derivative_gte?: Maybe<Scalars['String']>;\n  derivative_lte?: Maybe<Scalars['String']>;\n  derivative_in?: Maybe<Array<Scalars['String']>>;\n  derivative_not_in?: Maybe<Array<Scalars['String']>>;\n  derivative_contains?: Maybe<Scalars['String']>;\n  derivative_not_contains?: Maybe<Scalars['String']>;\n  derivative_starts_with?: Maybe<Scalars['String']>;\n  derivative_not_starts_with?: Maybe<Scalars['String']>;\n  derivative_ends_with?: Maybe<Scalars['String']>;\n  derivative_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum DerivativeRemovedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Derivative = 'derivative'\n}\n\nexport enum DerivativeType {\n  Aave = 'Aave',\n  Alpha = 'Alpha',\n  Chai = 'Chai',\n  Compound = 'Compound',\n  CurvePool = 'CurvePool',\n  Idle = 'Idle',\n  Stakehound = 'Stakehound',\n  Synthetix = 'Synthetix',\n  UniswapPool = 'UniswapPool',\n  Yearn = 'Yearn'\n}\n\nexport type DerivativeUpdatedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'DerivativeUpdatedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  derivative: Asset;\n  prevPriceFeed: Scalars['String'];\n  nextPriceFeed: Scalars['String'];\n};\n\nexport type DerivativeUpdatedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  derivative?: Maybe<Scalars['String']>;\n  derivative_not?: Maybe<Scalars['String']>;\n  derivative_gt?: Maybe<Scalars['String']>;\n  derivative_lt?: Maybe<Scalars['String']>;\n  derivative_gte?: Maybe<Scalars['String']>;\n  derivative_lte?: Maybe<Scalars['String']>;\n  derivative_in?: Maybe<Array<Scalars['String']>>;\n  derivative_not_in?: Maybe<Array<Scalars['String']>>;\n  derivative_contains?: Maybe<Scalars['String']>;\n  derivative_not_contains?: Maybe<Scalars['String']>;\n  derivative_starts_with?: Maybe<Scalars['String']>;\n  derivative_not_starts_with?: Maybe<Scalars['String']>;\n  derivative_ends_with?: Maybe<Scalars['String']>;\n  derivative_not_ends_with?: Maybe<Scalars['String']>;\n  prevPriceFeed?: Maybe<Scalars['String']>;\n  prevPriceFeed_not?: Maybe<Scalars['String']>;\n  prevPriceFeed_gt?: Maybe<Scalars['String']>;\n  prevPriceFeed_lt?: Maybe<Scalars['String']>;\n  prevPriceFeed_gte?: Maybe<Scalars['String']>;\n  prevPriceFeed_lte?: Maybe<Scalars['String']>;\n  prevPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  prevPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  prevPriceFeed_contains?: Maybe<Scalars['String']>;\n  prevPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  prevPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  prevPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  prevPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  prevPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  nextPriceFeed?: Maybe<Scalars['String']>;\n  nextPriceFeed_not?: Maybe<Scalars['String']>;\n  nextPriceFeed_gt?: Maybe<Scalars['String']>;\n  nextPriceFeed_lt?: Maybe<Scalars['String']>;\n  nextPriceFeed_gte?: Maybe<Scalars['String']>;\n  nextPriceFeed_lte?: Maybe<Scalars['String']>;\n  nextPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  nextPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  nextPriceFeed_contains?: Maybe<Scalars['String']>;\n  nextPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  nextPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  nextPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  nextPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  nextPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum DerivativeUpdatedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Derivative = 'derivative',\n  PrevPriceFeed = 'prevPriceFeed',\n  NextPriceFeed = 'nextPriceFeed'\n}\n\nexport type DispatcherOwnershipTransferredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'DispatcherOwnershipTransferredEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevOwner: Scalars['String'];\n  nextOwner: Scalars['String'];\n};\n\nexport type DispatcherOwnershipTransferredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevOwner?: Maybe<Scalars['String']>;\n  prevOwner_not?: Maybe<Scalars['String']>;\n  prevOwner_gt?: Maybe<Scalars['String']>;\n  prevOwner_lt?: Maybe<Scalars['String']>;\n  prevOwner_gte?: Maybe<Scalars['String']>;\n  prevOwner_lte?: Maybe<Scalars['String']>;\n  prevOwner_in?: Maybe<Array<Scalars['String']>>;\n  prevOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  prevOwner_contains?: Maybe<Scalars['String']>;\n  prevOwner_not_contains?: Maybe<Scalars['String']>;\n  prevOwner_starts_with?: Maybe<Scalars['String']>;\n  prevOwner_not_starts_with?: Maybe<Scalars['String']>;\n  prevOwner_ends_with?: Maybe<Scalars['String']>;\n  prevOwner_not_ends_with?: Maybe<Scalars['String']>;\n  nextOwner?: Maybe<Scalars['String']>;\n  nextOwner_not?: Maybe<Scalars['String']>;\n  nextOwner_gt?: Maybe<Scalars['String']>;\n  nextOwner_lt?: Maybe<Scalars['String']>;\n  nextOwner_gte?: Maybe<Scalars['String']>;\n  nextOwner_lte?: Maybe<Scalars['String']>;\n  nextOwner_in?: Maybe<Array<Scalars['String']>>;\n  nextOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  nextOwner_contains?: Maybe<Scalars['String']>;\n  nextOwner_not_contains?: Maybe<Scalars['String']>;\n  nextOwner_starts_with?: Maybe<Scalars['String']>;\n  nextOwner_not_starts_with?: Maybe<Scalars['String']>;\n  nextOwner_ends_with?: Maybe<Scalars['String']>;\n  nextOwner_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum DispatcherOwnershipTransferredEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevOwner = 'prevOwner',\n  NextOwner = 'nextOwner'\n}\n\nexport type EntranceRateBurnFeeSetting = FeeSettingInterface & {\n  __typename?: 'EntranceRateBurnFeeSetting';\n  id: Scalars['ID'];\n  fee: Fee;\n  comptroller: ComptrollerProxy;\n  rate: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type EntranceRateBurnFeeSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type EntranceRateBurnFeeSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  rate_not?: Maybe<Scalars['BigDecimal']>;\n  rate_gt?: Maybe<Scalars['BigDecimal']>;\n  rate_lt?: Maybe<Scalars['BigDecimal']>;\n  rate_gte?: Maybe<Scalars['BigDecimal']>;\n  rate_lte?: Maybe<Scalars['BigDecimal']>;\n  rate_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum EntranceRateBurnFeeSetting_OrderBy {\n  Id = 'id',\n  Fee = 'fee',\n  Comptroller = 'comptroller',\n  Rate = 'rate',\n  Timestamp = 'timestamp',\n  Events = 'events'\n}\n\nexport type EntranceRateBurnFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {\n  __typename?: 'EntranceRateBurnFeeSettingsAddedEvent';\n  id: Scalars['ID'];\n  comptroller: ComptrollerProxy;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  rate: Scalars['BigDecimal'];\n};\n\nexport type EntranceRateBurnFeeSettingsAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  rate_not?: Maybe<Scalars['BigDecimal']>;\n  rate_gt?: Maybe<Scalars['BigDecimal']>;\n  rate_lt?: Maybe<Scalars['BigDecimal']>;\n  rate_gte?: Maybe<Scalars['BigDecimal']>;\n  rate_lte?: Maybe<Scalars['BigDecimal']>;\n  rate_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum EntranceRateBurnFeeSettingsAddedEvent_OrderBy {\n  Id = 'id',\n  Comptroller = 'comptroller',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Rate = 'rate'\n}\n\nexport type EntranceRateBurnFeeSettledEvent = EventInterface & FundEventInterface & {\n  __typename?: 'EntranceRateBurnFeeSettledEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  sharesQuantity: Scalars['BigDecimal'];\n  payer: Account;\n};\n\nexport type EntranceRateBurnFeeSettledEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  sharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  payer?: Maybe<Scalars['String']>;\n  payer_not?: Maybe<Scalars['String']>;\n  payer_gt?: Maybe<Scalars['String']>;\n  payer_lt?: Maybe<Scalars['String']>;\n  payer_gte?: Maybe<Scalars['String']>;\n  payer_lte?: Maybe<Scalars['String']>;\n  payer_in?: Maybe<Array<Scalars['String']>>;\n  payer_not_in?: Maybe<Array<Scalars['String']>>;\n  payer_contains?: Maybe<Scalars['String']>;\n  payer_not_contains?: Maybe<Scalars['String']>;\n  payer_starts_with?: Maybe<Scalars['String']>;\n  payer_not_starts_with?: Maybe<Scalars['String']>;\n  payer_ends_with?: Maybe<Scalars['String']>;\n  payer_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum EntranceRateBurnFeeSettledEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  SharesQuantity = 'sharesQuantity',\n  Payer = 'payer'\n}\n\nexport type EntranceRateBurnFeeState = FundStateInterface & IndividualFeeStateInterface & {\n  __typename?: 'EntranceRateBurnFeeState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  fee: Fee;\n  lastSettled: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type EntranceRateBurnFeeStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type EntranceRateBurnFeeState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  lastSettled?: Maybe<Scalars['BigInt']>;\n  lastSettled_not?: Maybe<Scalars['BigInt']>;\n  lastSettled_gt?: Maybe<Scalars['BigInt']>;\n  lastSettled_lt?: Maybe<Scalars['BigInt']>;\n  lastSettled_gte?: Maybe<Scalars['BigInt']>;\n  lastSettled_lte?: Maybe<Scalars['BigInt']>;\n  lastSettled_in?: Maybe<Array<Scalars['BigInt']>>;\n  lastSettled_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum EntranceRateBurnFeeState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Fee = 'fee',\n  LastSettled = 'lastSettled',\n  Events = 'events'\n}\n\nexport type EntranceRateDirectFeeSetting = FeeSettingInterface & {\n  __typename?: 'EntranceRateDirectFeeSetting';\n  id: Scalars['ID'];\n  fee: Fee;\n  comptroller: ComptrollerProxy;\n  rate: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type EntranceRateDirectFeeSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type EntranceRateDirectFeeSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  rate_not?: Maybe<Scalars['BigDecimal']>;\n  rate_gt?: Maybe<Scalars['BigDecimal']>;\n  rate_lt?: Maybe<Scalars['BigDecimal']>;\n  rate_gte?: Maybe<Scalars['BigDecimal']>;\n  rate_lte?: Maybe<Scalars['BigDecimal']>;\n  rate_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum EntranceRateDirectFeeSetting_OrderBy {\n  Id = 'id',\n  Fee = 'fee',\n  Comptroller = 'comptroller',\n  Rate = 'rate',\n  Timestamp = 'timestamp',\n  Events = 'events'\n}\n\nexport type EntranceRateDirectFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {\n  __typename?: 'EntranceRateDirectFeeSettingsAddedEvent';\n  id: Scalars['ID'];\n  comptroller: ComptrollerProxy;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  rate: Scalars['BigDecimal'];\n};\n\nexport type EntranceRateDirectFeeSettingsAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  rate_not?: Maybe<Scalars['BigDecimal']>;\n  rate_gt?: Maybe<Scalars['BigDecimal']>;\n  rate_lt?: Maybe<Scalars['BigDecimal']>;\n  rate_gte?: Maybe<Scalars['BigDecimal']>;\n  rate_lte?: Maybe<Scalars['BigDecimal']>;\n  rate_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum EntranceRateDirectFeeSettingsAddedEvent_OrderBy {\n  Id = 'id',\n  Comptroller = 'comptroller',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Rate = 'rate'\n}\n\nexport type EntranceRateDirectFeeSettledEvent = EventInterface & FundEventInterface & {\n  __typename?: 'EntranceRateDirectFeeSettledEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  sharesQuantity: Scalars['BigDecimal'];\n  payer: Account;\n};\n\nexport type EntranceRateDirectFeeSettledEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  sharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  payer?: Maybe<Scalars['String']>;\n  payer_not?: Maybe<Scalars['String']>;\n  payer_gt?: Maybe<Scalars['String']>;\n  payer_lt?: Maybe<Scalars['String']>;\n  payer_gte?: Maybe<Scalars['String']>;\n  payer_lte?: Maybe<Scalars['String']>;\n  payer_in?: Maybe<Array<Scalars['String']>>;\n  payer_not_in?: Maybe<Array<Scalars['String']>>;\n  payer_contains?: Maybe<Scalars['String']>;\n  payer_not_contains?: Maybe<Scalars['String']>;\n  payer_starts_with?: Maybe<Scalars['String']>;\n  payer_not_starts_with?: Maybe<Scalars['String']>;\n  payer_ends_with?: Maybe<Scalars['String']>;\n  payer_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum EntranceRateDirectFeeSettledEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  SharesQuantity = 'sharesQuantity',\n  Payer = 'payer'\n}\n\nexport type EntranceRateDirectFeeState = FundStateInterface & IndividualFeeStateInterface & {\n  __typename?: 'EntranceRateDirectFeeState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  fee: Fee;\n  lastSettled: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type EntranceRateDirectFeeStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type EntranceRateDirectFeeState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  lastSettled?: Maybe<Scalars['BigInt']>;\n  lastSettled_not?: Maybe<Scalars['BigInt']>;\n  lastSettled_gt?: Maybe<Scalars['BigInt']>;\n  lastSettled_lt?: Maybe<Scalars['BigInt']>;\n  lastSettled_gte?: Maybe<Scalars['BigInt']>;\n  lastSettled_lte?: Maybe<Scalars['BigInt']>;\n  lastSettled_in?: Maybe<Array<Scalars['BigInt']>>;\n  lastSettled_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum EntranceRateDirectFeeState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Fee = 'fee',\n  LastSettled = 'lastSettled',\n  Events = 'events'\n}\n\nexport type EthUsdAggregatorSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'EthUsdAggregatorSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevEthUsdAggregator: Scalars['String'];\n  nextEthUsdAggregator: Scalars['String'];\n};\n\nexport type EthUsdAggregatorSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_not?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_gt?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_lt?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_gte?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_lte?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_in?: Maybe<Array<Scalars['String']>>;\n  prevEthUsdAggregator_not_in?: Maybe<Array<Scalars['String']>>;\n  prevEthUsdAggregator_contains?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_not_contains?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_starts_with?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_not_starts_with?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_ends_with?: Maybe<Scalars['String']>;\n  prevEthUsdAggregator_not_ends_with?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_not?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_gt?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_lt?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_gte?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_lte?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_in?: Maybe<Array<Scalars['String']>>;\n  nextEthUsdAggregator_not_in?: Maybe<Array<Scalars['String']>>;\n  nextEthUsdAggregator_contains?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_not_contains?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_starts_with?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_not_starts_with?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_ends_with?: Maybe<Scalars['String']>;\n  nextEthUsdAggregator_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum EthUsdAggregatorSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevEthUsdAggregator = 'prevEthUsdAggregator',\n  NextEthUsdAggregator = 'nextEthUsdAggregator'\n}\n\nexport type EventInterface = {\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type EventInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum EventInterface_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type Fee = {\n  __typename?: 'Fee';\n  id: Scalars['ID'];\n  feeManager: FeeManager;\n  identifier: Scalars['String'];\n  settings: Array<FeeSettingInterface>;\n};\n\n\nexport type FeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSettingInterface_Filter>;\n};\n\nexport type FeeDeregisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'FeeDeregisteredEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  fee: Fee;\n  identifier: Scalars['String'];\n};\n\nexport type FeeDeregisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum FeeDeregisteredEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Fee = 'fee',\n  Identifier = 'identifier'\n}\n\nexport type FeeEnabledForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'FeeEnabledForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  fee: Fee;\n  comptrollerProxy: Scalars['String'];\n  settingsData: Scalars['Bytes'];\n};\n\nexport type FeeEnabledForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  settingsData?: Maybe<Scalars['Bytes']>;\n  settingsData_not?: Maybe<Scalars['Bytes']>;\n  settingsData_in?: Maybe<Array<Scalars['Bytes']>>;\n  settingsData_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  settingsData_contains?: Maybe<Scalars['Bytes']>;\n  settingsData_not_contains?: Maybe<Scalars['Bytes']>;\n};\n\nexport enum FeeEnabledForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Fee = 'fee',\n  ComptrollerProxy = 'comptrollerProxy',\n  SettingsData = 'settingsData'\n}\n\nexport enum FeeHook {\n  Continuous = 'Continuous',\n  BuySharesSetup = 'BuySharesSetup',\n  PreBuyShares = 'PreBuyShares',\n  PostBuyShares = 'PostBuyShares',\n  BuySharesCompleted = 'BuySharesCompleted',\n  PreRedeemShares = 'PreRedeemShares',\n  Unknown = 'Unknown'\n}\n\nexport type FeeManager = {\n  __typename?: 'FeeManager';\n  id: Scalars['ID'];\n  release: Release;\n  fees: Array<Fee>;\n};\n\n\nexport type FeeManagerFeesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fee_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fee_Filter>;\n};\n\nexport type FeeManager_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  release?: Maybe<Scalars['String']>;\n  release_not?: Maybe<Scalars['String']>;\n  release_gt?: Maybe<Scalars['String']>;\n  release_lt?: Maybe<Scalars['String']>;\n  release_gte?: Maybe<Scalars['String']>;\n  release_lte?: Maybe<Scalars['String']>;\n  release_in?: Maybe<Array<Scalars['String']>>;\n  release_not_in?: Maybe<Array<Scalars['String']>>;\n  release_contains?: Maybe<Scalars['String']>;\n  release_not_contains?: Maybe<Scalars['String']>;\n  release_starts_with?: Maybe<Scalars['String']>;\n  release_not_starts_with?: Maybe<Scalars['String']>;\n  release_ends_with?: Maybe<Scalars['String']>;\n  release_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum FeeManager_OrderBy {\n  Id = 'id',\n  Release = 'release',\n  Fees = 'fees'\n}\n\nexport type FeeRegisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'FeeRegisteredEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  fee: Fee;\n  identifier: Scalars['String'];\n  implementedHooksForSettle: Array<FeeHook>;\n  implementedHooksForUpdate: Array<FeeHook>;\n  usesGavOnSettle: Scalars['Boolean'];\n  usesGavOnUpdate: Scalars['Boolean'];\n};\n\nexport type FeeRegisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n  implementedHooksForSettle?: Maybe<Array<FeeHook>>;\n  implementedHooksForSettle_not?: Maybe<Array<FeeHook>>;\n  implementedHooksForSettle_contains?: Maybe<Array<FeeHook>>;\n  implementedHooksForSettle_not_contains?: Maybe<Array<FeeHook>>;\n  implementedHooksForUpdate?: Maybe<Array<FeeHook>>;\n  implementedHooksForUpdate_not?: Maybe<Array<FeeHook>>;\n  implementedHooksForUpdate_contains?: Maybe<Array<FeeHook>>;\n  implementedHooksForUpdate_not_contains?: Maybe<Array<FeeHook>>;\n  usesGavOnSettle?: Maybe<Scalars['Boolean']>;\n  usesGavOnSettle_not?: Maybe<Scalars['Boolean']>;\n  usesGavOnSettle_in?: Maybe<Array<Scalars['Boolean']>>;\n  usesGavOnSettle_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  usesGavOnUpdate?: Maybe<Scalars['Boolean']>;\n  usesGavOnUpdate_not?: Maybe<Scalars['Boolean']>;\n  usesGavOnUpdate_in?: Maybe<Array<Scalars['Boolean']>>;\n  usesGavOnUpdate_not_in?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport enum FeeRegisteredEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Fee = 'fee',\n  Identifier = 'identifier',\n  ImplementedHooksForSettle = 'implementedHooksForSettle',\n  ImplementedHooksForUpdate = 'implementedHooksForUpdate',\n  UsesGavOnSettle = 'usesGavOnSettle',\n  UsesGavOnUpdate = 'usesGavOnUpdate'\n}\n\nexport type FeeSettingInterface = {\n  id: Scalars['ID'];\n  fee: Fee;\n  comptroller: ComptrollerProxy;\n  timestamp: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type FeeSettingInterfaceEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type FeeSettingInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum FeeSettingInterface_OrderBy {\n  Id = 'id',\n  Fee = 'fee',\n  Comptroller = 'comptroller',\n  Timestamp = 'timestamp',\n  Events = 'events'\n}\n\nexport type FeeSettledForFundEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {\n  __typename?: 'FeeSettledForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  type: ShareChangeType;\n  investor: Account;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  comptrollerProxy: Scalars['String'];\n  fee: Fee;\n  payer: Scalars['String'];\n  payee: Scalars['String'];\n  settlementType: SettlementType;\n  sharesDue: Scalars['BigDecimal'];\n  fundState: FundState;\n};\n\nexport type FeeSettledForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  payer?: Maybe<Scalars['String']>;\n  payer_not?: Maybe<Scalars['String']>;\n  payer_gt?: Maybe<Scalars['String']>;\n  payer_lt?: Maybe<Scalars['String']>;\n  payer_gte?: Maybe<Scalars['String']>;\n  payer_lte?: Maybe<Scalars['String']>;\n  payer_in?: Maybe<Array<Scalars['String']>>;\n  payer_not_in?: Maybe<Array<Scalars['String']>>;\n  payer_contains?: Maybe<Scalars['String']>;\n  payer_not_contains?: Maybe<Scalars['String']>;\n  payer_starts_with?: Maybe<Scalars['String']>;\n  payer_not_starts_with?: Maybe<Scalars['String']>;\n  payer_ends_with?: Maybe<Scalars['String']>;\n  payer_not_ends_with?: Maybe<Scalars['String']>;\n  payee?: Maybe<Scalars['String']>;\n  payee_not?: Maybe<Scalars['String']>;\n  payee_gt?: Maybe<Scalars['String']>;\n  payee_lt?: Maybe<Scalars['String']>;\n  payee_gte?: Maybe<Scalars['String']>;\n  payee_lte?: Maybe<Scalars['String']>;\n  payee_in?: Maybe<Array<Scalars['String']>>;\n  payee_not_in?: Maybe<Array<Scalars['String']>>;\n  payee_contains?: Maybe<Scalars['String']>;\n  payee_not_contains?: Maybe<Scalars['String']>;\n  payee_starts_with?: Maybe<Scalars['String']>;\n  payee_not_starts_with?: Maybe<Scalars['String']>;\n  payee_ends_with?: Maybe<Scalars['String']>;\n  payee_not_ends_with?: Maybe<Scalars['String']>;\n  settlementType?: Maybe<SettlementType>;\n  settlementType_not?: Maybe<SettlementType>;\n  sharesDue?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_not?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum FeeSettledForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Type = 'type',\n  Investor = 'investor',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  ComptrollerProxy = 'comptrollerProxy',\n  Fee = 'fee',\n  Payer = 'payer',\n  Payee = 'payee',\n  SettlementType = 'settlementType',\n  SharesDue = 'sharesDue',\n  FundState = 'fundState'\n}\n\nexport type FeeSharesChangeInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  investor: Account;\n  timestamp: Scalars['BigInt'];\n  type: ShareChangeType;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  fundState: FundState;\n  transaction: Transaction;\n};\n\nexport type FeeSharesChangeInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum FeeSharesChangeInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Investor = 'investor',\n  Timestamp = 'timestamp',\n  Type = 'type',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  FundState = 'fundState',\n  Transaction = 'transaction'\n}\n\nexport type FeeState = FundStateInterface & {\n  __typename?: 'FeeState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  feeStates: Array<IndividualFeeStateInterface>;\n  events: Array<FundEventInterface>;\n};\n\n\nexport type FeeStateFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IndividualFeeStateInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IndividualFeeStateInterface_Filter>;\n};\n\n\nexport type FeeStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type FeeState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeStates?: Maybe<Array<Scalars['String']>>;\n  feeStates_not?: Maybe<Array<Scalars['String']>>;\n  feeStates_contains?: Maybe<Array<Scalars['String']>>;\n  feeStates_not_contains?: Maybe<Array<Scalars['String']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum FeeState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  FeeStates = 'feeStates',\n  Events = 'events'\n}\n\nexport type Fee_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  feeManager?: Maybe<Scalars['String']>;\n  feeManager_not?: Maybe<Scalars['String']>;\n  feeManager_gt?: Maybe<Scalars['String']>;\n  feeManager_lt?: Maybe<Scalars['String']>;\n  feeManager_gte?: Maybe<Scalars['String']>;\n  feeManager_lte?: Maybe<Scalars['String']>;\n  feeManager_in?: Maybe<Array<Scalars['String']>>;\n  feeManager_not_in?: Maybe<Array<Scalars['String']>>;\n  feeManager_contains?: Maybe<Scalars['String']>;\n  feeManager_not_contains?: Maybe<Scalars['String']>;\n  feeManager_starts_with?: Maybe<Scalars['String']>;\n  feeManager_not_starts_with?: Maybe<Scalars['String']>;\n  feeManager_ends_with?: Maybe<Scalars['String']>;\n  feeManager_not_ends_with?: Maybe<Scalars['String']>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Fee_OrderBy {\n  Id = 'id',\n  FeeManager = 'feeManager',\n  Identifier = 'identifier',\n  Settings = 'settings'\n}\n\nexport type FeesRecipientSetForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'FeesRecipientSetForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  prevFeesRecipient: Scalars['String'];\n  nextFeesRecipient: Scalars['String'];\n};\n\nexport type FeesRecipientSetForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  prevFeesRecipient?: Maybe<Scalars['String']>;\n  prevFeesRecipient_not?: Maybe<Scalars['String']>;\n  prevFeesRecipient_gt?: Maybe<Scalars['String']>;\n  prevFeesRecipient_lt?: Maybe<Scalars['String']>;\n  prevFeesRecipient_gte?: Maybe<Scalars['String']>;\n  prevFeesRecipient_lte?: Maybe<Scalars['String']>;\n  prevFeesRecipient_in?: Maybe<Array<Scalars['String']>>;\n  prevFeesRecipient_not_in?: Maybe<Array<Scalars['String']>>;\n  prevFeesRecipient_contains?: Maybe<Scalars['String']>;\n  prevFeesRecipient_not_contains?: Maybe<Scalars['String']>;\n  prevFeesRecipient_starts_with?: Maybe<Scalars['String']>;\n  prevFeesRecipient_not_starts_with?: Maybe<Scalars['String']>;\n  prevFeesRecipient_ends_with?: Maybe<Scalars['String']>;\n  prevFeesRecipient_not_ends_with?: Maybe<Scalars['String']>;\n  nextFeesRecipient?: Maybe<Scalars['String']>;\n  nextFeesRecipient_not?: Maybe<Scalars['String']>;\n  nextFeesRecipient_gt?: Maybe<Scalars['String']>;\n  nextFeesRecipient_lt?: Maybe<Scalars['String']>;\n  nextFeesRecipient_gte?: Maybe<Scalars['String']>;\n  nextFeesRecipient_lte?: Maybe<Scalars['String']>;\n  nextFeesRecipient_in?: Maybe<Array<Scalars['String']>>;\n  nextFeesRecipient_not_in?: Maybe<Array<Scalars['String']>>;\n  nextFeesRecipient_contains?: Maybe<Scalars['String']>;\n  nextFeesRecipient_not_contains?: Maybe<Scalars['String']>;\n  nextFeesRecipient_starts_with?: Maybe<Scalars['String']>;\n  nextFeesRecipient_not_starts_with?: Maybe<Scalars['String']>;\n  nextFeesRecipient_ends_with?: Maybe<Scalars['String']>;\n  nextFeesRecipient_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum FeesRecipientSetForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  PrevFeesRecipient = 'prevFeesRecipient',\n  NextFeesRecipient = 'nextFeesRecipient'\n}\n\nexport type Fund = {\n  __typename?: 'Fund';\n  id: Scalars['ID'];\n  accessor: ComptrollerProxy;\n  comptrollerProxies: Array<ComptrollerProxy>;\n  name: Scalars['String'];\n  inception: Scalars['BigInt'];\n  creator: Account;\n  release: Release;\n  manager: Account;\n  migrator?: Maybe<Scalars['String']>;\n  lastKnowGavInEth?: Maybe<Scalars['BigDecimal']>;\n  sharesRequestor?: Maybe<SharesRequestor>;\n  trackedAssets: Array<Asset>;\n  trades: Array<Trade>;\n  investments: Array<Investment>;\n  investmentCount: Scalars['Int'];\n  sharesChanges: Array<SharesChangeInterface>;\n  feeSharesChanges: Array<FeeSharesChangeInterface>;\n  investmentSharesChanges: Array<InvestmentSharesChangeInterface>;\n  sharesRequests: Array<SharesRequest>;\n  shares: ShareState;\n  sharesHistory: Array<ShareState>;\n  portfolio: PortfolioState;\n  portfolioHistory: Array<PortfolioState>;\n  feeState: FeeState;\n  feeStateHistory: Array<FeeState>;\n  state: FundState;\n  stateHistory: Array<FundState>;\n  firstInvestmentState?: Maybe<FundState>;\n  hourlyStates: Array<HourlyFundState>;\n  dailyStates: Array<DailyFundState>;\n  monthlyStates: Array<MonthlyFundState>;\n  events: Array<FundEventInterface>;\n  migrations?: Maybe<Array<Migration>>;\n};\n\n\nexport type FundComptrollerProxiesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerProxy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerProxy_Filter>;\n};\n\n\nexport type FundTrackedAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\n\nexport type FundTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Trade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Trade_Filter>;\n};\n\n\nexport type FundInvestmentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Investment_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Investment_Filter>;\n};\n\n\nexport type FundSharesChangesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesChangeInterface_Filter>;\n};\n\n\nexport type FundFeeSharesChangesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSharesChangeInterface_Filter>;\n};\n\n\nexport type FundInvestmentSharesChangesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestmentSharesChangeInterface_Filter>;\n};\n\n\nexport type FundSharesRequestsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequest_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequest_Filter>;\n};\n\n\nexport type FundSharesHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ShareState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ShareState_Filter>;\n};\n\n\nexport type FundPortfolioHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PortfolioState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PortfolioState_Filter>;\n};\n\n\nexport type FundFeeStateHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeState_Filter>;\n};\n\n\nexport type FundStateHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundState_Filter>;\n};\n\n\nexport type FundHourlyStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyFundState_Filter>;\n};\n\n\nexport type FundDailyStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyFundState_Filter>;\n};\n\n\nexport type FundMonthlyStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyFundState_Filter>;\n};\n\n\nexport type FundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\n\nexport type FundMigrationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Migration_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Migration_Filter>;\n};\n\nexport type FundDeployerSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'FundDeployerSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  nextFundDeployer: Scalars['String'];\n  prevFundDeployer?: Maybe<Scalars['String']>;\n};\n\nexport type FundDeployerSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  nextFundDeployer?: Maybe<Scalars['String']>;\n  nextFundDeployer_not?: Maybe<Scalars['String']>;\n  nextFundDeployer_gt?: Maybe<Scalars['String']>;\n  nextFundDeployer_lt?: Maybe<Scalars['String']>;\n  nextFundDeployer_gte?: Maybe<Scalars['String']>;\n  nextFundDeployer_lte?: Maybe<Scalars['String']>;\n  nextFundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  nextFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  nextFundDeployer_contains?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_contains?: Maybe<Scalars['String']>;\n  nextFundDeployer_starts_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_ends_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n  prevFundDeployer?: Maybe<Scalars['String']>;\n  prevFundDeployer_not?: Maybe<Scalars['String']>;\n  prevFundDeployer_gt?: Maybe<Scalars['String']>;\n  prevFundDeployer_lt?: Maybe<Scalars['String']>;\n  prevFundDeployer_gte?: Maybe<Scalars['String']>;\n  prevFundDeployer_lte?: Maybe<Scalars['String']>;\n  prevFundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  prevFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  prevFundDeployer_contains?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_contains?: Maybe<Scalars['String']>;\n  prevFundDeployer_starts_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_ends_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum FundDeployerSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  NextFundDeployer = 'nextFundDeployer',\n  PrevFundDeployer = 'prevFundDeployer'\n}\n\nexport type FundEventInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type FundEventInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum FundEventInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type FundState = FundStateInterface & {\n  __typename?: 'FundState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  shares: ShareState;\n  portfolio: PortfolioState;\n  feeState: FeeState;\n  currencyPrices: Array<CurrencyPrice>;\n  investmentCount: Scalars['Int'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type FundStateCurrencyPricesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CurrencyPrice_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CurrencyPrice_Filter>;\n};\n\n\nexport type FundStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type FundStateInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type FundStateInterfaceEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type FundStateInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum FundStateInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Events = 'events'\n}\n\nexport type FundState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  shares?: Maybe<Scalars['String']>;\n  shares_not?: Maybe<Scalars['String']>;\n  shares_gt?: Maybe<Scalars['String']>;\n  shares_lt?: Maybe<Scalars['String']>;\n  shares_gte?: Maybe<Scalars['String']>;\n  shares_lte?: Maybe<Scalars['String']>;\n  shares_in?: Maybe<Array<Scalars['String']>>;\n  shares_not_in?: Maybe<Array<Scalars['String']>>;\n  shares_contains?: Maybe<Scalars['String']>;\n  shares_not_contains?: Maybe<Scalars['String']>;\n  shares_starts_with?: Maybe<Scalars['String']>;\n  shares_not_starts_with?: Maybe<Scalars['String']>;\n  shares_ends_with?: Maybe<Scalars['String']>;\n  shares_not_ends_with?: Maybe<Scalars['String']>;\n  portfolio?: Maybe<Scalars['String']>;\n  portfolio_not?: Maybe<Scalars['String']>;\n  portfolio_gt?: Maybe<Scalars['String']>;\n  portfolio_lt?: Maybe<Scalars['String']>;\n  portfolio_gte?: Maybe<Scalars['String']>;\n  portfolio_lte?: Maybe<Scalars['String']>;\n  portfolio_in?: Maybe<Array<Scalars['String']>>;\n  portfolio_not_in?: Maybe<Array<Scalars['String']>>;\n  portfolio_contains?: Maybe<Scalars['String']>;\n  portfolio_not_contains?: Maybe<Scalars['String']>;\n  portfolio_starts_with?: Maybe<Scalars['String']>;\n  portfolio_not_starts_with?: Maybe<Scalars['String']>;\n  portfolio_ends_with?: Maybe<Scalars['String']>;\n  portfolio_not_ends_with?: Maybe<Scalars['String']>;\n  feeState?: Maybe<Scalars['String']>;\n  feeState_not?: Maybe<Scalars['String']>;\n  feeState_gt?: Maybe<Scalars['String']>;\n  feeState_lt?: Maybe<Scalars['String']>;\n  feeState_gte?: Maybe<Scalars['String']>;\n  feeState_lte?: Maybe<Scalars['String']>;\n  feeState_in?: Maybe<Array<Scalars['String']>>;\n  feeState_not_in?: Maybe<Array<Scalars['String']>>;\n  feeState_contains?: Maybe<Scalars['String']>;\n  feeState_not_contains?: Maybe<Scalars['String']>;\n  feeState_starts_with?: Maybe<Scalars['String']>;\n  feeState_not_starts_with?: Maybe<Scalars['String']>;\n  feeState_ends_with?: Maybe<Scalars['String']>;\n  feeState_not_ends_with?: Maybe<Scalars['String']>;\n  currencyPrices?: Maybe<Array<Scalars['String']>>;\n  currencyPrices_not?: Maybe<Array<Scalars['String']>>;\n  currencyPrices_contains?: Maybe<Array<Scalars['String']>>;\n  currencyPrices_not_contains?: Maybe<Array<Scalars['String']>>;\n  investmentCount?: Maybe<Scalars['Int']>;\n  investmentCount_not?: Maybe<Scalars['Int']>;\n  investmentCount_gt?: Maybe<Scalars['Int']>;\n  investmentCount_lt?: Maybe<Scalars['Int']>;\n  investmentCount_gte?: Maybe<Scalars['Int']>;\n  investmentCount_lte?: Maybe<Scalars['Int']>;\n  investmentCount_in?: Maybe<Array<Scalars['Int']>>;\n  investmentCount_not_in?: Maybe<Array<Scalars['Int']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum FundState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Shares = 'shares',\n  Portfolio = 'portfolio',\n  FeeState = 'feeState',\n  CurrencyPrices = 'currencyPrices',\n  InvestmentCount = 'investmentCount',\n  Events = 'events'\n}\n\nexport type Fund_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  accessor?: Maybe<Scalars['String']>;\n  accessor_not?: Maybe<Scalars['String']>;\n  accessor_gt?: Maybe<Scalars['String']>;\n  accessor_lt?: Maybe<Scalars['String']>;\n  accessor_gte?: Maybe<Scalars['String']>;\n  accessor_lte?: Maybe<Scalars['String']>;\n  accessor_in?: Maybe<Array<Scalars['String']>>;\n  accessor_not_in?: Maybe<Array<Scalars['String']>>;\n  accessor_contains?: Maybe<Scalars['String']>;\n  accessor_not_contains?: Maybe<Scalars['String']>;\n  accessor_starts_with?: Maybe<Scalars['String']>;\n  accessor_not_starts_with?: Maybe<Scalars['String']>;\n  accessor_ends_with?: Maybe<Scalars['String']>;\n  accessor_not_ends_with?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  inception?: Maybe<Scalars['BigInt']>;\n  inception_not?: Maybe<Scalars['BigInt']>;\n  inception_gt?: Maybe<Scalars['BigInt']>;\n  inception_lt?: Maybe<Scalars['BigInt']>;\n  inception_gte?: Maybe<Scalars['BigInt']>;\n  inception_lte?: Maybe<Scalars['BigInt']>;\n  inception_in?: Maybe<Array<Scalars['BigInt']>>;\n  inception_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  creator?: Maybe<Scalars['String']>;\n  creator_not?: Maybe<Scalars['String']>;\n  creator_gt?: Maybe<Scalars['String']>;\n  creator_lt?: Maybe<Scalars['String']>;\n  creator_gte?: Maybe<Scalars['String']>;\n  creator_lte?: Maybe<Scalars['String']>;\n  creator_in?: Maybe<Array<Scalars['String']>>;\n  creator_not_in?: Maybe<Array<Scalars['String']>>;\n  creator_contains?: Maybe<Scalars['String']>;\n  creator_not_contains?: Maybe<Scalars['String']>;\n  creator_starts_with?: Maybe<Scalars['String']>;\n  creator_not_starts_with?: Maybe<Scalars['String']>;\n  creator_ends_with?: Maybe<Scalars['String']>;\n  creator_not_ends_with?: Maybe<Scalars['String']>;\n  release?: Maybe<Scalars['String']>;\n  release_not?: Maybe<Scalars['String']>;\n  release_gt?: Maybe<Scalars['String']>;\n  release_lt?: Maybe<Scalars['String']>;\n  release_gte?: Maybe<Scalars['String']>;\n  release_lte?: Maybe<Scalars['String']>;\n  release_in?: Maybe<Array<Scalars['String']>>;\n  release_not_in?: Maybe<Array<Scalars['String']>>;\n  release_contains?: Maybe<Scalars['String']>;\n  release_not_contains?: Maybe<Scalars['String']>;\n  release_starts_with?: Maybe<Scalars['String']>;\n  release_not_starts_with?: Maybe<Scalars['String']>;\n  release_ends_with?: Maybe<Scalars['String']>;\n  release_not_ends_with?: Maybe<Scalars['String']>;\n  manager?: Maybe<Scalars['String']>;\n  manager_not?: Maybe<Scalars['String']>;\n  manager_gt?: Maybe<Scalars['String']>;\n  manager_lt?: Maybe<Scalars['String']>;\n  manager_gte?: Maybe<Scalars['String']>;\n  manager_lte?: Maybe<Scalars['String']>;\n  manager_in?: Maybe<Array<Scalars['String']>>;\n  manager_not_in?: Maybe<Array<Scalars['String']>>;\n  manager_contains?: Maybe<Scalars['String']>;\n  manager_not_contains?: Maybe<Scalars['String']>;\n  manager_starts_with?: Maybe<Scalars['String']>;\n  manager_not_starts_with?: Maybe<Scalars['String']>;\n  manager_ends_with?: Maybe<Scalars['String']>;\n  manager_not_ends_with?: Maybe<Scalars['String']>;\n  migrator?: Maybe<Scalars['String']>;\n  migrator_not?: Maybe<Scalars['String']>;\n  migrator_gt?: Maybe<Scalars['String']>;\n  migrator_lt?: Maybe<Scalars['String']>;\n  migrator_gte?: Maybe<Scalars['String']>;\n  migrator_lte?: Maybe<Scalars['String']>;\n  migrator_in?: Maybe<Array<Scalars['String']>>;\n  migrator_not_in?: Maybe<Array<Scalars['String']>>;\n  migrator_contains?: Maybe<Scalars['String']>;\n  migrator_not_contains?: Maybe<Scalars['String']>;\n  migrator_starts_with?: Maybe<Scalars['String']>;\n  migrator_not_starts_with?: Maybe<Scalars['String']>;\n  migrator_ends_with?: Maybe<Scalars['String']>;\n  migrator_not_ends_with?: Maybe<Scalars['String']>;\n  lastKnowGavInEth?: Maybe<Scalars['BigDecimal']>;\n  lastKnowGavInEth_not?: Maybe<Scalars['BigDecimal']>;\n  lastKnowGavInEth_gt?: Maybe<Scalars['BigDecimal']>;\n  lastKnowGavInEth_lt?: Maybe<Scalars['BigDecimal']>;\n  lastKnowGavInEth_gte?: Maybe<Scalars['BigDecimal']>;\n  lastKnowGavInEth_lte?: Maybe<Scalars['BigDecimal']>;\n  lastKnowGavInEth_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  lastKnowGavInEth_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  trackedAssets?: Maybe<Array<Scalars['String']>>;\n  trackedAssets_not?: Maybe<Array<Scalars['String']>>;\n  trackedAssets_contains?: Maybe<Array<Scalars['String']>>;\n  trackedAssets_not_contains?: Maybe<Array<Scalars['String']>>;\n  investmentCount?: Maybe<Scalars['Int']>;\n  investmentCount_not?: Maybe<Scalars['Int']>;\n  investmentCount_gt?: Maybe<Scalars['Int']>;\n  investmentCount_lt?: Maybe<Scalars['Int']>;\n  investmentCount_gte?: Maybe<Scalars['Int']>;\n  investmentCount_lte?: Maybe<Scalars['Int']>;\n  investmentCount_in?: Maybe<Array<Scalars['Int']>>;\n  investmentCount_not_in?: Maybe<Array<Scalars['Int']>>;\n  shares?: Maybe<Scalars['String']>;\n  shares_not?: Maybe<Scalars['String']>;\n  shares_gt?: Maybe<Scalars['String']>;\n  shares_lt?: Maybe<Scalars['String']>;\n  shares_gte?: Maybe<Scalars['String']>;\n  shares_lte?: Maybe<Scalars['String']>;\n  shares_in?: Maybe<Array<Scalars['String']>>;\n  shares_not_in?: Maybe<Array<Scalars['String']>>;\n  shares_contains?: Maybe<Scalars['String']>;\n  shares_not_contains?: Maybe<Scalars['String']>;\n  shares_starts_with?: Maybe<Scalars['String']>;\n  shares_not_starts_with?: Maybe<Scalars['String']>;\n  shares_ends_with?: Maybe<Scalars['String']>;\n  shares_not_ends_with?: Maybe<Scalars['String']>;\n  portfolio?: Maybe<Scalars['String']>;\n  portfolio_not?: Maybe<Scalars['String']>;\n  portfolio_gt?: Maybe<Scalars['String']>;\n  portfolio_lt?: Maybe<Scalars['String']>;\n  portfolio_gte?: Maybe<Scalars['String']>;\n  portfolio_lte?: Maybe<Scalars['String']>;\n  portfolio_in?: Maybe<Array<Scalars['String']>>;\n  portfolio_not_in?: Maybe<Array<Scalars['String']>>;\n  portfolio_contains?: Maybe<Scalars['String']>;\n  portfolio_not_contains?: Maybe<Scalars['String']>;\n  portfolio_starts_with?: Maybe<Scalars['String']>;\n  portfolio_not_starts_with?: Maybe<Scalars['String']>;\n  portfolio_ends_with?: Maybe<Scalars['String']>;\n  portfolio_not_ends_with?: Maybe<Scalars['String']>;\n  feeState?: Maybe<Scalars['String']>;\n  feeState_not?: Maybe<Scalars['String']>;\n  feeState_gt?: Maybe<Scalars['String']>;\n  feeState_lt?: Maybe<Scalars['String']>;\n  feeState_gte?: Maybe<Scalars['String']>;\n  feeState_lte?: Maybe<Scalars['String']>;\n  feeState_in?: Maybe<Array<Scalars['String']>>;\n  feeState_not_in?: Maybe<Array<Scalars['String']>>;\n  feeState_contains?: Maybe<Scalars['String']>;\n  feeState_not_contains?: Maybe<Scalars['String']>;\n  feeState_starts_with?: Maybe<Scalars['String']>;\n  feeState_not_starts_with?: Maybe<Scalars['String']>;\n  feeState_ends_with?: Maybe<Scalars['String']>;\n  feeState_not_ends_with?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  state_not?: Maybe<Scalars['String']>;\n  state_gt?: Maybe<Scalars['String']>;\n  state_lt?: Maybe<Scalars['String']>;\n  state_gte?: Maybe<Scalars['String']>;\n  state_lte?: Maybe<Scalars['String']>;\n  state_in?: Maybe<Array<Scalars['String']>>;\n  state_not_in?: Maybe<Array<Scalars['String']>>;\n  state_contains?: Maybe<Scalars['String']>;\n  state_not_contains?: Maybe<Scalars['String']>;\n  state_starts_with?: Maybe<Scalars['String']>;\n  state_not_starts_with?: Maybe<Scalars['String']>;\n  state_ends_with?: Maybe<Scalars['String']>;\n  state_not_ends_with?: Maybe<Scalars['String']>;\n  firstInvestmentState?: Maybe<Scalars['String']>;\n  firstInvestmentState_not?: Maybe<Scalars['String']>;\n  firstInvestmentState_gt?: Maybe<Scalars['String']>;\n  firstInvestmentState_lt?: Maybe<Scalars['String']>;\n  firstInvestmentState_gte?: Maybe<Scalars['String']>;\n  firstInvestmentState_lte?: Maybe<Scalars['String']>;\n  firstInvestmentState_in?: Maybe<Array<Scalars['String']>>;\n  firstInvestmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  firstInvestmentState_contains?: Maybe<Scalars['String']>;\n  firstInvestmentState_not_contains?: Maybe<Scalars['String']>;\n  firstInvestmentState_starts_with?: Maybe<Scalars['String']>;\n  firstInvestmentState_not_starts_with?: Maybe<Scalars['String']>;\n  firstInvestmentState_ends_with?: Maybe<Scalars['String']>;\n  firstInvestmentState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Fund_OrderBy {\n  Id = 'id',\n  Accessor = 'accessor',\n  ComptrollerProxies = 'comptrollerProxies',\n  Name = 'name',\n  Inception = 'inception',\n  Creator = 'creator',\n  Release = 'release',\n  Manager = 'manager',\n  Migrator = 'migrator',\n  LastKnowGavInEth = 'lastKnowGavInEth',\n  SharesRequestor = 'sharesRequestor',\n  TrackedAssets = 'trackedAssets',\n  Trades = 'trades',\n  Investments = 'investments',\n  InvestmentCount = 'investmentCount',\n  SharesChanges = 'sharesChanges',\n  FeeSharesChanges = 'feeSharesChanges',\n  InvestmentSharesChanges = 'investmentSharesChanges',\n  SharesRequests = 'sharesRequests',\n  Shares = 'shares',\n  SharesHistory = 'sharesHistory',\n  Portfolio = 'portfolio',\n  PortfolioHistory = 'portfolioHistory',\n  FeeState = 'feeState',\n  FeeStateHistory = 'feeStateHistory',\n  State = 'state',\n  StateHistory = 'stateHistory',\n  FirstInvestmentState = 'firstInvestmentState',\n  HourlyStates = 'hourlyStates',\n  DailyStates = 'dailyStates',\n  MonthlyStates = 'monthlyStates',\n  Events = 'events',\n  Migrations = 'migrations'\n}\n\nexport type GuaranteedRedemption = {\n  __typename?: 'GuaranteedRedemption';\n  id: Scalars['ID'];\n  adapters: Array<IntegrationAdapter>;\n  buffer: Scalars['BigInt'];\n};\n\n\nexport type GuaranteedRedemptionAdaptersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\nexport type GuaranteedRedemptionAdapterAddedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'GuaranteedRedemptionAdapterAddedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  adapter: IntegrationAdapter;\n};\n\nexport type GuaranteedRedemptionAdapterAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum GuaranteedRedemptionAdapterAddedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Adapter = 'adapter'\n}\n\nexport type GuaranteedRedemptionAdapterRemovedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'GuaranteedRedemptionAdapterRemovedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  adapter: IntegrationAdapter;\n};\n\nexport type GuaranteedRedemptionAdapterRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum GuaranteedRedemptionAdapterRemovedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Adapter = 'adapter'\n}\n\nexport type GuaranteedRedemptionFundSettingsSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'GuaranteedRedemptionFundSettingsSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  startTimestamp: Scalars['BigInt'];\n  duration: Scalars['BigInt'];\n};\n\nexport type GuaranteedRedemptionFundSettingsSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  startTimestamp?: Maybe<Scalars['BigInt']>;\n  startTimestamp_not?: Maybe<Scalars['BigInt']>;\n  startTimestamp_gt?: Maybe<Scalars['BigInt']>;\n  startTimestamp_lt?: Maybe<Scalars['BigInt']>;\n  startTimestamp_gte?: Maybe<Scalars['BigInt']>;\n  startTimestamp_lte?: Maybe<Scalars['BigInt']>;\n  startTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  startTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  duration?: Maybe<Scalars['BigInt']>;\n  duration_not?: Maybe<Scalars['BigInt']>;\n  duration_gt?: Maybe<Scalars['BigInt']>;\n  duration_lt?: Maybe<Scalars['BigInt']>;\n  duration_gte?: Maybe<Scalars['BigInt']>;\n  duration_lte?: Maybe<Scalars['BigInt']>;\n  duration_in?: Maybe<Array<Scalars['BigInt']>>;\n  duration_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum GuaranteedRedemptionFundSettingsSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  StartTimestamp = 'startTimestamp',\n  Duration = 'duration'\n}\n\nexport type GuaranteedRedemptionRedemptionWindowBufferSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'GuaranteedRedemptionRedemptionWindowBufferSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevBuffer: Scalars['BigInt'];\n  nextBuffer: Scalars['BigInt'];\n};\n\nexport type GuaranteedRedemptionRedemptionWindowBufferSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevBuffer?: Maybe<Scalars['BigInt']>;\n  prevBuffer_not?: Maybe<Scalars['BigInt']>;\n  prevBuffer_gt?: Maybe<Scalars['BigInt']>;\n  prevBuffer_lt?: Maybe<Scalars['BigInt']>;\n  prevBuffer_gte?: Maybe<Scalars['BigInt']>;\n  prevBuffer_lte?: Maybe<Scalars['BigInt']>;\n  prevBuffer_in?: Maybe<Array<Scalars['BigInt']>>;\n  prevBuffer_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  nextBuffer?: Maybe<Scalars['BigInt']>;\n  nextBuffer_not?: Maybe<Scalars['BigInt']>;\n  nextBuffer_gt?: Maybe<Scalars['BigInt']>;\n  nextBuffer_lt?: Maybe<Scalars['BigInt']>;\n  nextBuffer_gte?: Maybe<Scalars['BigInt']>;\n  nextBuffer_lte?: Maybe<Scalars['BigInt']>;\n  nextBuffer_in?: Maybe<Array<Scalars['BigInt']>>;\n  nextBuffer_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum GuaranteedRedemptionRedemptionWindowBufferSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevBuffer = 'prevBuffer',\n  NextBuffer = 'nextBuffer'\n}\n\nexport type GuaranteedRedemptionSetting = PolicySettingInterface & {\n  __typename?: 'GuaranteedRedemptionSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  startTimestamp: Scalars['BigInt'];\n  duration: Scalars['BigInt'];\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type GuaranteedRedemptionSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type GuaranteedRedemptionSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  startTimestamp?: Maybe<Scalars['BigInt']>;\n  startTimestamp_not?: Maybe<Scalars['BigInt']>;\n  startTimestamp_gt?: Maybe<Scalars['BigInt']>;\n  startTimestamp_lt?: Maybe<Scalars['BigInt']>;\n  startTimestamp_gte?: Maybe<Scalars['BigInt']>;\n  startTimestamp_lte?: Maybe<Scalars['BigInt']>;\n  startTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  startTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  duration?: Maybe<Scalars['BigInt']>;\n  duration_not?: Maybe<Scalars['BigInt']>;\n  duration_gt?: Maybe<Scalars['BigInt']>;\n  duration_lt?: Maybe<Scalars['BigInt']>;\n  duration_gte?: Maybe<Scalars['BigInt']>;\n  duration_lte?: Maybe<Scalars['BigInt']>;\n  duration_in?: Maybe<Array<Scalars['BigInt']>>;\n  duration_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum GuaranteedRedemptionSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  StartTimestamp = 'startTimestamp',\n  Duration = 'duration',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type GuaranteedRedemption_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  adapters?: Maybe<Array<Scalars['String']>>;\n  adapters_not?: Maybe<Array<Scalars['String']>>;\n  adapters_contains?: Maybe<Array<Scalars['String']>>;\n  adapters_not_contains?: Maybe<Array<Scalars['String']>>;\n  buffer?: Maybe<Scalars['BigInt']>;\n  buffer_not?: Maybe<Scalars['BigInt']>;\n  buffer_gt?: Maybe<Scalars['BigInt']>;\n  buffer_lt?: Maybe<Scalars['BigInt']>;\n  buffer_gte?: Maybe<Scalars['BigInt']>;\n  buffer_lte?: Maybe<Scalars['BigInt']>;\n  buffer_in?: Maybe<Array<Scalars['BigInt']>>;\n  buffer_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum GuaranteedRedemption_OrderBy {\n  Id = 'id',\n  Adapters = 'adapters',\n  Buffer = 'buffer'\n}\n\nexport type HoldingState = FundStateInterface & {\n  __typename?: 'HoldingState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  asset: Asset;\n  price?: Maybe<AssetPrice>;\n  amount: Scalars['BigDecimal'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type HoldingStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type HoldingState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['String']>;\n  price_not?: Maybe<Scalars['String']>;\n  price_gt?: Maybe<Scalars['String']>;\n  price_lt?: Maybe<Scalars['String']>;\n  price_gte?: Maybe<Scalars['String']>;\n  price_lte?: Maybe<Scalars['String']>;\n  price_in?: Maybe<Array<Scalars['String']>>;\n  price_not_in?: Maybe<Array<Scalars['String']>>;\n  price_contains?: Maybe<Scalars['String']>;\n  price_not_contains?: Maybe<Scalars['String']>;\n  price_starts_with?: Maybe<Scalars['String']>;\n  price_not_starts_with?: Maybe<Scalars['String']>;\n  price_ends_with?: Maybe<Scalars['String']>;\n  price_not_ends_with?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['BigDecimal']>;\n  amount_not?: Maybe<Scalars['BigDecimal']>;\n  amount_gt?: Maybe<Scalars['BigDecimal']>;\n  amount_lt?: Maybe<Scalars['BigDecimal']>;\n  amount_gte?: Maybe<Scalars['BigDecimal']>;\n  amount_lte?: Maybe<Scalars['BigDecimal']>;\n  amount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum HoldingState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Asset = 'asset',\n  Price = 'price',\n  Amount = 'amount',\n  Events = 'events'\n}\n\nexport type HourlyAssetPriceCandle = {\n  __typename?: 'HourlyAssetPriceCandle';\n  id: Scalars['ID'];\n  asset: Asset;\n  group: HourlyPriceCandleGroup;\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  openRef: AssetPrice;\n  close: Scalars['BigDecimal'];\n  closeRef: AssetPrice;\n  low: Scalars['BigDecimal'];\n  lowRef: AssetPrice;\n  high: Scalars['BigDecimal'];\n  highRef: AssetPrice;\n};\n\nexport type HourlyAssetPriceCandle_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  group?: Maybe<Scalars['String']>;\n  group_not?: Maybe<Scalars['String']>;\n  group_gt?: Maybe<Scalars['String']>;\n  group_lt?: Maybe<Scalars['String']>;\n  group_gte?: Maybe<Scalars['String']>;\n  group_lte?: Maybe<Scalars['String']>;\n  group_in?: Maybe<Array<Scalars['String']>>;\n  group_not_in?: Maybe<Array<Scalars['String']>>;\n  group_contains?: Maybe<Scalars['String']>;\n  group_not_contains?: Maybe<Scalars['String']>;\n  group_starts_with?: Maybe<Scalars['String']>;\n  group_not_starts_with?: Maybe<Scalars['String']>;\n  group_ends_with?: Maybe<Scalars['String']>;\n  group_not_ends_with?: Maybe<Scalars['String']>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  openRef?: Maybe<Scalars['String']>;\n  openRef_not?: Maybe<Scalars['String']>;\n  openRef_gt?: Maybe<Scalars['String']>;\n  openRef_lt?: Maybe<Scalars['String']>;\n  openRef_gte?: Maybe<Scalars['String']>;\n  openRef_lte?: Maybe<Scalars['String']>;\n  openRef_in?: Maybe<Array<Scalars['String']>>;\n  openRef_not_in?: Maybe<Array<Scalars['String']>>;\n  openRef_contains?: Maybe<Scalars['String']>;\n  openRef_not_contains?: Maybe<Scalars['String']>;\n  openRef_starts_with?: Maybe<Scalars['String']>;\n  openRef_not_starts_with?: Maybe<Scalars['String']>;\n  openRef_ends_with?: Maybe<Scalars['String']>;\n  openRef_not_ends_with?: Maybe<Scalars['String']>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  closeRef?: Maybe<Scalars['String']>;\n  closeRef_not?: Maybe<Scalars['String']>;\n  closeRef_gt?: Maybe<Scalars['String']>;\n  closeRef_lt?: Maybe<Scalars['String']>;\n  closeRef_gte?: Maybe<Scalars['String']>;\n  closeRef_lte?: Maybe<Scalars['String']>;\n  closeRef_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_not_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_contains?: Maybe<Scalars['String']>;\n  closeRef_not_contains?: Maybe<Scalars['String']>;\n  closeRef_starts_with?: Maybe<Scalars['String']>;\n  closeRef_not_starts_with?: Maybe<Scalars['String']>;\n  closeRef_ends_with?: Maybe<Scalars['String']>;\n  closeRef_not_ends_with?: Maybe<Scalars['String']>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  lowRef?: Maybe<Scalars['String']>;\n  lowRef_not?: Maybe<Scalars['String']>;\n  lowRef_gt?: Maybe<Scalars['String']>;\n  lowRef_lt?: Maybe<Scalars['String']>;\n  lowRef_gte?: Maybe<Scalars['String']>;\n  lowRef_lte?: Maybe<Scalars['String']>;\n  lowRef_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_not_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_contains?: Maybe<Scalars['String']>;\n  lowRef_not_contains?: Maybe<Scalars['String']>;\n  lowRef_starts_with?: Maybe<Scalars['String']>;\n  lowRef_not_starts_with?: Maybe<Scalars['String']>;\n  lowRef_ends_with?: Maybe<Scalars['String']>;\n  lowRef_not_ends_with?: Maybe<Scalars['String']>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highRef?: Maybe<Scalars['String']>;\n  highRef_not?: Maybe<Scalars['String']>;\n  highRef_gt?: Maybe<Scalars['String']>;\n  highRef_lt?: Maybe<Scalars['String']>;\n  highRef_gte?: Maybe<Scalars['String']>;\n  highRef_lte?: Maybe<Scalars['String']>;\n  highRef_in?: Maybe<Array<Scalars['String']>>;\n  highRef_not_in?: Maybe<Array<Scalars['String']>>;\n  highRef_contains?: Maybe<Scalars['String']>;\n  highRef_not_contains?: Maybe<Scalars['String']>;\n  highRef_starts_with?: Maybe<Scalars['String']>;\n  highRef_not_starts_with?: Maybe<Scalars['String']>;\n  highRef_ends_with?: Maybe<Scalars['String']>;\n  highRef_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum HourlyAssetPriceCandle_OrderBy {\n  Id = 'id',\n  Asset = 'asset',\n  Group = 'group',\n  From = 'from',\n  To = 'to',\n  Open = 'open',\n  OpenRef = 'openRef',\n  Close = 'close',\n  CloseRef = 'closeRef',\n  Low = 'low',\n  LowRef = 'lowRef',\n  High = 'high',\n  HighRef = 'highRef'\n}\n\nexport type HourlyCurrencyPriceCandle = {\n  __typename?: 'HourlyCurrencyPriceCandle';\n  id: Scalars['ID'];\n  currency: Currency;\n  group: HourlyPriceCandleGroup;\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  openRef: CurrencyPrice;\n  close: Scalars['BigDecimal'];\n  closeRef: CurrencyPrice;\n  low: Scalars['BigDecimal'];\n  lowRef: CurrencyPrice;\n  high: Scalars['BigDecimal'];\n  highRef: CurrencyPrice;\n};\n\nexport type HourlyCurrencyPriceCandle_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  currency?: Maybe<Scalars['String']>;\n  currency_not?: Maybe<Scalars['String']>;\n  currency_gt?: Maybe<Scalars['String']>;\n  currency_lt?: Maybe<Scalars['String']>;\n  currency_gte?: Maybe<Scalars['String']>;\n  currency_lte?: Maybe<Scalars['String']>;\n  currency_in?: Maybe<Array<Scalars['String']>>;\n  currency_not_in?: Maybe<Array<Scalars['String']>>;\n  currency_contains?: Maybe<Scalars['String']>;\n  currency_not_contains?: Maybe<Scalars['String']>;\n  currency_starts_with?: Maybe<Scalars['String']>;\n  currency_not_starts_with?: Maybe<Scalars['String']>;\n  currency_ends_with?: Maybe<Scalars['String']>;\n  currency_not_ends_with?: Maybe<Scalars['String']>;\n  group?: Maybe<Scalars['String']>;\n  group_not?: Maybe<Scalars['String']>;\n  group_gt?: Maybe<Scalars['String']>;\n  group_lt?: Maybe<Scalars['String']>;\n  group_gte?: Maybe<Scalars['String']>;\n  group_lte?: Maybe<Scalars['String']>;\n  group_in?: Maybe<Array<Scalars['String']>>;\n  group_not_in?: Maybe<Array<Scalars['String']>>;\n  group_contains?: Maybe<Scalars['String']>;\n  group_not_contains?: Maybe<Scalars['String']>;\n  group_starts_with?: Maybe<Scalars['String']>;\n  group_not_starts_with?: Maybe<Scalars['String']>;\n  group_ends_with?: Maybe<Scalars['String']>;\n  group_not_ends_with?: Maybe<Scalars['String']>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  openRef?: Maybe<Scalars['String']>;\n  openRef_not?: Maybe<Scalars['String']>;\n  openRef_gt?: Maybe<Scalars['String']>;\n  openRef_lt?: Maybe<Scalars['String']>;\n  openRef_gte?: Maybe<Scalars['String']>;\n  openRef_lte?: Maybe<Scalars['String']>;\n  openRef_in?: Maybe<Array<Scalars['String']>>;\n  openRef_not_in?: Maybe<Array<Scalars['String']>>;\n  openRef_contains?: Maybe<Scalars['String']>;\n  openRef_not_contains?: Maybe<Scalars['String']>;\n  openRef_starts_with?: Maybe<Scalars['String']>;\n  openRef_not_starts_with?: Maybe<Scalars['String']>;\n  openRef_ends_with?: Maybe<Scalars['String']>;\n  openRef_not_ends_with?: Maybe<Scalars['String']>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  closeRef?: Maybe<Scalars['String']>;\n  closeRef_not?: Maybe<Scalars['String']>;\n  closeRef_gt?: Maybe<Scalars['String']>;\n  closeRef_lt?: Maybe<Scalars['String']>;\n  closeRef_gte?: Maybe<Scalars['String']>;\n  closeRef_lte?: Maybe<Scalars['String']>;\n  closeRef_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_not_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_contains?: Maybe<Scalars['String']>;\n  closeRef_not_contains?: Maybe<Scalars['String']>;\n  closeRef_starts_with?: Maybe<Scalars['String']>;\n  closeRef_not_starts_with?: Maybe<Scalars['String']>;\n  closeRef_ends_with?: Maybe<Scalars['String']>;\n  closeRef_not_ends_with?: Maybe<Scalars['String']>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  lowRef?: Maybe<Scalars['String']>;\n  lowRef_not?: Maybe<Scalars['String']>;\n  lowRef_gt?: Maybe<Scalars['String']>;\n  lowRef_lt?: Maybe<Scalars['String']>;\n  lowRef_gte?: Maybe<Scalars['String']>;\n  lowRef_lte?: Maybe<Scalars['String']>;\n  lowRef_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_not_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_contains?: Maybe<Scalars['String']>;\n  lowRef_not_contains?: Maybe<Scalars['String']>;\n  lowRef_starts_with?: Maybe<Scalars['String']>;\n  lowRef_not_starts_with?: Maybe<Scalars['String']>;\n  lowRef_ends_with?: Maybe<Scalars['String']>;\n  lowRef_not_ends_with?: Maybe<Scalars['String']>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highRef?: Maybe<Scalars['String']>;\n  highRef_not?: Maybe<Scalars['String']>;\n  highRef_gt?: Maybe<Scalars['String']>;\n  highRef_lt?: Maybe<Scalars['String']>;\n  highRef_gte?: Maybe<Scalars['String']>;\n  highRef_lte?: Maybe<Scalars['String']>;\n  highRef_in?: Maybe<Array<Scalars['String']>>;\n  highRef_not_in?: Maybe<Array<Scalars['String']>>;\n  highRef_contains?: Maybe<Scalars['String']>;\n  highRef_not_contains?: Maybe<Scalars['String']>;\n  highRef_starts_with?: Maybe<Scalars['String']>;\n  highRef_not_starts_with?: Maybe<Scalars['String']>;\n  highRef_ends_with?: Maybe<Scalars['String']>;\n  highRef_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum HourlyCurrencyPriceCandle_OrderBy {\n  Id = 'id',\n  Currency = 'currency',\n  Group = 'group',\n  From = 'from',\n  To = 'to',\n  Open = 'open',\n  OpenRef = 'openRef',\n  Close = 'close',\n  CloseRef = 'closeRef',\n  Low = 'low',\n  LowRef = 'lowRef',\n  High = 'high',\n  HighRef = 'highRef'\n}\n\nexport type HourlyFundState = PeriodicFundStateInterface & {\n  __typename?: 'HourlyFundState';\n  id: Scalars['ID'];\n  fund: Fund;\n  start: Scalars['BigInt'];\n  end: Scalars['BigInt'];\n  first: FundState;\n  last: FundState;\n};\n\nexport type HourlyFundState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  start?: Maybe<Scalars['BigInt']>;\n  start_not?: Maybe<Scalars['BigInt']>;\n  start_gt?: Maybe<Scalars['BigInt']>;\n  start_lt?: Maybe<Scalars['BigInt']>;\n  start_gte?: Maybe<Scalars['BigInt']>;\n  start_lte?: Maybe<Scalars['BigInt']>;\n  start_in?: Maybe<Array<Scalars['BigInt']>>;\n  start_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  end?: Maybe<Scalars['BigInt']>;\n  end_not?: Maybe<Scalars['BigInt']>;\n  end_gt?: Maybe<Scalars['BigInt']>;\n  end_lt?: Maybe<Scalars['BigInt']>;\n  end_gte?: Maybe<Scalars['BigInt']>;\n  end_lte?: Maybe<Scalars['BigInt']>;\n  end_in?: Maybe<Array<Scalars['BigInt']>>;\n  end_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  first?: Maybe<Scalars['String']>;\n  first_not?: Maybe<Scalars['String']>;\n  first_gt?: Maybe<Scalars['String']>;\n  first_lt?: Maybe<Scalars['String']>;\n  first_gte?: Maybe<Scalars['String']>;\n  first_lte?: Maybe<Scalars['String']>;\n  first_in?: Maybe<Array<Scalars['String']>>;\n  first_not_in?: Maybe<Array<Scalars['String']>>;\n  first_contains?: Maybe<Scalars['String']>;\n  first_not_contains?: Maybe<Scalars['String']>;\n  first_starts_with?: Maybe<Scalars['String']>;\n  first_not_starts_with?: Maybe<Scalars['String']>;\n  first_ends_with?: Maybe<Scalars['String']>;\n  first_not_ends_with?: Maybe<Scalars['String']>;\n  last?: Maybe<Scalars['String']>;\n  last_not?: Maybe<Scalars['String']>;\n  last_gt?: Maybe<Scalars['String']>;\n  last_lt?: Maybe<Scalars['String']>;\n  last_gte?: Maybe<Scalars['String']>;\n  last_lte?: Maybe<Scalars['String']>;\n  last_in?: Maybe<Array<Scalars['String']>>;\n  last_not_in?: Maybe<Array<Scalars['String']>>;\n  last_contains?: Maybe<Scalars['String']>;\n  last_not_contains?: Maybe<Scalars['String']>;\n  last_starts_with?: Maybe<Scalars['String']>;\n  last_not_starts_with?: Maybe<Scalars['String']>;\n  last_ends_with?: Maybe<Scalars['String']>;\n  last_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum HourlyFundState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Start = 'start',\n  End = 'end',\n  First = 'first',\n  Last = 'last'\n}\n\nexport type HourlyPriceCandleGroup = {\n  __typename?: 'HourlyPriceCandleGroup';\n  id: Scalars['ID'];\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  assetCandles: Array<HourlyAssetPriceCandle>;\n  currencyCandles: Array<HourlyCurrencyPriceCandle>;\n};\n\n\nexport type HourlyPriceCandleGroupAssetCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyAssetPriceCandle_Filter>;\n};\n\n\nexport type HourlyPriceCandleGroupCurrencyCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyCurrencyPriceCandle_Filter>;\n};\n\nexport type HourlyPriceCandleGroup_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum HourlyPriceCandleGroup_OrderBy {\n  Id = 'id',\n  From = 'from',\n  To = 'to',\n  AssetCandles = 'assetCandles',\n  CurrencyCandles = 'currencyCandles'\n}\n\nexport type IndividualFeeStateInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  fee: Fee;\n  events: Array<FundEventInterface>;\n};\n\n\nexport type IndividualFeeStateInterfaceEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type IndividualFeeStateInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum IndividualFeeStateInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Fee = 'fee',\n  Events = 'events'\n}\n\nexport type IntegrationAdapter = {\n  __typename?: 'IntegrationAdapter';\n  id: Scalars['ID'];\n  integrationManager: IntegrationManager;\n  identifier: Scalars['String'];\n  blacklisted: Array<AdapterBlacklistSetting>;\n  whitelisted: Array<AdapterWhitelistSetting>;\n};\n\n\nexport type IntegrationAdapterBlacklistedArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterBlacklistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterBlacklistSetting_Filter>;\n};\n\n\nexport type IntegrationAdapterWhitelistedArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterWhitelistSetting_Filter>;\n};\n\nexport type IntegrationAdapter_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  integrationManager?: Maybe<Scalars['String']>;\n  integrationManager_not?: Maybe<Scalars['String']>;\n  integrationManager_gt?: Maybe<Scalars['String']>;\n  integrationManager_lt?: Maybe<Scalars['String']>;\n  integrationManager_gte?: Maybe<Scalars['String']>;\n  integrationManager_lte?: Maybe<Scalars['String']>;\n  integrationManager_in?: Maybe<Array<Scalars['String']>>;\n  integrationManager_not_in?: Maybe<Array<Scalars['String']>>;\n  integrationManager_contains?: Maybe<Scalars['String']>;\n  integrationManager_not_contains?: Maybe<Scalars['String']>;\n  integrationManager_starts_with?: Maybe<Scalars['String']>;\n  integrationManager_not_starts_with?: Maybe<Scalars['String']>;\n  integrationManager_ends_with?: Maybe<Scalars['String']>;\n  integrationManager_not_ends_with?: Maybe<Scalars['String']>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum IntegrationAdapter_OrderBy {\n  Id = 'id',\n  IntegrationManager = 'integrationManager',\n  Identifier = 'identifier',\n  Blacklisted = 'blacklisted',\n  Whitelisted = 'whitelisted'\n}\n\nexport type IntegrationManager = {\n  __typename?: 'IntegrationManager';\n  id: Scalars['ID'];\n  release: Release;\n  adapters: Array<IntegrationAdapter>;\n};\n\n\nexport type IntegrationManagerAdaptersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n};\n\nexport type IntegrationManager_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  release?: Maybe<Scalars['String']>;\n  release_not?: Maybe<Scalars['String']>;\n  release_gt?: Maybe<Scalars['String']>;\n  release_lt?: Maybe<Scalars['String']>;\n  release_gte?: Maybe<Scalars['String']>;\n  release_lte?: Maybe<Scalars['String']>;\n  release_in?: Maybe<Array<Scalars['String']>>;\n  release_not_in?: Maybe<Array<Scalars['String']>>;\n  release_contains?: Maybe<Scalars['String']>;\n  release_not_contains?: Maybe<Scalars['String']>;\n  release_starts_with?: Maybe<Scalars['String']>;\n  release_not_starts_with?: Maybe<Scalars['String']>;\n  release_ends_with?: Maybe<Scalars['String']>;\n  release_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum IntegrationManager_OrderBy {\n  Id = 'id',\n  Release = 'release',\n  Adapters = 'adapters'\n}\n\nexport enum IntegrationMethod {\n  AddTrackedAssets = 'ADD_TRACKED_ASSETS',\n  RemoveTrackedAssets = 'REMOVE_TRACKED_ASSETS',\n  ApproveAssets = 'APPROVE_ASSETS',\n  TakeOrder = 'TAKE_ORDER',\n  Lend = 'LEND',\n  Redeem = 'REDEEM',\n  Stake = 'STAKE',\n  Unstake = 'UNSTAKE',\n  ClaimRewards = 'CLAIM_REWARDS',\n  ClaimRewardsAndReinvest = 'CLAIM_REWARDS_AND_REINVEST',\n  ClaimRewardsAndSwap = 'CLAIM_REWARDS_AND_SWAP',\n  LendAndStake = 'LEND_AND_STAKE',\n  UnstakeAndRedeem = 'UNSTAKE_AND_REDEEM',\n  Unknown = 'UNKNOWN'\n}\n\nexport type Investment = {\n  __typename?: 'Investment';\n  id: Scalars['ID'];\n  since: Scalars['BigInt'];\n  fund: Fund;\n  investor: Account;\n  shares: Scalars['BigDecimal'];\n  state: InvestmentState;\n  stateHistory: Array<InvestmentState>;\n};\n\n\nexport type InvestmentStateHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestmentState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestmentState_Filter>;\n};\n\nexport type InvestmentSharesChangeInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  investor: Account;\n  timestamp: Scalars['BigInt'];\n  type: ShareChangeType;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  fundState: FundState;\n  transaction: Transaction;\n};\n\nexport type InvestmentSharesChangeInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum InvestmentSharesChangeInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Investor = 'investor',\n  Timestamp = 'timestamp',\n  Type = 'type',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  FundState = 'fundState',\n  Transaction = 'transaction'\n}\n\nexport type InvestmentState = {\n  __typename?: 'InvestmentState';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  fund: Fund;\n  investor: Account;\n  investment: Investment;\n  shares: Scalars['BigDecimal'];\n  changes: Array<SharesChangeInterface>;\n  fundState: FundState;\n};\n\n\nexport type InvestmentStateChangesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesChangeInterface_Filter>;\n};\n\nexport type InvestmentState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  investment?: Maybe<Scalars['String']>;\n  investment_not?: Maybe<Scalars['String']>;\n  investment_gt?: Maybe<Scalars['String']>;\n  investment_lt?: Maybe<Scalars['String']>;\n  investment_gte?: Maybe<Scalars['String']>;\n  investment_lte?: Maybe<Scalars['String']>;\n  investment_in?: Maybe<Array<Scalars['String']>>;\n  investment_not_in?: Maybe<Array<Scalars['String']>>;\n  investment_contains?: Maybe<Scalars['String']>;\n  investment_not_contains?: Maybe<Scalars['String']>;\n  investment_starts_with?: Maybe<Scalars['String']>;\n  investment_not_starts_with?: Maybe<Scalars['String']>;\n  investment_ends_with?: Maybe<Scalars['String']>;\n  investment_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum InvestmentState_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Fund = 'fund',\n  Investor = 'investor',\n  Investment = 'investment',\n  Shares = 'shares',\n  Changes = 'changes',\n  FundState = 'fundState'\n}\n\nexport type Investment_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  since?: Maybe<Scalars['BigInt']>;\n  since_not?: Maybe<Scalars['BigInt']>;\n  since_gt?: Maybe<Scalars['BigInt']>;\n  since_lt?: Maybe<Scalars['BigInt']>;\n  since_gte?: Maybe<Scalars['BigInt']>;\n  since_lte?: Maybe<Scalars['BigInt']>;\n  since_in?: Maybe<Array<Scalars['BigInt']>>;\n  since_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  state?: Maybe<Scalars['String']>;\n  state_not?: Maybe<Scalars['String']>;\n  state_gt?: Maybe<Scalars['String']>;\n  state_lt?: Maybe<Scalars['String']>;\n  state_gte?: Maybe<Scalars['String']>;\n  state_lte?: Maybe<Scalars['String']>;\n  state_in?: Maybe<Array<Scalars['String']>>;\n  state_not_in?: Maybe<Array<Scalars['String']>>;\n  state_contains?: Maybe<Scalars['String']>;\n  state_not_contains?: Maybe<Scalars['String']>;\n  state_starts_with?: Maybe<Scalars['String']>;\n  state_not_starts_with?: Maybe<Scalars['String']>;\n  state_ends_with?: Maybe<Scalars['String']>;\n  state_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Investment_OrderBy {\n  Id = 'id',\n  Since = 'since',\n  Fund = 'fund',\n  Investor = 'investor',\n  Shares = 'shares',\n  State = 'state',\n  StateHistory = 'stateHistory'\n}\n\nexport type InvestorWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'InvestorWhitelistAddressesAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Account>;\n};\n\n\nexport type InvestorWhitelistAddressesAddedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Account_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Account_Filter>;\n};\n\nexport type InvestorWhitelistAddressesAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum InvestorWhitelistAddressesAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type InvestorWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'InvestorWhitelistAddressesRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  items: Array<Account>;\n};\n\n\nexport type InvestorWhitelistAddressesRemovedEventItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Account_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Account_Filter>;\n};\n\nexport type InvestorWhitelistAddressesRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  items?: Maybe<Array<Scalars['String']>>;\n  items_not?: Maybe<Array<Scalars['String']>>;\n  items_contains?: Maybe<Array<Scalars['String']>>;\n  items_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum InvestorWhitelistAddressesRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Items = 'items'\n}\n\nexport type InvestorWhitelistSetting = PolicySettingInterface & {\n  __typename?: 'InvestorWhitelistSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  listed: Array<Account>;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type InvestorWhitelistSettingListedArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Account_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Account_Filter>;\n};\n\n\nexport type InvestorWhitelistSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type InvestorWhitelistSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  listed?: Maybe<Array<Scalars['String']>>;\n  listed_not?: Maybe<Array<Scalars['String']>>;\n  listed_contains?: Maybe<Array<Scalars['String']>>;\n  listed_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum InvestorWhitelistSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Listed = 'listed',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type LendAndStakeTrade = Trade & {\n  __typename?: 'LendAndStakeTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  outgoingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type LendAndStakeTradeOutgoingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type LendAndStakeTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum LendAndStakeTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  OutgoingAssetAmounts = 'outgoingAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type LendTrade = Trade & {\n  __typename?: 'LendTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  outgoingAssetAmount: AssetAmount;\n  price: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type LendTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['BigDecimal']>;\n  price_not?: Maybe<Scalars['BigDecimal']>;\n  price_gt?: Maybe<Scalars['BigDecimal']>;\n  price_lt?: Maybe<Scalars['BigDecimal']>;\n  price_gte?: Maybe<Scalars['BigDecimal']>;\n  price_lte?: Maybe<Scalars['BigDecimal']>;\n  price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum LendTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  OutgoingAssetAmount = 'outgoingAssetAmount',\n  Price = 'price',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type ManagementFeeActivatedForMigratedFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'ManagementFeeActivatedForMigratedFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptroller: ComptrollerProxy;\n};\n\nexport type ManagementFeeActivatedForMigratedFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ManagementFeeActivatedForMigratedFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Comptroller = 'comptroller'\n}\n\nexport type ManagementFeeSetting = FeeSettingInterface & {\n  __typename?: 'ManagementFeeSetting';\n  id: Scalars['ID'];\n  fee: Fee;\n  comptroller: ComptrollerProxy;\n  scaledPerSecondRate: Scalars['BigInt'];\n  timestamp: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type ManagementFeeSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type ManagementFeeSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  scaledPerSecondRate?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_not?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_gt?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_lt?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_gte?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_lte?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_in?: Maybe<Array<Scalars['BigInt']>>;\n  scaledPerSecondRate_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum ManagementFeeSetting_OrderBy {\n  Id = 'id',\n  Fee = 'fee',\n  Comptroller = 'comptroller',\n  ScaledPerSecondRate = 'scaledPerSecondRate',\n  Timestamp = 'timestamp',\n  Events = 'events'\n}\n\nexport type ManagementFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {\n  __typename?: 'ManagementFeeSettingsAddedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptroller: ComptrollerProxy;\n  scaledPerSecondRate: Scalars['BigInt'];\n};\n\nexport type ManagementFeeSettingsAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  scaledPerSecondRate?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_not?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_gt?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_lt?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_gte?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_lte?: Maybe<Scalars['BigInt']>;\n  scaledPerSecondRate_in?: Maybe<Array<Scalars['BigInt']>>;\n  scaledPerSecondRate_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum ManagementFeeSettingsAddedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Comptroller = 'comptroller',\n  ScaledPerSecondRate = 'scaledPerSecondRate'\n}\n\nexport type ManagementFeeSettledEvent = EventInterface & FundEventInterface & {\n  __typename?: 'ManagementFeeSettledEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptroller: ComptrollerProxy;\n  sharesDue: Scalars['BigDecimal'];\n  secondsSinceSettlement: Scalars['BigInt'];\n};\n\nexport type ManagementFeeSettledEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  sharesDue?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_not?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  secondsSinceSettlement?: Maybe<Scalars['BigInt']>;\n  secondsSinceSettlement_not?: Maybe<Scalars['BigInt']>;\n  secondsSinceSettlement_gt?: Maybe<Scalars['BigInt']>;\n  secondsSinceSettlement_lt?: Maybe<Scalars['BigInt']>;\n  secondsSinceSettlement_gte?: Maybe<Scalars['BigInt']>;\n  secondsSinceSettlement_lte?: Maybe<Scalars['BigInt']>;\n  secondsSinceSettlement_in?: Maybe<Array<Scalars['BigInt']>>;\n  secondsSinceSettlement_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum ManagementFeeSettledEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Comptroller = 'comptroller',\n  SharesDue = 'sharesDue',\n  SecondsSinceSettlement = 'secondsSinceSettlement'\n}\n\nexport type ManagementFeeState = FundStateInterface & IndividualFeeStateInterface & {\n  __typename?: 'ManagementFeeState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  fee: Fee;\n  lastSettled: Scalars['BigInt'];\n  totalSharesPaidOut: Scalars['BigDecimal'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type ManagementFeeStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type ManagementFeeState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  lastSettled?: Maybe<Scalars['BigInt']>;\n  lastSettled_not?: Maybe<Scalars['BigInt']>;\n  lastSettled_gt?: Maybe<Scalars['BigInt']>;\n  lastSettled_lt?: Maybe<Scalars['BigInt']>;\n  lastSettled_gte?: Maybe<Scalars['BigInt']>;\n  lastSettled_lte?: Maybe<Scalars['BigInt']>;\n  lastSettled_in?: Maybe<Array<Scalars['BigInt']>>;\n  lastSettled_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  totalSharesPaidOut?: Maybe<Scalars['BigDecimal']>;\n  totalSharesPaidOut_not?: Maybe<Scalars['BigDecimal']>;\n  totalSharesPaidOut_gt?: Maybe<Scalars['BigDecimal']>;\n  totalSharesPaidOut_lt?: Maybe<Scalars['BigDecimal']>;\n  totalSharesPaidOut_gte?: Maybe<Scalars['BigDecimal']>;\n  totalSharesPaidOut_lte?: Maybe<Scalars['BigDecimal']>;\n  totalSharesPaidOut_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalSharesPaidOut_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum ManagementFeeState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Fee = 'fee',\n  LastSettled = 'lastSettled',\n  TotalSharesPaidOut = 'totalSharesPaidOut',\n  Events = 'events'\n}\n\nexport type MaxConcentrationSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MaxConcentrationSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  value: Scalars['BigDecimal'];\n};\n\nexport type MaxConcentrationSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['BigDecimal']>;\n  value_not?: Maybe<Scalars['BigDecimal']>;\n  value_gt?: Maybe<Scalars['BigDecimal']>;\n  value_lt?: Maybe<Scalars['BigDecimal']>;\n  value_gte?: Maybe<Scalars['BigDecimal']>;\n  value_lte?: Maybe<Scalars['BigDecimal']>;\n  value_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  value_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum MaxConcentrationSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  Value = 'value'\n}\n\nexport type MaxConcentrationSetting = PolicySettingInterface & {\n  __typename?: 'MaxConcentrationSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  maxConcentration: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type MaxConcentrationSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type MaxConcentrationSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  maxConcentration?: Maybe<Scalars['BigDecimal']>;\n  maxConcentration_not?: Maybe<Scalars['BigDecimal']>;\n  maxConcentration_gt?: Maybe<Scalars['BigDecimal']>;\n  maxConcentration_lt?: Maybe<Scalars['BigDecimal']>;\n  maxConcentration_gte?: Maybe<Scalars['BigDecimal']>;\n  maxConcentration_lte?: Maybe<Scalars['BigDecimal']>;\n  maxConcentration_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  maxConcentration_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum MaxConcentrationSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  MaxConcentration = 'maxConcentration',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type MigratedSharesDuePaidEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {\n  __typename?: 'MigratedSharesDuePaidEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  type: ShareChangeType;\n  investor: Account;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  comptrollerProxy: Scalars['String'];\n  fundState: FundState;\n};\n\nexport type MigratedSharesDuePaidEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MigratedSharesDuePaidEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Type = 'type',\n  Investor = 'investor',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  ComptrollerProxy = 'comptrollerProxy',\n  FundState = 'fundState'\n}\n\nexport type Migration = {\n  __typename?: 'Migration';\n  id: Scalars['ID'];\n  prevRelease: Release;\n  nextRelease: Release;\n  fund: Fund;\n  executableTimestamp: Scalars['BigInt'];\n  executed: Scalars['Boolean'];\n  cancelled: Scalars['Boolean'];\n  nextAccessor: ComptrollerProxy;\n};\n\nexport type MigrationCancelledEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MigrationCancelledEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  migration: Migration;\n  executableTimestamp: Scalars['BigInt'];\n};\n\nexport type MigrationCancelledEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  migration?: Maybe<Scalars['String']>;\n  migration_not?: Maybe<Scalars['String']>;\n  migration_gt?: Maybe<Scalars['String']>;\n  migration_lt?: Maybe<Scalars['String']>;\n  migration_gte?: Maybe<Scalars['String']>;\n  migration_lte?: Maybe<Scalars['String']>;\n  migration_in?: Maybe<Array<Scalars['String']>>;\n  migration_not_in?: Maybe<Array<Scalars['String']>>;\n  migration_contains?: Maybe<Scalars['String']>;\n  migration_not_contains?: Maybe<Scalars['String']>;\n  migration_starts_with?: Maybe<Scalars['String']>;\n  migration_not_starts_with?: Maybe<Scalars['String']>;\n  migration_ends_with?: Maybe<Scalars['String']>;\n  migration_not_ends_with?: Maybe<Scalars['String']>;\n  executableTimestamp?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_not?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_gt?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_lt?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_gte?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_lte?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  executableTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum MigrationCancelledEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Migration = 'migration',\n  ExecutableTimestamp = 'executableTimestamp'\n}\n\nexport type MigrationExecutedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MigrationExecutedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  migration: Migration;\n  executableTimestamp: Scalars['BigInt'];\n};\n\nexport type MigrationExecutedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  migration?: Maybe<Scalars['String']>;\n  migration_not?: Maybe<Scalars['String']>;\n  migration_gt?: Maybe<Scalars['String']>;\n  migration_lt?: Maybe<Scalars['String']>;\n  migration_gte?: Maybe<Scalars['String']>;\n  migration_lte?: Maybe<Scalars['String']>;\n  migration_in?: Maybe<Array<Scalars['String']>>;\n  migration_not_in?: Maybe<Array<Scalars['String']>>;\n  migration_contains?: Maybe<Scalars['String']>;\n  migration_not_contains?: Maybe<Scalars['String']>;\n  migration_starts_with?: Maybe<Scalars['String']>;\n  migration_not_starts_with?: Maybe<Scalars['String']>;\n  migration_ends_with?: Maybe<Scalars['String']>;\n  migration_not_ends_with?: Maybe<Scalars['String']>;\n  executableTimestamp?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_not?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_gt?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_lt?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_gte?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_lte?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  executableTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum MigrationExecutedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Migration = 'migration',\n  ExecutableTimestamp = 'executableTimestamp'\n}\n\nexport type MigrationInCancelHookFailedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MigrationInCancelHookFailedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  vaultProxy: Scalars['String'];\n  prevFundDeployer: Scalars['String'];\n  nextFundDeployer: Scalars['String'];\n  nextVaultLib: Scalars['String'];\n  nextVaultAccessor: Scalars['String'];\n  failureReturnData: Scalars['String'];\n};\n\nexport type MigrationInCancelHookFailedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy?: Maybe<Scalars['String']>;\n  vaultProxy_not?: Maybe<Scalars['String']>;\n  vaultProxy_gt?: Maybe<Scalars['String']>;\n  vaultProxy_lt?: Maybe<Scalars['String']>;\n  vaultProxy_gte?: Maybe<Scalars['String']>;\n  vaultProxy_lte?: Maybe<Scalars['String']>;\n  vaultProxy_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_contains?: Maybe<Scalars['String']>;\n  vaultProxy_not_contains?: Maybe<Scalars['String']>;\n  vaultProxy_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_ends_with?: Maybe<Scalars['String']>;\n  prevFundDeployer?: Maybe<Scalars['String']>;\n  prevFundDeployer_not?: Maybe<Scalars['String']>;\n  prevFundDeployer_gt?: Maybe<Scalars['String']>;\n  prevFundDeployer_lt?: Maybe<Scalars['String']>;\n  prevFundDeployer_gte?: Maybe<Scalars['String']>;\n  prevFundDeployer_lte?: Maybe<Scalars['String']>;\n  prevFundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  prevFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  prevFundDeployer_contains?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_contains?: Maybe<Scalars['String']>;\n  prevFundDeployer_starts_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_ends_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n  nextFundDeployer?: Maybe<Scalars['String']>;\n  nextFundDeployer_not?: Maybe<Scalars['String']>;\n  nextFundDeployer_gt?: Maybe<Scalars['String']>;\n  nextFundDeployer_lt?: Maybe<Scalars['String']>;\n  nextFundDeployer_gte?: Maybe<Scalars['String']>;\n  nextFundDeployer_lte?: Maybe<Scalars['String']>;\n  nextFundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  nextFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  nextFundDeployer_contains?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_contains?: Maybe<Scalars['String']>;\n  nextFundDeployer_starts_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_ends_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n  nextVaultLib?: Maybe<Scalars['String']>;\n  nextVaultLib_not?: Maybe<Scalars['String']>;\n  nextVaultLib_gt?: Maybe<Scalars['String']>;\n  nextVaultLib_lt?: Maybe<Scalars['String']>;\n  nextVaultLib_gte?: Maybe<Scalars['String']>;\n  nextVaultLib_lte?: Maybe<Scalars['String']>;\n  nextVaultLib_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultLib_not_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultLib_contains?: Maybe<Scalars['String']>;\n  nextVaultLib_not_contains?: Maybe<Scalars['String']>;\n  nextVaultLib_starts_with?: Maybe<Scalars['String']>;\n  nextVaultLib_not_starts_with?: Maybe<Scalars['String']>;\n  nextVaultLib_ends_with?: Maybe<Scalars['String']>;\n  nextVaultLib_not_ends_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not?: Maybe<Scalars['String']>;\n  nextVaultAccessor_gt?: Maybe<Scalars['String']>;\n  nextVaultAccessor_lt?: Maybe<Scalars['String']>;\n  nextVaultAccessor_gte?: Maybe<Scalars['String']>;\n  nextVaultAccessor_lte?: Maybe<Scalars['String']>;\n  nextVaultAccessor_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultAccessor_not_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultAccessor_contains?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not_contains?: Maybe<Scalars['String']>;\n  nextVaultAccessor_starts_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not_starts_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor_ends_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not_ends_with?: Maybe<Scalars['String']>;\n  failureReturnData?: Maybe<Scalars['String']>;\n  failureReturnData_not?: Maybe<Scalars['String']>;\n  failureReturnData_gt?: Maybe<Scalars['String']>;\n  failureReturnData_lt?: Maybe<Scalars['String']>;\n  failureReturnData_gte?: Maybe<Scalars['String']>;\n  failureReturnData_lte?: Maybe<Scalars['String']>;\n  failureReturnData_in?: Maybe<Array<Scalars['String']>>;\n  failureReturnData_not_in?: Maybe<Array<Scalars['String']>>;\n  failureReturnData_contains?: Maybe<Scalars['String']>;\n  failureReturnData_not_contains?: Maybe<Scalars['String']>;\n  failureReturnData_starts_with?: Maybe<Scalars['String']>;\n  failureReturnData_not_starts_with?: Maybe<Scalars['String']>;\n  failureReturnData_ends_with?: Maybe<Scalars['String']>;\n  failureReturnData_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MigrationInCancelHookFailedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  VaultProxy = 'vaultProxy',\n  PrevFundDeployer = 'prevFundDeployer',\n  NextFundDeployer = 'nextFundDeployer',\n  NextVaultLib = 'nextVaultLib',\n  NextVaultAccessor = 'nextVaultAccessor',\n  FailureReturnData = 'failureReturnData'\n}\n\nexport type MigrationOutHookFailedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MigrationOutHookFailedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  vaultProxy: Scalars['String'];\n  prevFundDeployer: Scalars['String'];\n  nextFundDeployer: Scalars['String'];\n  nextVaultLib: Scalars['String'];\n  nextVaultAccessor: Scalars['String'];\n  failureReturnData: Scalars['String'];\n};\n\nexport type MigrationOutHookFailedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy?: Maybe<Scalars['String']>;\n  vaultProxy_not?: Maybe<Scalars['String']>;\n  vaultProxy_gt?: Maybe<Scalars['String']>;\n  vaultProxy_lt?: Maybe<Scalars['String']>;\n  vaultProxy_gte?: Maybe<Scalars['String']>;\n  vaultProxy_lte?: Maybe<Scalars['String']>;\n  vaultProxy_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_contains?: Maybe<Scalars['String']>;\n  vaultProxy_not_contains?: Maybe<Scalars['String']>;\n  vaultProxy_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_ends_with?: Maybe<Scalars['String']>;\n  prevFundDeployer?: Maybe<Scalars['String']>;\n  prevFundDeployer_not?: Maybe<Scalars['String']>;\n  prevFundDeployer_gt?: Maybe<Scalars['String']>;\n  prevFundDeployer_lt?: Maybe<Scalars['String']>;\n  prevFundDeployer_gte?: Maybe<Scalars['String']>;\n  prevFundDeployer_lte?: Maybe<Scalars['String']>;\n  prevFundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  prevFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  prevFundDeployer_contains?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_contains?: Maybe<Scalars['String']>;\n  prevFundDeployer_starts_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_ends_with?: Maybe<Scalars['String']>;\n  prevFundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n  nextFundDeployer?: Maybe<Scalars['String']>;\n  nextFundDeployer_not?: Maybe<Scalars['String']>;\n  nextFundDeployer_gt?: Maybe<Scalars['String']>;\n  nextFundDeployer_lt?: Maybe<Scalars['String']>;\n  nextFundDeployer_gte?: Maybe<Scalars['String']>;\n  nextFundDeployer_lte?: Maybe<Scalars['String']>;\n  nextFundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  nextFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  nextFundDeployer_contains?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_contains?: Maybe<Scalars['String']>;\n  nextFundDeployer_starts_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_ends_with?: Maybe<Scalars['String']>;\n  nextFundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n  nextVaultLib?: Maybe<Scalars['String']>;\n  nextVaultLib_not?: Maybe<Scalars['String']>;\n  nextVaultLib_gt?: Maybe<Scalars['String']>;\n  nextVaultLib_lt?: Maybe<Scalars['String']>;\n  nextVaultLib_gte?: Maybe<Scalars['String']>;\n  nextVaultLib_lte?: Maybe<Scalars['String']>;\n  nextVaultLib_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultLib_not_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultLib_contains?: Maybe<Scalars['String']>;\n  nextVaultLib_not_contains?: Maybe<Scalars['String']>;\n  nextVaultLib_starts_with?: Maybe<Scalars['String']>;\n  nextVaultLib_not_starts_with?: Maybe<Scalars['String']>;\n  nextVaultLib_ends_with?: Maybe<Scalars['String']>;\n  nextVaultLib_not_ends_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not?: Maybe<Scalars['String']>;\n  nextVaultAccessor_gt?: Maybe<Scalars['String']>;\n  nextVaultAccessor_lt?: Maybe<Scalars['String']>;\n  nextVaultAccessor_gte?: Maybe<Scalars['String']>;\n  nextVaultAccessor_lte?: Maybe<Scalars['String']>;\n  nextVaultAccessor_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultAccessor_not_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultAccessor_contains?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not_contains?: Maybe<Scalars['String']>;\n  nextVaultAccessor_starts_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not_starts_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor_ends_with?: Maybe<Scalars['String']>;\n  nextVaultAccessor_not_ends_with?: Maybe<Scalars['String']>;\n  failureReturnData?: Maybe<Scalars['String']>;\n  failureReturnData_not?: Maybe<Scalars['String']>;\n  failureReturnData_gt?: Maybe<Scalars['String']>;\n  failureReturnData_lt?: Maybe<Scalars['String']>;\n  failureReturnData_gte?: Maybe<Scalars['String']>;\n  failureReturnData_lte?: Maybe<Scalars['String']>;\n  failureReturnData_in?: Maybe<Array<Scalars['String']>>;\n  failureReturnData_not_in?: Maybe<Array<Scalars['String']>>;\n  failureReturnData_contains?: Maybe<Scalars['String']>;\n  failureReturnData_not_contains?: Maybe<Scalars['String']>;\n  failureReturnData_starts_with?: Maybe<Scalars['String']>;\n  failureReturnData_not_starts_with?: Maybe<Scalars['String']>;\n  failureReturnData_ends_with?: Maybe<Scalars['String']>;\n  failureReturnData_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MigrationOutHookFailedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  VaultProxy = 'vaultProxy',\n  PrevFundDeployer = 'prevFundDeployer',\n  NextFundDeployer = 'nextFundDeployer',\n  NextVaultLib = 'nextVaultLib',\n  NextVaultAccessor = 'nextVaultAccessor',\n  FailureReturnData = 'failureReturnData'\n}\n\nexport type MigrationSignaledEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MigrationSignaledEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  migration: Migration;\n};\n\nexport type MigrationSignaledEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  migration?: Maybe<Scalars['String']>;\n  migration_not?: Maybe<Scalars['String']>;\n  migration_gt?: Maybe<Scalars['String']>;\n  migration_lt?: Maybe<Scalars['String']>;\n  migration_gte?: Maybe<Scalars['String']>;\n  migration_lte?: Maybe<Scalars['String']>;\n  migration_in?: Maybe<Array<Scalars['String']>>;\n  migration_not_in?: Maybe<Array<Scalars['String']>>;\n  migration_contains?: Maybe<Scalars['String']>;\n  migration_not_contains?: Maybe<Scalars['String']>;\n  migration_starts_with?: Maybe<Scalars['String']>;\n  migration_not_starts_with?: Maybe<Scalars['String']>;\n  migration_ends_with?: Maybe<Scalars['String']>;\n  migration_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MigrationSignaledEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Migration = 'migration'\n}\n\nexport type MigrationTimelockSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'MigrationTimelockSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevTimelock: Scalars['BigInt'];\n  nextTimelock: Scalars['BigInt'];\n};\n\nexport type MigrationTimelockSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevTimelock?: Maybe<Scalars['BigInt']>;\n  prevTimelock_not?: Maybe<Scalars['BigInt']>;\n  prevTimelock_gt?: Maybe<Scalars['BigInt']>;\n  prevTimelock_lt?: Maybe<Scalars['BigInt']>;\n  prevTimelock_gte?: Maybe<Scalars['BigInt']>;\n  prevTimelock_lte?: Maybe<Scalars['BigInt']>;\n  prevTimelock_in?: Maybe<Array<Scalars['BigInt']>>;\n  prevTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  nextTimelock?: Maybe<Scalars['BigInt']>;\n  nextTimelock_not?: Maybe<Scalars['BigInt']>;\n  nextTimelock_gt?: Maybe<Scalars['BigInt']>;\n  nextTimelock_lt?: Maybe<Scalars['BigInt']>;\n  nextTimelock_gte?: Maybe<Scalars['BigInt']>;\n  nextTimelock_lte?: Maybe<Scalars['BigInt']>;\n  nextTimelock_in?: Maybe<Array<Scalars['BigInt']>>;\n  nextTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum MigrationTimelockSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevTimelock = 'prevTimelock',\n  NextTimelock = 'nextTimelock'\n}\n\nexport type Migration_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  prevRelease?: Maybe<Scalars['String']>;\n  prevRelease_not?: Maybe<Scalars['String']>;\n  prevRelease_gt?: Maybe<Scalars['String']>;\n  prevRelease_lt?: Maybe<Scalars['String']>;\n  prevRelease_gte?: Maybe<Scalars['String']>;\n  prevRelease_lte?: Maybe<Scalars['String']>;\n  prevRelease_in?: Maybe<Array<Scalars['String']>>;\n  prevRelease_not_in?: Maybe<Array<Scalars['String']>>;\n  prevRelease_contains?: Maybe<Scalars['String']>;\n  prevRelease_not_contains?: Maybe<Scalars['String']>;\n  prevRelease_starts_with?: Maybe<Scalars['String']>;\n  prevRelease_not_starts_with?: Maybe<Scalars['String']>;\n  prevRelease_ends_with?: Maybe<Scalars['String']>;\n  prevRelease_not_ends_with?: Maybe<Scalars['String']>;\n  nextRelease?: Maybe<Scalars['String']>;\n  nextRelease_not?: Maybe<Scalars['String']>;\n  nextRelease_gt?: Maybe<Scalars['String']>;\n  nextRelease_lt?: Maybe<Scalars['String']>;\n  nextRelease_gte?: Maybe<Scalars['String']>;\n  nextRelease_lte?: Maybe<Scalars['String']>;\n  nextRelease_in?: Maybe<Array<Scalars['String']>>;\n  nextRelease_not_in?: Maybe<Array<Scalars['String']>>;\n  nextRelease_contains?: Maybe<Scalars['String']>;\n  nextRelease_not_contains?: Maybe<Scalars['String']>;\n  nextRelease_starts_with?: Maybe<Scalars['String']>;\n  nextRelease_not_starts_with?: Maybe<Scalars['String']>;\n  nextRelease_ends_with?: Maybe<Scalars['String']>;\n  nextRelease_not_ends_with?: Maybe<Scalars['String']>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  executableTimestamp?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_not?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_gt?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_lt?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_gte?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_lte?: Maybe<Scalars['BigInt']>;\n  executableTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  executableTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  executed?: Maybe<Scalars['Boolean']>;\n  executed_not?: Maybe<Scalars['Boolean']>;\n  executed_in?: Maybe<Array<Scalars['Boolean']>>;\n  executed_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  cancelled?: Maybe<Scalars['Boolean']>;\n  cancelled_not?: Maybe<Scalars['Boolean']>;\n  cancelled_in?: Maybe<Array<Scalars['Boolean']>>;\n  cancelled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  nextAccessor?: Maybe<Scalars['String']>;\n  nextAccessor_not?: Maybe<Scalars['String']>;\n  nextAccessor_gt?: Maybe<Scalars['String']>;\n  nextAccessor_lt?: Maybe<Scalars['String']>;\n  nextAccessor_gte?: Maybe<Scalars['String']>;\n  nextAccessor_lte?: Maybe<Scalars['String']>;\n  nextAccessor_in?: Maybe<Array<Scalars['String']>>;\n  nextAccessor_not_in?: Maybe<Array<Scalars['String']>>;\n  nextAccessor_contains?: Maybe<Scalars['String']>;\n  nextAccessor_not_contains?: Maybe<Scalars['String']>;\n  nextAccessor_starts_with?: Maybe<Scalars['String']>;\n  nextAccessor_not_starts_with?: Maybe<Scalars['String']>;\n  nextAccessor_ends_with?: Maybe<Scalars['String']>;\n  nextAccessor_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Migration_OrderBy {\n  Id = 'id',\n  PrevRelease = 'prevRelease',\n  NextRelease = 'nextRelease',\n  Fund = 'fund',\n  ExecutableTimestamp = 'executableTimestamp',\n  Executed = 'executed',\n  Cancelled = 'cancelled',\n  NextAccessor = 'nextAccessor'\n}\n\nexport type MigratorSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MigratorSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevMigrator?: Maybe<Account>;\n  nextMigrator: Account;\n};\n\nexport type MigratorSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevMigrator?: Maybe<Scalars['String']>;\n  prevMigrator_not?: Maybe<Scalars['String']>;\n  prevMigrator_gt?: Maybe<Scalars['String']>;\n  prevMigrator_lt?: Maybe<Scalars['String']>;\n  prevMigrator_gte?: Maybe<Scalars['String']>;\n  prevMigrator_lte?: Maybe<Scalars['String']>;\n  prevMigrator_in?: Maybe<Array<Scalars['String']>>;\n  prevMigrator_not_in?: Maybe<Array<Scalars['String']>>;\n  prevMigrator_contains?: Maybe<Scalars['String']>;\n  prevMigrator_not_contains?: Maybe<Scalars['String']>;\n  prevMigrator_starts_with?: Maybe<Scalars['String']>;\n  prevMigrator_not_starts_with?: Maybe<Scalars['String']>;\n  prevMigrator_ends_with?: Maybe<Scalars['String']>;\n  prevMigrator_not_ends_with?: Maybe<Scalars['String']>;\n  nextMigrator?: Maybe<Scalars['String']>;\n  nextMigrator_not?: Maybe<Scalars['String']>;\n  nextMigrator_gt?: Maybe<Scalars['String']>;\n  nextMigrator_lt?: Maybe<Scalars['String']>;\n  nextMigrator_gte?: Maybe<Scalars['String']>;\n  nextMigrator_lte?: Maybe<Scalars['String']>;\n  nextMigrator_in?: Maybe<Array<Scalars['String']>>;\n  nextMigrator_not_in?: Maybe<Array<Scalars['String']>>;\n  nextMigrator_contains?: Maybe<Scalars['String']>;\n  nextMigrator_not_contains?: Maybe<Scalars['String']>;\n  nextMigrator_starts_with?: Maybe<Scalars['String']>;\n  nextMigrator_not_starts_with?: Maybe<Scalars['String']>;\n  nextMigrator_ends_with?: Maybe<Scalars['String']>;\n  nextMigrator_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MigratorSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevMigrator = 'prevMigrator',\n  NextMigrator = 'nextMigrator'\n}\n\nexport type MinMaxInvestmentFundSettingsSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'MinMaxInvestmentFundSettingsSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  minInvestmentAmount: Scalars['BigDecimal'];\n  maxInvestmentAmount: Scalars['BigDecimal'];\n};\n\nexport type MinMaxInvestmentFundSettingsSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  minInvestmentAmount?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  maxInvestmentAmount?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  maxInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum MinMaxInvestmentFundSettingsSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  MinInvestmentAmount = 'minInvestmentAmount',\n  MaxInvestmentAmount = 'maxInvestmentAmount'\n}\n\nexport type MinMaxInvestmentSetting = PolicySettingInterface & {\n  __typename?: 'MinMaxInvestmentSetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  minInvestmentAmount: Scalars['BigDecimal'];\n  maxInvestmentAmount: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type MinMaxInvestmentSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type MinMaxInvestmentSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  minInvestmentAmount?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  minInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  maxInvestmentAmount?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  maxInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  maxInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum MinMaxInvestmentSetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  MinInvestmentAmount = 'minInvestmentAmount',\n  MaxInvestmentAmount = 'maxInvestmentAmount',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type MonthlyAssetPriceCandle = {\n  __typename?: 'MonthlyAssetPriceCandle';\n  id: Scalars['ID'];\n  asset: Asset;\n  group: MonthlyPriceCandleGroup;\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  openRef: AssetPrice;\n  close: Scalars['BigDecimal'];\n  closeRef: AssetPrice;\n  low: Scalars['BigDecimal'];\n  lowRef: AssetPrice;\n  high: Scalars['BigDecimal'];\n  highRef: AssetPrice;\n};\n\nexport type MonthlyAssetPriceCandle_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  group?: Maybe<Scalars['String']>;\n  group_not?: Maybe<Scalars['String']>;\n  group_gt?: Maybe<Scalars['String']>;\n  group_lt?: Maybe<Scalars['String']>;\n  group_gte?: Maybe<Scalars['String']>;\n  group_lte?: Maybe<Scalars['String']>;\n  group_in?: Maybe<Array<Scalars['String']>>;\n  group_not_in?: Maybe<Array<Scalars['String']>>;\n  group_contains?: Maybe<Scalars['String']>;\n  group_not_contains?: Maybe<Scalars['String']>;\n  group_starts_with?: Maybe<Scalars['String']>;\n  group_not_starts_with?: Maybe<Scalars['String']>;\n  group_ends_with?: Maybe<Scalars['String']>;\n  group_not_ends_with?: Maybe<Scalars['String']>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  openRef?: Maybe<Scalars['String']>;\n  openRef_not?: Maybe<Scalars['String']>;\n  openRef_gt?: Maybe<Scalars['String']>;\n  openRef_lt?: Maybe<Scalars['String']>;\n  openRef_gte?: Maybe<Scalars['String']>;\n  openRef_lte?: Maybe<Scalars['String']>;\n  openRef_in?: Maybe<Array<Scalars['String']>>;\n  openRef_not_in?: Maybe<Array<Scalars['String']>>;\n  openRef_contains?: Maybe<Scalars['String']>;\n  openRef_not_contains?: Maybe<Scalars['String']>;\n  openRef_starts_with?: Maybe<Scalars['String']>;\n  openRef_not_starts_with?: Maybe<Scalars['String']>;\n  openRef_ends_with?: Maybe<Scalars['String']>;\n  openRef_not_ends_with?: Maybe<Scalars['String']>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  closeRef?: Maybe<Scalars['String']>;\n  closeRef_not?: Maybe<Scalars['String']>;\n  closeRef_gt?: Maybe<Scalars['String']>;\n  closeRef_lt?: Maybe<Scalars['String']>;\n  closeRef_gte?: Maybe<Scalars['String']>;\n  closeRef_lte?: Maybe<Scalars['String']>;\n  closeRef_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_not_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_contains?: Maybe<Scalars['String']>;\n  closeRef_not_contains?: Maybe<Scalars['String']>;\n  closeRef_starts_with?: Maybe<Scalars['String']>;\n  closeRef_not_starts_with?: Maybe<Scalars['String']>;\n  closeRef_ends_with?: Maybe<Scalars['String']>;\n  closeRef_not_ends_with?: Maybe<Scalars['String']>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  lowRef?: Maybe<Scalars['String']>;\n  lowRef_not?: Maybe<Scalars['String']>;\n  lowRef_gt?: Maybe<Scalars['String']>;\n  lowRef_lt?: Maybe<Scalars['String']>;\n  lowRef_gte?: Maybe<Scalars['String']>;\n  lowRef_lte?: Maybe<Scalars['String']>;\n  lowRef_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_not_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_contains?: Maybe<Scalars['String']>;\n  lowRef_not_contains?: Maybe<Scalars['String']>;\n  lowRef_starts_with?: Maybe<Scalars['String']>;\n  lowRef_not_starts_with?: Maybe<Scalars['String']>;\n  lowRef_ends_with?: Maybe<Scalars['String']>;\n  lowRef_not_ends_with?: Maybe<Scalars['String']>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highRef?: Maybe<Scalars['String']>;\n  highRef_not?: Maybe<Scalars['String']>;\n  highRef_gt?: Maybe<Scalars['String']>;\n  highRef_lt?: Maybe<Scalars['String']>;\n  highRef_gte?: Maybe<Scalars['String']>;\n  highRef_lte?: Maybe<Scalars['String']>;\n  highRef_in?: Maybe<Array<Scalars['String']>>;\n  highRef_not_in?: Maybe<Array<Scalars['String']>>;\n  highRef_contains?: Maybe<Scalars['String']>;\n  highRef_not_contains?: Maybe<Scalars['String']>;\n  highRef_starts_with?: Maybe<Scalars['String']>;\n  highRef_not_starts_with?: Maybe<Scalars['String']>;\n  highRef_ends_with?: Maybe<Scalars['String']>;\n  highRef_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MonthlyAssetPriceCandle_OrderBy {\n  Id = 'id',\n  Asset = 'asset',\n  Group = 'group',\n  From = 'from',\n  To = 'to',\n  Open = 'open',\n  OpenRef = 'openRef',\n  Close = 'close',\n  CloseRef = 'closeRef',\n  Low = 'low',\n  LowRef = 'lowRef',\n  High = 'high',\n  HighRef = 'highRef'\n}\n\nexport type MonthlyCurrencyPriceCandle = {\n  __typename?: 'MonthlyCurrencyPriceCandle';\n  id: Scalars['ID'];\n  currency: Currency;\n  group: MonthlyPriceCandleGroup;\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  openRef: CurrencyPrice;\n  close: Scalars['BigDecimal'];\n  closeRef: CurrencyPrice;\n  low: Scalars['BigDecimal'];\n  lowRef: CurrencyPrice;\n  high: Scalars['BigDecimal'];\n  highRef: CurrencyPrice;\n};\n\nexport type MonthlyCurrencyPriceCandle_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  currency?: Maybe<Scalars['String']>;\n  currency_not?: Maybe<Scalars['String']>;\n  currency_gt?: Maybe<Scalars['String']>;\n  currency_lt?: Maybe<Scalars['String']>;\n  currency_gte?: Maybe<Scalars['String']>;\n  currency_lte?: Maybe<Scalars['String']>;\n  currency_in?: Maybe<Array<Scalars['String']>>;\n  currency_not_in?: Maybe<Array<Scalars['String']>>;\n  currency_contains?: Maybe<Scalars['String']>;\n  currency_not_contains?: Maybe<Scalars['String']>;\n  currency_starts_with?: Maybe<Scalars['String']>;\n  currency_not_starts_with?: Maybe<Scalars['String']>;\n  currency_ends_with?: Maybe<Scalars['String']>;\n  currency_not_ends_with?: Maybe<Scalars['String']>;\n  group?: Maybe<Scalars['String']>;\n  group_not?: Maybe<Scalars['String']>;\n  group_gt?: Maybe<Scalars['String']>;\n  group_lt?: Maybe<Scalars['String']>;\n  group_gte?: Maybe<Scalars['String']>;\n  group_lte?: Maybe<Scalars['String']>;\n  group_in?: Maybe<Array<Scalars['String']>>;\n  group_not_in?: Maybe<Array<Scalars['String']>>;\n  group_contains?: Maybe<Scalars['String']>;\n  group_not_contains?: Maybe<Scalars['String']>;\n  group_starts_with?: Maybe<Scalars['String']>;\n  group_not_starts_with?: Maybe<Scalars['String']>;\n  group_ends_with?: Maybe<Scalars['String']>;\n  group_not_ends_with?: Maybe<Scalars['String']>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  openRef?: Maybe<Scalars['String']>;\n  openRef_not?: Maybe<Scalars['String']>;\n  openRef_gt?: Maybe<Scalars['String']>;\n  openRef_lt?: Maybe<Scalars['String']>;\n  openRef_gte?: Maybe<Scalars['String']>;\n  openRef_lte?: Maybe<Scalars['String']>;\n  openRef_in?: Maybe<Array<Scalars['String']>>;\n  openRef_not_in?: Maybe<Array<Scalars['String']>>;\n  openRef_contains?: Maybe<Scalars['String']>;\n  openRef_not_contains?: Maybe<Scalars['String']>;\n  openRef_starts_with?: Maybe<Scalars['String']>;\n  openRef_not_starts_with?: Maybe<Scalars['String']>;\n  openRef_ends_with?: Maybe<Scalars['String']>;\n  openRef_not_ends_with?: Maybe<Scalars['String']>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  closeRef?: Maybe<Scalars['String']>;\n  closeRef_not?: Maybe<Scalars['String']>;\n  closeRef_gt?: Maybe<Scalars['String']>;\n  closeRef_lt?: Maybe<Scalars['String']>;\n  closeRef_gte?: Maybe<Scalars['String']>;\n  closeRef_lte?: Maybe<Scalars['String']>;\n  closeRef_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_not_in?: Maybe<Array<Scalars['String']>>;\n  closeRef_contains?: Maybe<Scalars['String']>;\n  closeRef_not_contains?: Maybe<Scalars['String']>;\n  closeRef_starts_with?: Maybe<Scalars['String']>;\n  closeRef_not_starts_with?: Maybe<Scalars['String']>;\n  closeRef_ends_with?: Maybe<Scalars['String']>;\n  closeRef_not_ends_with?: Maybe<Scalars['String']>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  lowRef?: Maybe<Scalars['String']>;\n  lowRef_not?: Maybe<Scalars['String']>;\n  lowRef_gt?: Maybe<Scalars['String']>;\n  lowRef_lt?: Maybe<Scalars['String']>;\n  lowRef_gte?: Maybe<Scalars['String']>;\n  lowRef_lte?: Maybe<Scalars['String']>;\n  lowRef_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_not_in?: Maybe<Array<Scalars['String']>>;\n  lowRef_contains?: Maybe<Scalars['String']>;\n  lowRef_not_contains?: Maybe<Scalars['String']>;\n  lowRef_starts_with?: Maybe<Scalars['String']>;\n  lowRef_not_starts_with?: Maybe<Scalars['String']>;\n  lowRef_ends_with?: Maybe<Scalars['String']>;\n  lowRef_not_ends_with?: Maybe<Scalars['String']>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highRef?: Maybe<Scalars['String']>;\n  highRef_not?: Maybe<Scalars['String']>;\n  highRef_gt?: Maybe<Scalars['String']>;\n  highRef_lt?: Maybe<Scalars['String']>;\n  highRef_gte?: Maybe<Scalars['String']>;\n  highRef_lte?: Maybe<Scalars['String']>;\n  highRef_in?: Maybe<Array<Scalars['String']>>;\n  highRef_not_in?: Maybe<Array<Scalars['String']>>;\n  highRef_contains?: Maybe<Scalars['String']>;\n  highRef_not_contains?: Maybe<Scalars['String']>;\n  highRef_starts_with?: Maybe<Scalars['String']>;\n  highRef_not_starts_with?: Maybe<Scalars['String']>;\n  highRef_ends_with?: Maybe<Scalars['String']>;\n  highRef_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MonthlyCurrencyPriceCandle_OrderBy {\n  Id = 'id',\n  Currency = 'currency',\n  Group = 'group',\n  From = 'from',\n  To = 'to',\n  Open = 'open',\n  OpenRef = 'openRef',\n  Close = 'close',\n  CloseRef = 'closeRef',\n  Low = 'low',\n  LowRef = 'lowRef',\n  High = 'high',\n  HighRef = 'highRef'\n}\n\nexport type MonthlyFundState = PeriodicFundStateInterface & {\n  __typename?: 'MonthlyFundState';\n  id: Scalars['ID'];\n  fund: Fund;\n  start: Scalars['BigInt'];\n  end: Scalars['BigInt'];\n  first: FundState;\n  last: FundState;\n};\n\nexport type MonthlyFundState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  start?: Maybe<Scalars['BigInt']>;\n  start_not?: Maybe<Scalars['BigInt']>;\n  start_gt?: Maybe<Scalars['BigInt']>;\n  start_lt?: Maybe<Scalars['BigInt']>;\n  start_gte?: Maybe<Scalars['BigInt']>;\n  start_lte?: Maybe<Scalars['BigInt']>;\n  start_in?: Maybe<Array<Scalars['BigInt']>>;\n  start_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  end?: Maybe<Scalars['BigInt']>;\n  end_not?: Maybe<Scalars['BigInt']>;\n  end_gt?: Maybe<Scalars['BigInt']>;\n  end_lt?: Maybe<Scalars['BigInt']>;\n  end_gte?: Maybe<Scalars['BigInt']>;\n  end_lte?: Maybe<Scalars['BigInt']>;\n  end_in?: Maybe<Array<Scalars['BigInt']>>;\n  end_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  first?: Maybe<Scalars['String']>;\n  first_not?: Maybe<Scalars['String']>;\n  first_gt?: Maybe<Scalars['String']>;\n  first_lt?: Maybe<Scalars['String']>;\n  first_gte?: Maybe<Scalars['String']>;\n  first_lte?: Maybe<Scalars['String']>;\n  first_in?: Maybe<Array<Scalars['String']>>;\n  first_not_in?: Maybe<Array<Scalars['String']>>;\n  first_contains?: Maybe<Scalars['String']>;\n  first_not_contains?: Maybe<Scalars['String']>;\n  first_starts_with?: Maybe<Scalars['String']>;\n  first_not_starts_with?: Maybe<Scalars['String']>;\n  first_ends_with?: Maybe<Scalars['String']>;\n  first_not_ends_with?: Maybe<Scalars['String']>;\n  last?: Maybe<Scalars['String']>;\n  last_not?: Maybe<Scalars['String']>;\n  last_gt?: Maybe<Scalars['String']>;\n  last_lt?: Maybe<Scalars['String']>;\n  last_gte?: Maybe<Scalars['String']>;\n  last_lte?: Maybe<Scalars['String']>;\n  last_in?: Maybe<Array<Scalars['String']>>;\n  last_not_in?: Maybe<Array<Scalars['String']>>;\n  last_contains?: Maybe<Scalars['String']>;\n  last_not_contains?: Maybe<Scalars['String']>;\n  last_starts_with?: Maybe<Scalars['String']>;\n  last_not_starts_with?: Maybe<Scalars['String']>;\n  last_ends_with?: Maybe<Scalars['String']>;\n  last_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MonthlyFundState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Start = 'start',\n  End = 'end',\n  First = 'first',\n  Last = 'last'\n}\n\nexport type MonthlyPriceCandleGroup = {\n  __typename?: 'MonthlyPriceCandleGroup';\n  id: Scalars['ID'];\n  from: Scalars['BigInt'];\n  to: Scalars['BigInt'];\n  assetCandles: Array<MonthlyAssetPriceCandle>;\n  currencyCandles: Array<MonthlyCurrencyPriceCandle>;\n};\n\n\nexport type MonthlyPriceCandleGroupAssetCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyAssetPriceCandle_Filter>;\n};\n\n\nexport type MonthlyPriceCandleGroupCurrencyCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;\n};\n\nexport type MonthlyPriceCandleGroup_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  from?: Maybe<Scalars['BigInt']>;\n  from_not?: Maybe<Scalars['BigInt']>;\n  from_gt?: Maybe<Scalars['BigInt']>;\n  from_lt?: Maybe<Scalars['BigInt']>;\n  from_gte?: Maybe<Scalars['BigInt']>;\n  from_lte?: Maybe<Scalars['BigInt']>;\n  from_in?: Maybe<Array<Scalars['BigInt']>>;\n  from_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  to?: Maybe<Scalars['BigInt']>;\n  to_not?: Maybe<Scalars['BigInt']>;\n  to_gt?: Maybe<Scalars['BigInt']>;\n  to_lt?: Maybe<Scalars['BigInt']>;\n  to_gte?: Maybe<Scalars['BigInt']>;\n  to_lte?: Maybe<Scalars['BigInt']>;\n  to_in?: Maybe<Array<Scalars['BigInt']>>;\n  to_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum MonthlyPriceCandleGroup_OrderBy {\n  Id = 'id',\n  From = 'from',\n  To = 'to',\n  AssetCandles = 'assetCandles',\n  CurrencyCandles = 'currencyCandles'\n}\n\nexport type MultiLendTrade = Trade & {\n  __typename?: 'MultiLendTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmounts: Array<AssetAmount>;\n  outgoingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type MultiLendTradeIncomingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\n\nexport type MultiLendTradeOutgoingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type MultiLendTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MultiLendTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmounts = 'incomingAssetAmounts',\n  OutgoingAssetAmounts = 'outgoingAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type MultiRedeemTrade = Trade & {\n  __typename?: 'MultiRedeemTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmounts: Array<AssetAmount>;\n  outgoingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type MultiRedeemTradeIncomingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\n\nexport type MultiRedeemTradeOutgoingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type MultiRedeemTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MultiRedeemTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmounts = 'incomingAssetAmounts',\n  OutgoingAssetAmounts = 'outgoingAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type MultiTokenSwapTrade = Trade & {\n  __typename?: 'MultiTokenSwapTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmounts: Array<AssetAmount>;\n  outgoingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type MultiTokenSwapTradeIncomingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\n\nexport type MultiTokenSwapTradeOutgoingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type MultiTokenSwapTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum MultiTokenSwapTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmounts = 'incomingAssetAmounts',\n  OutgoingAssetAmounts = 'outgoingAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type Network = {\n  __typename?: 'Network';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  currentRelease?: Maybe<Release>;\n  releases?: Maybe<Array<Release>>;\n  state: NetworkState;\n  stateHistory: Array<NetworkState>;\n};\n\n\nexport type NetworkReleasesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Release_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Release_Filter>;\n};\n\n\nexport type NetworkStateHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkState_Filter>;\n};\n\nexport type NetworkAssetHolding = {\n  __typename?: 'NetworkAssetHolding';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  asset: Asset;\n  amount: Scalars['BigDecimal'];\n};\n\nexport type NetworkAssetHolding_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['BigDecimal']>;\n  amount_not?: Maybe<Scalars['BigDecimal']>;\n  amount_gt?: Maybe<Scalars['BigDecimal']>;\n  amount_lt?: Maybe<Scalars['BigDecimal']>;\n  amount_gte?: Maybe<Scalars['BigDecimal']>;\n  amount_lte?: Maybe<Scalars['BigDecimal']>;\n  amount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum NetworkAssetHolding_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Asset = 'asset',\n  Amount = 'amount'\n}\n\nexport type NetworkEventInterface = {\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type NetworkEventInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum NetworkEventInterface_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type NetworkState = {\n  __typename?: 'NetworkState';\n  id: Scalars['ID'];\n  network: Network;\n  timestamp: Scalars['BigInt'];\n  assetHoldings: Array<NetworkAssetHolding>;\n  funds: Scalars['Int'];\n  managers: Scalars['Int'];\n  investors: Scalars['Int'];\n  investments: Scalars['Int'];\n};\n\n\nexport type NetworkStateAssetHoldingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkAssetHolding_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkAssetHolding_Filter>;\n};\n\nexport type NetworkState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  network?: Maybe<Scalars['String']>;\n  network_not?: Maybe<Scalars['String']>;\n  network_gt?: Maybe<Scalars['String']>;\n  network_lt?: Maybe<Scalars['String']>;\n  network_gte?: Maybe<Scalars['String']>;\n  network_lte?: Maybe<Scalars['String']>;\n  network_in?: Maybe<Array<Scalars['String']>>;\n  network_not_in?: Maybe<Array<Scalars['String']>>;\n  network_contains?: Maybe<Scalars['String']>;\n  network_not_contains?: Maybe<Scalars['String']>;\n  network_starts_with?: Maybe<Scalars['String']>;\n  network_not_starts_with?: Maybe<Scalars['String']>;\n  network_ends_with?: Maybe<Scalars['String']>;\n  network_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  assetHoldings?: Maybe<Array<Scalars['String']>>;\n  assetHoldings_not?: Maybe<Array<Scalars['String']>>;\n  assetHoldings_contains?: Maybe<Array<Scalars['String']>>;\n  assetHoldings_not_contains?: Maybe<Array<Scalars['String']>>;\n  funds?: Maybe<Scalars['Int']>;\n  funds_not?: Maybe<Scalars['Int']>;\n  funds_gt?: Maybe<Scalars['Int']>;\n  funds_lt?: Maybe<Scalars['Int']>;\n  funds_gte?: Maybe<Scalars['Int']>;\n  funds_lte?: Maybe<Scalars['Int']>;\n  funds_in?: Maybe<Array<Scalars['Int']>>;\n  funds_not_in?: Maybe<Array<Scalars['Int']>>;\n  managers?: Maybe<Scalars['Int']>;\n  managers_not?: Maybe<Scalars['Int']>;\n  managers_gt?: Maybe<Scalars['Int']>;\n  managers_lt?: Maybe<Scalars['Int']>;\n  managers_gte?: Maybe<Scalars['Int']>;\n  managers_lte?: Maybe<Scalars['Int']>;\n  managers_in?: Maybe<Array<Scalars['Int']>>;\n  managers_not_in?: Maybe<Array<Scalars['Int']>>;\n  investors?: Maybe<Scalars['Int']>;\n  investors_not?: Maybe<Scalars['Int']>;\n  investors_gt?: Maybe<Scalars['Int']>;\n  investors_lt?: Maybe<Scalars['Int']>;\n  investors_gte?: Maybe<Scalars['Int']>;\n  investors_lte?: Maybe<Scalars['Int']>;\n  investors_in?: Maybe<Array<Scalars['Int']>>;\n  investors_not_in?: Maybe<Array<Scalars['Int']>>;\n  investments?: Maybe<Scalars['Int']>;\n  investments_not?: Maybe<Scalars['Int']>;\n  investments_gt?: Maybe<Scalars['Int']>;\n  investments_lt?: Maybe<Scalars['Int']>;\n  investments_gte?: Maybe<Scalars['Int']>;\n  investments_lte?: Maybe<Scalars['Int']>;\n  investments_in?: Maybe<Array<Scalars['Int']>>;\n  investments_not_in?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport enum NetworkState_OrderBy {\n  Id = 'id',\n  Network = 'network',\n  Timestamp = 'timestamp',\n  AssetHoldings = 'assetHoldings',\n  Funds = 'funds',\n  Managers = 'managers',\n  Investors = 'investors',\n  Investments = 'investments'\n}\n\nexport type Network_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  currentRelease?: Maybe<Scalars['String']>;\n  currentRelease_not?: Maybe<Scalars['String']>;\n  currentRelease_gt?: Maybe<Scalars['String']>;\n  currentRelease_lt?: Maybe<Scalars['String']>;\n  currentRelease_gte?: Maybe<Scalars['String']>;\n  currentRelease_lte?: Maybe<Scalars['String']>;\n  currentRelease_in?: Maybe<Array<Scalars['String']>>;\n  currentRelease_not_in?: Maybe<Array<Scalars['String']>>;\n  currentRelease_contains?: Maybe<Scalars['String']>;\n  currentRelease_not_contains?: Maybe<Scalars['String']>;\n  currentRelease_starts_with?: Maybe<Scalars['String']>;\n  currentRelease_not_starts_with?: Maybe<Scalars['String']>;\n  currentRelease_ends_with?: Maybe<Scalars['String']>;\n  currentRelease_not_ends_with?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  state_not?: Maybe<Scalars['String']>;\n  state_gt?: Maybe<Scalars['String']>;\n  state_lt?: Maybe<Scalars['String']>;\n  state_gte?: Maybe<Scalars['String']>;\n  state_lte?: Maybe<Scalars['String']>;\n  state_in?: Maybe<Array<Scalars['String']>>;\n  state_not_in?: Maybe<Array<Scalars['String']>>;\n  state_contains?: Maybe<Scalars['String']>;\n  state_not_contains?: Maybe<Scalars['String']>;\n  state_starts_with?: Maybe<Scalars['String']>;\n  state_not_starts_with?: Maybe<Scalars['String']>;\n  state_ends_with?: Maybe<Scalars['String']>;\n  state_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Network_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  CurrentRelease = 'currentRelease',\n  Releases = 'releases',\n  State = 'state',\n  StateHistory = 'stateHistory'\n}\n\nexport type NewFundCreatedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'NewFundCreatedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  comptroller: ComptrollerProxy;\n  vaultProxy: Fund;\n  creator: Account;\n  fundOwner: Account;\n  fundName: Scalars['String'];\n  denominationAsset: Asset;\n  sharesActionTimelock: Scalars['BigInt'];\n  feeManagerConfigData: Scalars['String'];\n  policyManagerConfigData: Scalars['String'];\n  transaction: Transaction;\n};\n\nexport type NewFundCreatedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy?: Maybe<Scalars['String']>;\n  vaultProxy_not?: Maybe<Scalars['String']>;\n  vaultProxy_gt?: Maybe<Scalars['String']>;\n  vaultProxy_lt?: Maybe<Scalars['String']>;\n  vaultProxy_gte?: Maybe<Scalars['String']>;\n  vaultProxy_lte?: Maybe<Scalars['String']>;\n  vaultProxy_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_contains?: Maybe<Scalars['String']>;\n  vaultProxy_not_contains?: Maybe<Scalars['String']>;\n  vaultProxy_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_ends_with?: Maybe<Scalars['String']>;\n  creator?: Maybe<Scalars['String']>;\n  creator_not?: Maybe<Scalars['String']>;\n  creator_gt?: Maybe<Scalars['String']>;\n  creator_lt?: Maybe<Scalars['String']>;\n  creator_gte?: Maybe<Scalars['String']>;\n  creator_lte?: Maybe<Scalars['String']>;\n  creator_in?: Maybe<Array<Scalars['String']>>;\n  creator_not_in?: Maybe<Array<Scalars['String']>>;\n  creator_contains?: Maybe<Scalars['String']>;\n  creator_not_contains?: Maybe<Scalars['String']>;\n  creator_starts_with?: Maybe<Scalars['String']>;\n  creator_not_starts_with?: Maybe<Scalars['String']>;\n  creator_ends_with?: Maybe<Scalars['String']>;\n  creator_not_ends_with?: Maybe<Scalars['String']>;\n  fundOwner?: Maybe<Scalars['String']>;\n  fundOwner_not?: Maybe<Scalars['String']>;\n  fundOwner_gt?: Maybe<Scalars['String']>;\n  fundOwner_lt?: Maybe<Scalars['String']>;\n  fundOwner_gte?: Maybe<Scalars['String']>;\n  fundOwner_lte?: Maybe<Scalars['String']>;\n  fundOwner_in?: Maybe<Array<Scalars['String']>>;\n  fundOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  fundOwner_contains?: Maybe<Scalars['String']>;\n  fundOwner_not_contains?: Maybe<Scalars['String']>;\n  fundOwner_starts_with?: Maybe<Scalars['String']>;\n  fundOwner_not_starts_with?: Maybe<Scalars['String']>;\n  fundOwner_ends_with?: Maybe<Scalars['String']>;\n  fundOwner_not_ends_with?: Maybe<Scalars['String']>;\n  fundName?: Maybe<Scalars['String']>;\n  fundName_not?: Maybe<Scalars['String']>;\n  fundName_gt?: Maybe<Scalars['String']>;\n  fundName_lt?: Maybe<Scalars['String']>;\n  fundName_gte?: Maybe<Scalars['String']>;\n  fundName_lte?: Maybe<Scalars['String']>;\n  fundName_in?: Maybe<Array<Scalars['String']>>;\n  fundName_not_in?: Maybe<Array<Scalars['String']>>;\n  fundName_contains?: Maybe<Scalars['String']>;\n  fundName_not_contains?: Maybe<Scalars['String']>;\n  fundName_starts_with?: Maybe<Scalars['String']>;\n  fundName_not_starts_with?: Maybe<Scalars['String']>;\n  fundName_ends_with?: Maybe<Scalars['String']>;\n  fundName_not_ends_with?: Maybe<Scalars['String']>;\n  denominationAsset?: Maybe<Scalars['String']>;\n  denominationAsset_not?: Maybe<Scalars['String']>;\n  denominationAsset_gt?: Maybe<Scalars['String']>;\n  denominationAsset_lt?: Maybe<Scalars['String']>;\n  denominationAsset_gte?: Maybe<Scalars['String']>;\n  denominationAsset_lte?: Maybe<Scalars['String']>;\n  denominationAsset_in?: Maybe<Array<Scalars['String']>>;\n  denominationAsset_not_in?: Maybe<Array<Scalars['String']>>;\n  denominationAsset_contains?: Maybe<Scalars['String']>;\n  denominationAsset_not_contains?: Maybe<Scalars['String']>;\n  denominationAsset_starts_with?: Maybe<Scalars['String']>;\n  denominationAsset_not_starts_with?: Maybe<Scalars['String']>;\n  denominationAsset_ends_with?: Maybe<Scalars['String']>;\n  denominationAsset_not_ends_with?: Maybe<Scalars['String']>;\n  sharesActionTimelock?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_not?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_gt?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_lt?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_gte?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_lte?: Maybe<Scalars['BigInt']>;\n  sharesActionTimelock_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesActionTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeManagerConfigData?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not?: Maybe<Scalars['String']>;\n  feeManagerConfigData_gt?: Maybe<Scalars['String']>;\n  feeManagerConfigData_lt?: Maybe<Scalars['String']>;\n  feeManagerConfigData_gte?: Maybe<Scalars['String']>;\n  feeManagerConfigData_lte?: Maybe<Scalars['String']>;\n  feeManagerConfigData_in?: Maybe<Array<Scalars['String']>>;\n  feeManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;\n  feeManagerConfigData_contains?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_contains?: Maybe<Scalars['String']>;\n  feeManagerConfigData_starts_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_ends_with?: Maybe<Scalars['String']>;\n  feeManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not?: Maybe<Scalars['String']>;\n  policyManagerConfigData_gt?: Maybe<Scalars['String']>;\n  policyManagerConfigData_lt?: Maybe<Scalars['String']>;\n  policyManagerConfigData_gte?: Maybe<Scalars['String']>;\n  policyManagerConfigData_lte?: Maybe<Scalars['String']>;\n  policyManagerConfigData_in?: Maybe<Array<Scalars['String']>>;\n  policyManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;\n  policyManagerConfigData_contains?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_contains?: Maybe<Scalars['String']>;\n  policyManagerConfigData_starts_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_ends_with?: Maybe<Scalars['String']>;\n  policyManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum NewFundCreatedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Comptroller = 'comptroller',\n  VaultProxy = 'vaultProxy',\n  Creator = 'creator',\n  FundOwner = 'fundOwner',\n  FundName = 'fundName',\n  DenominationAsset = 'denominationAsset',\n  SharesActionTimelock = 'sharesActionTimelock',\n  FeeManagerConfigData = 'feeManagerConfigData',\n  PolicyManagerConfigData = 'policyManagerConfigData',\n  Transaction = 'transaction'\n}\n\nexport type NominatedOwnerRemovedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'NominatedOwnerRemovedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  nominatedOwner: Scalars['String'];\n};\n\nexport type NominatedOwnerRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  nominatedOwner?: Maybe<Scalars['String']>;\n  nominatedOwner_not?: Maybe<Scalars['String']>;\n  nominatedOwner_gt?: Maybe<Scalars['String']>;\n  nominatedOwner_lt?: Maybe<Scalars['String']>;\n  nominatedOwner_gte?: Maybe<Scalars['String']>;\n  nominatedOwner_lte?: Maybe<Scalars['String']>;\n  nominatedOwner_in?: Maybe<Array<Scalars['String']>>;\n  nominatedOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  nominatedOwner_contains?: Maybe<Scalars['String']>;\n  nominatedOwner_not_contains?: Maybe<Scalars['String']>;\n  nominatedOwner_starts_with?: Maybe<Scalars['String']>;\n  nominatedOwner_not_starts_with?: Maybe<Scalars['String']>;\n  nominatedOwner_ends_with?: Maybe<Scalars['String']>;\n  nominatedOwner_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum NominatedOwnerRemovedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  NominatedOwner = 'nominatedOwner'\n}\n\nexport type NominatedOwnerSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'NominatedOwnerSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  nominatedOwner: Scalars['String'];\n};\n\nexport type NominatedOwnerSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  nominatedOwner?: Maybe<Scalars['String']>;\n  nominatedOwner_not?: Maybe<Scalars['String']>;\n  nominatedOwner_gt?: Maybe<Scalars['String']>;\n  nominatedOwner_lt?: Maybe<Scalars['String']>;\n  nominatedOwner_gte?: Maybe<Scalars['String']>;\n  nominatedOwner_lte?: Maybe<Scalars['String']>;\n  nominatedOwner_in?: Maybe<Array<Scalars['String']>>;\n  nominatedOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  nominatedOwner_contains?: Maybe<Scalars['String']>;\n  nominatedOwner_not_contains?: Maybe<Scalars['String']>;\n  nominatedOwner_starts_with?: Maybe<Scalars['String']>;\n  nominatedOwner_not_starts_with?: Maybe<Scalars['String']>;\n  nominatedOwner_ends_with?: Maybe<Scalars['String']>;\n  nominatedOwner_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum NominatedOwnerSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  NominatedOwner = 'nominatedOwner'\n}\n\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type OverridePauseSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'OverridePauseSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  overridePause: Scalars['Boolean'];\n};\n\nexport type OverridePauseSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  overridePause?: Maybe<Scalars['Boolean']>;\n  overridePause_not?: Maybe<Scalars['Boolean']>;\n  overridePause_in?: Maybe<Array<Scalars['Boolean']>>;\n  overridePause_not_in?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport enum OverridePauseSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  OverridePause = 'overridePause'\n}\n\nexport type OwnerSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'OwnerSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevOwner?: Maybe<Account>;\n  nextOwner: Account;\n};\n\nexport type OwnerSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevOwner?: Maybe<Scalars['String']>;\n  prevOwner_not?: Maybe<Scalars['String']>;\n  prevOwner_gt?: Maybe<Scalars['String']>;\n  prevOwner_lt?: Maybe<Scalars['String']>;\n  prevOwner_gte?: Maybe<Scalars['String']>;\n  prevOwner_lte?: Maybe<Scalars['String']>;\n  prevOwner_in?: Maybe<Array<Scalars['String']>>;\n  prevOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  prevOwner_contains?: Maybe<Scalars['String']>;\n  prevOwner_not_contains?: Maybe<Scalars['String']>;\n  prevOwner_starts_with?: Maybe<Scalars['String']>;\n  prevOwner_not_starts_with?: Maybe<Scalars['String']>;\n  prevOwner_ends_with?: Maybe<Scalars['String']>;\n  prevOwner_not_ends_with?: Maybe<Scalars['String']>;\n  nextOwner?: Maybe<Scalars['String']>;\n  nextOwner_not?: Maybe<Scalars['String']>;\n  nextOwner_gt?: Maybe<Scalars['String']>;\n  nextOwner_lt?: Maybe<Scalars['String']>;\n  nextOwner_gte?: Maybe<Scalars['String']>;\n  nextOwner_lte?: Maybe<Scalars['String']>;\n  nextOwner_in?: Maybe<Array<Scalars['String']>>;\n  nextOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  nextOwner_contains?: Maybe<Scalars['String']>;\n  nextOwner_not_contains?: Maybe<Scalars['String']>;\n  nextOwner_starts_with?: Maybe<Scalars['String']>;\n  nextOwner_not_starts_with?: Maybe<Scalars['String']>;\n  nextOwner_ends_with?: Maybe<Scalars['String']>;\n  nextOwner_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum OwnerSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevOwner = 'prevOwner',\n  NextOwner = 'nextOwner'\n}\n\nexport type OwnershipTransferredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'OwnershipTransferredEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  previousOwner: Scalars['String'];\n  newOwner: Scalars['String'];\n};\n\nexport type OwnershipTransferredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  previousOwner?: Maybe<Scalars['String']>;\n  previousOwner_not?: Maybe<Scalars['String']>;\n  previousOwner_gt?: Maybe<Scalars['String']>;\n  previousOwner_lt?: Maybe<Scalars['String']>;\n  previousOwner_gte?: Maybe<Scalars['String']>;\n  previousOwner_lte?: Maybe<Scalars['String']>;\n  previousOwner_in?: Maybe<Array<Scalars['String']>>;\n  previousOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  previousOwner_contains?: Maybe<Scalars['String']>;\n  previousOwner_not_contains?: Maybe<Scalars['String']>;\n  previousOwner_starts_with?: Maybe<Scalars['String']>;\n  previousOwner_not_starts_with?: Maybe<Scalars['String']>;\n  previousOwner_ends_with?: Maybe<Scalars['String']>;\n  previousOwner_not_ends_with?: Maybe<Scalars['String']>;\n  newOwner?: Maybe<Scalars['String']>;\n  newOwner_not?: Maybe<Scalars['String']>;\n  newOwner_gt?: Maybe<Scalars['String']>;\n  newOwner_lt?: Maybe<Scalars['String']>;\n  newOwner_gte?: Maybe<Scalars['String']>;\n  newOwner_lte?: Maybe<Scalars['String']>;\n  newOwner_in?: Maybe<Array<Scalars['String']>>;\n  newOwner_not_in?: Maybe<Array<Scalars['String']>>;\n  newOwner_contains?: Maybe<Scalars['String']>;\n  newOwner_not_contains?: Maybe<Scalars['String']>;\n  newOwner_starts_with?: Maybe<Scalars['String']>;\n  newOwner_not_starts_with?: Maybe<Scalars['String']>;\n  newOwner_ends_with?: Maybe<Scalars['String']>;\n  newOwner_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum OwnershipTransferredEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PreviousOwner = 'previousOwner',\n  NewOwner = 'newOwner'\n}\n\nexport type PerformanceFeeActivatedForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'PerformanceFeeActivatedForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  highWaterMark: Scalars['BigDecimal'];\n};\n\nexport type PerformanceFeeActivatedForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  highWaterMark?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_not?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_gt?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_lt?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_gte?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_lte?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PerformanceFeeActivatedForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  HighWaterMark = 'highWaterMark'\n}\n\nexport type PerformanceFeePaidOutEvent = EventInterface & FundEventInterface & {\n  __typename?: 'PerformanceFeePaidOutEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  prevHighWaterMark: Scalars['BigDecimal'];\n  nextHighWaterMark: Scalars['BigDecimal'];\n};\n\nexport type PerformanceFeePaidOutEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  prevHighWaterMark?: Maybe<Scalars['BigDecimal']>;\n  prevHighWaterMark_not?: Maybe<Scalars['BigDecimal']>;\n  prevHighWaterMark_gt?: Maybe<Scalars['BigDecimal']>;\n  prevHighWaterMark_lt?: Maybe<Scalars['BigDecimal']>;\n  prevHighWaterMark_gte?: Maybe<Scalars['BigDecimal']>;\n  prevHighWaterMark_lte?: Maybe<Scalars['BigDecimal']>;\n  prevHighWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  prevHighWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  nextHighWaterMark?: Maybe<Scalars['BigDecimal']>;\n  nextHighWaterMark_not?: Maybe<Scalars['BigDecimal']>;\n  nextHighWaterMark_gt?: Maybe<Scalars['BigDecimal']>;\n  nextHighWaterMark_lt?: Maybe<Scalars['BigDecimal']>;\n  nextHighWaterMark_gte?: Maybe<Scalars['BigDecimal']>;\n  nextHighWaterMark_lte?: Maybe<Scalars['BigDecimal']>;\n  nextHighWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  nextHighWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PerformanceFeePaidOutEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  PrevHighWaterMark = 'prevHighWaterMark',\n  NextHighWaterMark = 'nextHighWaterMark'\n}\n\nexport type PerformanceFeePerformanceUpdatedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'PerformanceFeePerformanceUpdatedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  prevAggregateValueDue: Scalars['BigDecimal'];\n  nextAggregateValueDue: Scalars['BigDecimal'];\n  sharesOutstandingDiff: Scalars['BigDecimal'];\n};\n\nexport type PerformanceFeePerformanceUpdatedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  prevAggregateValueDue?: Maybe<Scalars['BigDecimal']>;\n  prevAggregateValueDue_not?: Maybe<Scalars['BigDecimal']>;\n  prevAggregateValueDue_gt?: Maybe<Scalars['BigDecimal']>;\n  prevAggregateValueDue_lt?: Maybe<Scalars['BigDecimal']>;\n  prevAggregateValueDue_gte?: Maybe<Scalars['BigDecimal']>;\n  prevAggregateValueDue_lte?: Maybe<Scalars['BigDecimal']>;\n  prevAggregateValueDue_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  prevAggregateValueDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  nextAggregateValueDue?: Maybe<Scalars['BigDecimal']>;\n  nextAggregateValueDue_not?: Maybe<Scalars['BigDecimal']>;\n  nextAggregateValueDue_gt?: Maybe<Scalars['BigDecimal']>;\n  nextAggregateValueDue_lt?: Maybe<Scalars['BigDecimal']>;\n  nextAggregateValueDue_gte?: Maybe<Scalars['BigDecimal']>;\n  nextAggregateValueDue_lte?: Maybe<Scalars['BigDecimal']>;\n  nextAggregateValueDue_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  nextAggregateValueDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesOutstandingDiff?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstandingDiff_not?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstandingDiff_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstandingDiff_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstandingDiff_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstandingDiff_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstandingDiff_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesOutstandingDiff_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PerformanceFeePerformanceUpdatedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  PrevAggregateValueDue = 'prevAggregateValueDue',\n  NextAggregateValueDue = 'nextAggregateValueDue',\n  SharesOutstandingDiff = 'sharesOutstandingDiff'\n}\n\nexport type PerformanceFeeSetting = FeeSettingInterface & {\n  __typename?: 'PerformanceFeeSetting';\n  id: Scalars['ID'];\n  fee: Fee;\n  comptroller: ComptrollerProxy;\n  rate: Scalars['BigDecimal'];\n  period: Scalars['BigInt'];\n  activated: Scalars['BigInt'];\n  timestamp: Scalars['BigInt'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type PerformanceFeeSettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type PerformanceFeeSetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  rate_not?: Maybe<Scalars['BigDecimal']>;\n  rate_gt?: Maybe<Scalars['BigDecimal']>;\n  rate_lt?: Maybe<Scalars['BigDecimal']>;\n  rate_gte?: Maybe<Scalars['BigDecimal']>;\n  rate_lte?: Maybe<Scalars['BigDecimal']>;\n  rate_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  period?: Maybe<Scalars['BigInt']>;\n  period_not?: Maybe<Scalars['BigInt']>;\n  period_gt?: Maybe<Scalars['BigInt']>;\n  period_lt?: Maybe<Scalars['BigInt']>;\n  period_gte?: Maybe<Scalars['BigInt']>;\n  period_lte?: Maybe<Scalars['BigInt']>;\n  period_in?: Maybe<Array<Scalars['BigInt']>>;\n  period_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  activated?: Maybe<Scalars['BigInt']>;\n  activated_not?: Maybe<Scalars['BigInt']>;\n  activated_gt?: Maybe<Scalars['BigInt']>;\n  activated_lt?: Maybe<Scalars['BigInt']>;\n  activated_gte?: Maybe<Scalars['BigInt']>;\n  activated_lte?: Maybe<Scalars['BigInt']>;\n  activated_in?: Maybe<Array<Scalars['BigInt']>>;\n  activated_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum PerformanceFeeSetting_OrderBy {\n  Id = 'id',\n  Fee = 'fee',\n  Comptroller = 'comptroller',\n  Rate = 'rate',\n  Period = 'period',\n  Activated = 'activated',\n  Timestamp = 'timestamp',\n  Events = 'events'\n}\n\nexport type PerformanceFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {\n  __typename?: 'PerformanceFeeSettingsAddedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptroller: ComptrollerProxy;\n  rate: Scalars['BigDecimal'];\n  period: Scalars['BigInt'];\n};\n\nexport type PerformanceFeeSettingsAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  rate_not?: Maybe<Scalars['BigDecimal']>;\n  rate_gt?: Maybe<Scalars['BigDecimal']>;\n  rate_lt?: Maybe<Scalars['BigDecimal']>;\n  rate_gte?: Maybe<Scalars['BigDecimal']>;\n  rate_lte?: Maybe<Scalars['BigDecimal']>;\n  rate_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  period?: Maybe<Scalars['BigInt']>;\n  period_not?: Maybe<Scalars['BigInt']>;\n  period_gt?: Maybe<Scalars['BigInt']>;\n  period_lt?: Maybe<Scalars['BigInt']>;\n  period_gte?: Maybe<Scalars['BigInt']>;\n  period_lte?: Maybe<Scalars['BigInt']>;\n  period_in?: Maybe<Array<Scalars['BigInt']>>;\n  period_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum PerformanceFeeSettingsAddedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Comptroller = 'comptroller',\n  Rate = 'rate',\n  Period = 'period'\n}\n\nexport type PerformanceFeeSharePriceUpdatedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'PerformanceFeeSharePriceUpdatedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  prevSharePrice: Scalars['BigDecimal'];\n  nextSharePrice: Scalars['BigDecimal'];\n};\n\nexport type PerformanceFeeSharePriceUpdatedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  prevSharePrice?: Maybe<Scalars['BigDecimal']>;\n  prevSharePrice_not?: Maybe<Scalars['BigDecimal']>;\n  prevSharePrice_gt?: Maybe<Scalars['BigDecimal']>;\n  prevSharePrice_lt?: Maybe<Scalars['BigDecimal']>;\n  prevSharePrice_gte?: Maybe<Scalars['BigDecimal']>;\n  prevSharePrice_lte?: Maybe<Scalars['BigDecimal']>;\n  prevSharePrice_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  prevSharePrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  nextSharePrice?: Maybe<Scalars['BigDecimal']>;\n  nextSharePrice_not?: Maybe<Scalars['BigDecimal']>;\n  nextSharePrice_gt?: Maybe<Scalars['BigDecimal']>;\n  nextSharePrice_lt?: Maybe<Scalars['BigDecimal']>;\n  nextSharePrice_gte?: Maybe<Scalars['BigDecimal']>;\n  nextSharePrice_lte?: Maybe<Scalars['BigDecimal']>;\n  nextSharePrice_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  nextSharePrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PerformanceFeeSharePriceUpdatedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  PrevSharePrice = 'prevSharePrice',\n  NextSharePrice = 'nextSharePrice'\n}\n\nexport type PerformanceFeeState = FundStateInterface & IndividualFeeStateInterface & {\n  __typename?: 'PerformanceFeeState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  fee: Fee;\n  lastPaid: Scalars['BigInt'];\n  grossSharePrice: Scalars['BigDecimal'];\n  aggregateValueDue: Scalars['BigDecimal'];\n  highWaterMark: Scalars['BigDecimal'];\n  sharesOutstanding: Scalars['BigDecimal'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type PerformanceFeeStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type PerformanceFeeState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  lastPaid?: Maybe<Scalars['BigInt']>;\n  lastPaid_not?: Maybe<Scalars['BigInt']>;\n  lastPaid_gt?: Maybe<Scalars['BigInt']>;\n  lastPaid_lt?: Maybe<Scalars['BigInt']>;\n  lastPaid_gte?: Maybe<Scalars['BigInt']>;\n  lastPaid_lte?: Maybe<Scalars['BigInt']>;\n  lastPaid_in?: Maybe<Array<Scalars['BigInt']>>;\n  lastPaid_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  grossSharePrice?: Maybe<Scalars['BigDecimal']>;\n  grossSharePrice_not?: Maybe<Scalars['BigDecimal']>;\n  grossSharePrice_gt?: Maybe<Scalars['BigDecimal']>;\n  grossSharePrice_lt?: Maybe<Scalars['BigDecimal']>;\n  grossSharePrice_gte?: Maybe<Scalars['BigDecimal']>;\n  grossSharePrice_lte?: Maybe<Scalars['BigDecimal']>;\n  grossSharePrice_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  grossSharePrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  aggregateValueDue?: Maybe<Scalars['BigDecimal']>;\n  aggregateValueDue_not?: Maybe<Scalars['BigDecimal']>;\n  aggregateValueDue_gt?: Maybe<Scalars['BigDecimal']>;\n  aggregateValueDue_lt?: Maybe<Scalars['BigDecimal']>;\n  aggregateValueDue_gte?: Maybe<Scalars['BigDecimal']>;\n  aggregateValueDue_lte?: Maybe<Scalars['BigDecimal']>;\n  aggregateValueDue_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  aggregateValueDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highWaterMark?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_not?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_gt?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_lt?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_gte?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_lte?: Maybe<Scalars['BigDecimal']>;\n  highWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  highWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesOutstanding?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstanding_not?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstanding_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstanding_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstanding_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstanding_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesOutstanding_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesOutstanding_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum PerformanceFeeState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Fee = 'fee',\n  LastPaid = 'lastPaid',\n  GrossSharePrice = 'grossSharePrice',\n  AggregateValueDue = 'aggregateValueDue',\n  HighWaterMark = 'highWaterMark',\n  SharesOutstanding = 'sharesOutstanding',\n  Events = 'events'\n}\n\nexport type PeriodicFundStateInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  start: Scalars['BigInt'];\n  end: Scalars['BigInt'];\n  first: FundState;\n  last: FundState;\n};\n\nexport type PeriodicFundStateInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  start?: Maybe<Scalars['BigInt']>;\n  start_not?: Maybe<Scalars['BigInt']>;\n  start_gt?: Maybe<Scalars['BigInt']>;\n  start_lt?: Maybe<Scalars['BigInt']>;\n  start_gte?: Maybe<Scalars['BigInt']>;\n  start_lte?: Maybe<Scalars['BigInt']>;\n  start_in?: Maybe<Array<Scalars['BigInt']>>;\n  start_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  end?: Maybe<Scalars['BigInt']>;\n  end_not?: Maybe<Scalars['BigInt']>;\n  end_gt?: Maybe<Scalars['BigInt']>;\n  end_lt?: Maybe<Scalars['BigInt']>;\n  end_gte?: Maybe<Scalars['BigInt']>;\n  end_lte?: Maybe<Scalars['BigInt']>;\n  end_in?: Maybe<Array<Scalars['BigInt']>>;\n  end_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  first?: Maybe<Scalars['String']>;\n  first_not?: Maybe<Scalars['String']>;\n  first_gt?: Maybe<Scalars['String']>;\n  first_lt?: Maybe<Scalars['String']>;\n  first_gte?: Maybe<Scalars['String']>;\n  first_lte?: Maybe<Scalars['String']>;\n  first_in?: Maybe<Array<Scalars['String']>>;\n  first_not_in?: Maybe<Array<Scalars['String']>>;\n  first_contains?: Maybe<Scalars['String']>;\n  first_not_contains?: Maybe<Scalars['String']>;\n  first_starts_with?: Maybe<Scalars['String']>;\n  first_not_starts_with?: Maybe<Scalars['String']>;\n  first_ends_with?: Maybe<Scalars['String']>;\n  first_not_ends_with?: Maybe<Scalars['String']>;\n  last?: Maybe<Scalars['String']>;\n  last_not?: Maybe<Scalars['String']>;\n  last_gt?: Maybe<Scalars['String']>;\n  last_lt?: Maybe<Scalars['String']>;\n  last_gte?: Maybe<Scalars['String']>;\n  last_lte?: Maybe<Scalars['String']>;\n  last_in?: Maybe<Array<Scalars['String']>>;\n  last_not_in?: Maybe<Array<Scalars['String']>>;\n  last_contains?: Maybe<Scalars['String']>;\n  last_not_contains?: Maybe<Scalars['String']>;\n  last_starts_with?: Maybe<Scalars['String']>;\n  last_not_starts_with?: Maybe<Scalars['String']>;\n  last_ends_with?: Maybe<Scalars['String']>;\n  last_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum PeriodicFundStateInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Start = 'start',\n  End = 'end',\n  First = 'first',\n  Last = 'last'\n}\n\nexport type Policy = {\n  __typename?: 'Policy';\n  id: Scalars['ID'];\n  policyManager: PolicyManager;\n  identifier: Scalars['String'];\n  settings: Array<PolicySettingInterface>;\n};\n\n\nexport type PolicySettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicySettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicySettingInterface_Filter>;\n};\n\nexport type PolicyDeregisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'PolicyDeregisteredEvent';\n  id: Scalars['ID'];\n  identifier: Scalars['String'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  policy: Policy;\n};\n\nexport type PolicyDeregisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum PolicyDeregisteredEvent_OrderBy {\n  Id = 'id',\n  Identifier = 'identifier',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Policy = 'policy'\n}\n\nexport type PolicyDisabledForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'PolicyDisabledForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  policy: Policy;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type PolicyDisabledForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum PolicyDisabledForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Policy = 'policy',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type PolicyEnabledForFundEvent = EventInterface & FundEventInterface & {\n  __typename?: 'PolicyEnabledForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  policy: Policy;\n  settingsData: Scalars['String'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type PolicyEnabledForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  settingsData?: Maybe<Scalars['String']>;\n  settingsData_not?: Maybe<Scalars['String']>;\n  settingsData_gt?: Maybe<Scalars['String']>;\n  settingsData_lt?: Maybe<Scalars['String']>;\n  settingsData_gte?: Maybe<Scalars['String']>;\n  settingsData_lte?: Maybe<Scalars['String']>;\n  settingsData_in?: Maybe<Array<Scalars['String']>>;\n  settingsData_not_in?: Maybe<Array<Scalars['String']>>;\n  settingsData_contains?: Maybe<Scalars['String']>;\n  settingsData_not_contains?: Maybe<Scalars['String']>;\n  settingsData_starts_with?: Maybe<Scalars['String']>;\n  settingsData_not_starts_with?: Maybe<Scalars['String']>;\n  settingsData_ends_with?: Maybe<Scalars['String']>;\n  settingsData_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum PolicyEnabledForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Policy = 'policy',\n  SettingsData = 'settingsData',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport enum PolicyHook {\n  BuySharesSetup = 'BuySharesSetup',\n  PreBuyShares = 'PreBuyShares',\n  PostBuyShares = 'PostBuyShares',\n  BuySharesCompleted = 'BuySharesCompleted',\n  PreCallOnIntegration = 'PreCallOnIntegration',\n  PostCallOnIntegration = 'PostCallOnIntegration',\n  Unknown = 'Unknown'\n}\n\nexport type PolicyManager = {\n  __typename?: 'PolicyManager';\n  id: Scalars['ID'];\n  release: Release;\n  policies: Array<Policy>;\n};\n\n\nexport type PolicyManagerPoliciesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Policy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Policy_Filter>;\n};\n\nexport type PolicyManager_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  release?: Maybe<Scalars['String']>;\n  release_not?: Maybe<Scalars['String']>;\n  release_gt?: Maybe<Scalars['String']>;\n  release_lt?: Maybe<Scalars['String']>;\n  release_gte?: Maybe<Scalars['String']>;\n  release_lte?: Maybe<Scalars['String']>;\n  release_in?: Maybe<Array<Scalars['String']>>;\n  release_not_in?: Maybe<Array<Scalars['String']>>;\n  release_contains?: Maybe<Scalars['String']>;\n  release_not_contains?: Maybe<Scalars['String']>;\n  release_starts_with?: Maybe<Scalars['String']>;\n  release_not_starts_with?: Maybe<Scalars['String']>;\n  release_ends_with?: Maybe<Scalars['String']>;\n  release_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum PolicyManager_OrderBy {\n  Id = 'id',\n  Release = 'release',\n  Policies = 'policies'\n}\n\nexport type PolicyRegisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'PolicyRegisteredEvent';\n  id: Scalars['ID'];\n  identifier: Scalars['String'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  policy: Policy;\n  implementedHooks: Array<PolicyHook>;\n};\n\nexport type PolicyRegisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  implementedHooks?: Maybe<Array<PolicyHook>>;\n  implementedHooks_not?: Maybe<Array<PolicyHook>>;\n  implementedHooks_contains?: Maybe<Array<PolicyHook>>;\n  implementedHooks_not_contains?: Maybe<Array<PolicyHook>>;\n};\n\nexport enum PolicyRegisteredEvent_OrderBy {\n  Id = 'id',\n  Identifier = 'identifier',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Policy = 'policy',\n  ImplementedHooks = 'implementedHooks'\n}\n\nexport type PolicySettingInterface = {\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type PolicySettingInterfaceEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type PolicySettingInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum PolicySettingInterface_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type Policy_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policyManager?: Maybe<Scalars['String']>;\n  policyManager_not?: Maybe<Scalars['String']>;\n  policyManager_gt?: Maybe<Scalars['String']>;\n  policyManager_lt?: Maybe<Scalars['String']>;\n  policyManager_gte?: Maybe<Scalars['String']>;\n  policyManager_lte?: Maybe<Scalars['String']>;\n  policyManager_in?: Maybe<Array<Scalars['String']>>;\n  policyManager_not_in?: Maybe<Array<Scalars['String']>>;\n  policyManager_contains?: Maybe<Scalars['String']>;\n  policyManager_not_contains?: Maybe<Scalars['String']>;\n  policyManager_starts_with?: Maybe<Scalars['String']>;\n  policyManager_not_starts_with?: Maybe<Scalars['String']>;\n  policyManager_ends_with?: Maybe<Scalars['String']>;\n  policyManager_not_ends_with?: Maybe<Scalars['String']>;\n  identifier?: Maybe<Scalars['String']>;\n  identifier_not?: Maybe<Scalars['String']>;\n  identifier_gt?: Maybe<Scalars['String']>;\n  identifier_lt?: Maybe<Scalars['String']>;\n  identifier_gte?: Maybe<Scalars['String']>;\n  identifier_lte?: Maybe<Scalars['String']>;\n  identifier_in?: Maybe<Array<Scalars['String']>>;\n  identifier_not_in?: Maybe<Array<Scalars['String']>>;\n  identifier_contains?: Maybe<Scalars['String']>;\n  identifier_not_contains?: Maybe<Scalars['String']>;\n  identifier_starts_with?: Maybe<Scalars['String']>;\n  identifier_not_starts_with?: Maybe<Scalars['String']>;\n  identifier_ends_with?: Maybe<Scalars['String']>;\n  identifier_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Policy_OrderBy {\n  Id = 'id',\n  PolicyManager = 'policyManager',\n  Identifier = 'identifier',\n  Settings = 'settings'\n}\n\nexport type PortfolioState = FundStateInterface & {\n  __typename?: 'PortfolioState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  holdings: Array<HoldingState>;\n  events: Array<FundEventInterface>;\n};\n\n\nexport type PortfolioStateHoldingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HoldingState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HoldingState_Filter>;\n};\n\n\nexport type PortfolioStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type PortfolioState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  holdings?: Maybe<Array<Scalars['String']>>;\n  holdings_not?: Maybe<Array<Scalars['String']>>;\n  holdings_contains?: Maybe<Array<Scalars['String']>>;\n  holdings_not_contains?: Maybe<Array<Scalars['String']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum PortfolioState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Holdings = 'holdings',\n  Events = 'events'\n}\n\nexport type PreRedeemSharesHookFailedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'PreRedeemSharesHookFailedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  sharesQuantity: Scalars['BigDecimal'];\n  redeemer: Account;\n  failureReturnData: Scalars['String'];\n  transaction: Transaction;\n};\n\nexport type PreRedeemSharesHookFailedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  redeemer?: Maybe<Scalars['String']>;\n  redeemer_not?: Maybe<Scalars['String']>;\n  redeemer_gt?: Maybe<Scalars['String']>;\n  redeemer_lt?: Maybe<Scalars['String']>;\n  redeemer_gte?: Maybe<Scalars['String']>;\n  redeemer_lte?: Maybe<Scalars['String']>;\n  redeemer_in?: Maybe<Array<Scalars['String']>>;\n  redeemer_not_in?: Maybe<Array<Scalars['String']>>;\n  redeemer_contains?: Maybe<Scalars['String']>;\n  redeemer_not_contains?: Maybe<Scalars['String']>;\n  redeemer_starts_with?: Maybe<Scalars['String']>;\n  redeemer_not_starts_with?: Maybe<Scalars['String']>;\n  redeemer_ends_with?: Maybe<Scalars['String']>;\n  redeemer_not_ends_with?: Maybe<Scalars['String']>;\n  failureReturnData?: Maybe<Scalars['String']>;\n  failureReturnData_not?: Maybe<Scalars['String']>;\n  failureReturnData_gt?: Maybe<Scalars['String']>;\n  failureReturnData_lt?: Maybe<Scalars['String']>;\n  failureReturnData_gte?: Maybe<Scalars['String']>;\n  failureReturnData_lte?: Maybe<Scalars['String']>;\n  failureReturnData_in?: Maybe<Array<Scalars['String']>>;\n  failureReturnData_not_in?: Maybe<Array<Scalars['String']>>;\n  failureReturnData_contains?: Maybe<Scalars['String']>;\n  failureReturnData_not_contains?: Maybe<Scalars['String']>;\n  failureReturnData_starts_with?: Maybe<Scalars['String']>;\n  failureReturnData_not_starts_with?: Maybe<Scalars['String']>;\n  failureReturnData_ends_with?: Maybe<Scalars['String']>;\n  failureReturnData_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum PreRedeemSharesHookFailedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  SharesQuantity = 'sharesQuantity',\n  Redeemer = 'redeemer',\n  FailureReturnData = 'failureReturnData',\n  Transaction = 'transaction'\n}\n\nexport type PrimitiveAddedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'PrimitiveAddedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  primitive: Asset;\n  priceFeed: Scalars['String'];\n  rateAsset: Scalars['Int'];\n};\n\nexport type PrimitiveAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  primitive?: Maybe<Scalars['String']>;\n  primitive_not?: Maybe<Scalars['String']>;\n  primitive_gt?: Maybe<Scalars['String']>;\n  primitive_lt?: Maybe<Scalars['String']>;\n  primitive_gte?: Maybe<Scalars['String']>;\n  primitive_lte?: Maybe<Scalars['String']>;\n  primitive_in?: Maybe<Array<Scalars['String']>>;\n  primitive_not_in?: Maybe<Array<Scalars['String']>>;\n  primitive_contains?: Maybe<Scalars['String']>;\n  primitive_not_contains?: Maybe<Scalars['String']>;\n  primitive_starts_with?: Maybe<Scalars['String']>;\n  primitive_not_starts_with?: Maybe<Scalars['String']>;\n  primitive_ends_with?: Maybe<Scalars['String']>;\n  primitive_not_ends_with?: Maybe<Scalars['String']>;\n  priceFeed?: Maybe<Scalars['String']>;\n  priceFeed_not?: Maybe<Scalars['String']>;\n  priceFeed_gt?: Maybe<Scalars['String']>;\n  priceFeed_lt?: Maybe<Scalars['String']>;\n  priceFeed_gte?: Maybe<Scalars['String']>;\n  priceFeed_lte?: Maybe<Scalars['String']>;\n  priceFeed_in?: Maybe<Array<Scalars['String']>>;\n  priceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  priceFeed_contains?: Maybe<Scalars['String']>;\n  priceFeed_not_contains?: Maybe<Scalars['String']>;\n  priceFeed_starts_with?: Maybe<Scalars['String']>;\n  priceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  priceFeed_ends_with?: Maybe<Scalars['String']>;\n  priceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  rateAsset?: Maybe<Scalars['Int']>;\n  rateAsset_not?: Maybe<Scalars['Int']>;\n  rateAsset_gt?: Maybe<Scalars['Int']>;\n  rateAsset_lt?: Maybe<Scalars['Int']>;\n  rateAsset_gte?: Maybe<Scalars['Int']>;\n  rateAsset_lte?: Maybe<Scalars['Int']>;\n  rateAsset_in?: Maybe<Array<Scalars['Int']>>;\n  rateAsset_not_in?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport enum PrimitiveAddedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Primitive = 'primitive',\n  PriceFeed = 'priceFeed',\n  RateAsset = 'rateAsset'\n}\n\nexport type PrimitiveRemovedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'PrimitiveRemovedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  primitive: Asset;\n};\n\nexport type PrimitiveRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  primitive?: Maybe<Scalars['String']>;\n  primitive_not?: Maybe<Scalars['String']>;\n  primitive_gt?: Maybe<Scalars['String']>;\n  primitive_lt?: Maybe<Scalars['String']>;\n  primitive_gte?: Maybe<Scalars['String']>;\n  primitive_lte?: Maybe<Scalars['String']>;\n  primitive_in?: Maybe<Array<Scalars['String']>>;\n  primitive_not_in?: Maybe<Array<Scalars['String']>>;\n  primitive_contains?: Maybe<Scalars['String']>;\n  primitive_not_contains?: Maybe<Scalars['String']>;\n  primitive_starts_with?: Maybe<Scalars['String']>;\n  primitive_not_starts_with?: Maybe<Scalars['String']>;\n  primitive_ends_with?: Maybe<Scalars['String']>;\n  primitive_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum PrimitiveRemovedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  Primitive = 'primitive'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  newFundCreatedEvent?: Maybe<NewFundCreatedEvent>;\n  newFundCreatedEvents: Array<NewFundCreatedEvent>;\n  vaultProxySetEvent?: Maybe<VaultProxySetEvent>;\n  vaultProxySetEvents: Array<VaultProxySetEvent>;\n  sharesBoughtEvent?: Maybe<SharesBoughtEvent>;\n  sharesBoughtEvents: Array<SharesBoughtEvent>;\n  sharesRedeemedEvent?: Maybe<SharesRedeemedEvent>;\n  sharesRedeemedEvents: Array<SharesRedeemedEvent>;\n  assetWithdrawnEvent?: Maybe<AssetWithdrawnEvent>;\n  assetWithdrawnEvents: Array<AssetWithdrawnEvent>;\n  trackedAssetAddedEvent?: Maybe<TrackedAssetAddedEvent>;\n  trackedAssetAddedEvents: Array<TrackedAssetAddedEvent>;\n  trackedAssetRemovedEvent?: Maybe<TrackedAssetRemovedEvent>;\n  trackedAssetRemovedEvents: Array<TrackedAssetRemovedEvent>;\n  authUserAddedForFundEvent?: Maybe<AuthUserAddedForFundEvent>;\n  authUserAddedForFundEvents: Array<AuthUserAddedForFundEvent>;\n  authUserRemovedForFundEvent?: Maybe<AuthUserRemovedForFundEvent>;\n  authUserRemovedForFundEvents: Array<AuthUserRemovedForFundEvent>;\n  callOnIntegrationExecutedForFundEvent?: Maybe<CallOnIntegrationExecutedForFundEvent>;\n  callOnIntegrationExecutedForFundEvents: Array<CallOnIntegrationExecutedForFundEvent>;\n  migrationSignaledEvent?: Maybe<MigrationSignaledEvent>;\n  migrationSignaledEvents: Array<MigrationSignaledEvent>;\n  migrationCancelledEvent?: Maybe<MigrationCancelledEvent>;\n  migrationCancelledEvents: Array<MigrationCancelledEvent>;\n  migrationExecutedEvent?: Maybe<MigrationExecutedEvent>;\n  migrationExecutedEvents: Array<MigrationExecutedEvent>;\n  migrationInCancelHookFailedEvent?: Maybe<MigrationInCancelHookFailedEvent>;\n  migrationInCancelHookFailedEvents: Array<MigrationInCancelHookFailedEvent>;\n  migrationOutHookFailedEvent?: Maybe<MigrationOutHookFailedEvent>;\n  migrationOutHookFailedEvents: Array<MigrationOutHookFailedEvent>;\n  feeEnabledForFundEvent?: Maybe<FeeEnabledForFundEvent>;\n  feeEnabledForFundEvents: Array<FeeEnabledForFundEvent>;\n  feesRecipientSetForFundEvent?: Maybe<FeesRecipientSetForFundEvent>;\n  feesRecipientSetForFundEvents: Array<FeesRecipientSetForFundEvent>;\n  feeSettledForFundEvent?: Maybe<FeeSettledForFundEvent>;\n  feeSettledForFundEvents: Array<FeeSettledForFundEvent>;\n  allSharesOutstandingForcePaidForFundEvent?: Maybe<AllSharesOutstandingForcePaidForFundEvent>;\n  allSharesOutstandingForcePaidForFundEvents: Array<AllSharesOutstandingForcePaidForFundEvent>;\n  sharesOutstandingPaidForFundEvent?: Maybe<SharesOutstandingPaidForFundEvent>;\n  sharesOutstandingPaidForFundEvents: Array<SharesOutstandingPaidForFundEvent>;\n  migratedSharesDuePaidEvent?: Maybe<MigratedSharesDuePaidEvent>;\n  migratedSharesDuePaidEvents: Array<MigratedSharesDuePaidEvent>;\n  policyEnabledForFundEvent?: Maybe<PolicyEnabledForFundEvent>;\n  policyEnabledForFundEvents: Array<PolicyEnabledForFundEvent>;\n  policyDisabledForFundEvent?: Maybe<PolicyDisabledForFundEvent>;\n  policyDisabledForFundEvents: Array<PolicyDisabledForFundEvent>;\n  accessorSetEvent?: Maybe<AccessorSetEvent>;\n  accessorSetEvents: Array<AccessorSetEvent>;\n  ownerSetEvent?: Maybe<OwnerSetEvent>;\n  ownerSetEvents: Array<OwnerSetEvent>;\n  migratorSetEvent?: Maybe<MigratorSetEvent>;\n  migratorSetEvents: Array<MigratorSetEvent>;\n  vaultLibSetEvent?: Maybe<VaultLibSetEvent>;\n  vaultLibSetEvents: Array<VaultLibSetEvent>;\n  approvalEvent?: Maybe<ApprovalEvent>;\n  approvalEvents: Array<ApprovalEvent>;\n  transferEvent?: Maybe<TransferEvent>;\n  transferEvents: Array<TransferEvent>;\n  adapterBlacklistAddressesAddedEvent?: Maybe<AdapterBlacklistAddressesAddedEvent>;\n  adapterBlacklistAddressesAddedEvents: Array<AdapterBlacklistAddressesAddedEvent>;\n  adapterBlacklistAddressesRemovedEvent?: Maybe<AdapterBlacklistAddressesRemovedEvent>;\n  adapterBlacklistAddressesRemovedEvents: Array<AdapterBlacklistAddressesRemovedEvent>;\n  adapterWhitelistAddressesAddedEvent?: Maybe<AdapterWhitelistAddressesAddedEvent>;\n  adapterWhitelistAddressesAddedEvents: Array<AdapterWhitelistAddressesAddedEvent>;\n  adapterWhitelistAddressesRemovedEvent?: Maybe<AdapterWhitelistAddressesRemovedEvent>;\n  adapterWhitelistAddressesRemovedEvents: Array<AdapterWhitelistAddressesRemovedEvent>;\n  assetBlacklistAddressesAddedEvent?: Maybe<AssetBlacklistAddressesAddedEvent>;\n  assetBlacklistAddressesAddedEvents: Array<AssetBlacklistAddressesAddedEvent>;\n  assetBlacklistAddressesRemovedEvent?: Maybe<AssetBlacklistAddressesRemovedEvent>;\n  assetBlacklistAddressesRemovedEvents: Array<AssetBlacklistAddressesRemovedEvent>;\n  assetWhitelistAddressesAddedEvent?: Maybe<AssetWhitelistAddressesAddedEvent>;\n  assetWhitelistAddressesAddedEvents: Array<AssetWhitelistAddressesAddedEvent>;\n  assetWhitelistAddressesRemovedEvent?: Maybe<AssetWhitelistAddressesRemovedEvent>;\n  assetWhitelistAddressesRemovedEvents: Array<AssetWhitelistAddressesRemovedEvent>;\n  buySharesCallerWhitelistAddressesAddedEvent?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent>;\n  buySharesCallerWhitelistAddressesAddedEvents: Array<BuySharesCallerWhitelistAddressesAddedEvent>;\n  buySharesCallerWhitelistAddressesRemovedEvent?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent>;\n  buySharesCallerWhitelistAddressesRemovedEvents: Array<BuySharesCallerWhitelistAddressesRemovedEvent>;\n  guaranteedRedemptionFundSettingsSetEvent?: Maybe<GuaranteedRedemptionFundSettingsSetEvent>;\n  guaranteedRedemptionFundSettingsSetEvents: Array<GuaranteedRedemptionFundSettingsSetEvent>;\n  investorWhitelistAddressesAddedEvent?: Maybe<InvestorWhitelistAddressesAddedEvent>;\n  investorWhitelistAddressesAddedEvents: Array<InvestorWhitelistAddressesAddedEvent>;\n  investorWhitelistAddressesRemovedEvent?: Maybe<InvestorWhitelistAddressesRemovedEvent>;\n  investorWhitelistAddressesRemovedEvents: Array<InvestorWhitelistAddressesRemovedEvent>;\n  maxConcentrationSetEvent?: Maybe<MaxConcentrationSetEvent>;\n  maxConcentrationSetEvents: Array<MaxConcentrationSetEvent>;\n  minMaxInvestmentFundSettingsSetEvent?: Maybe<MinMaxInvestmentFundSettingsSetEvent>;\n  minMaxInvestmentFundSettingsSetEvents: Array<MinMaxInvestmentFundSettingsSetEvent>;\n  managementFeeSettingsAddedEvent?: Maybe<ManagementFeeSettingsAddedEvent>;\n  managementFeeSettingsAddedEvents: Array<ManagementFeeSettingsAddedEvent>;\n  managementFeeSettledEvent?: Maybe<ManagementFeeSettledEvent>;\n  managementFeeSettledEvents: Array<ManagementFeeSettledEvent>;\n  managementFeeActivatedForMigratedFundEvent?: Maybe<ManagementFeeActivatedForMigratedFundEvent>;\n  managementFeeActivatedForMigratedFundEvents: Array<ManagementFeeActivatedForMigratedFundEvent>;\n  performanceFeeSettingsAddedEvent?: Maybe<PerformanceFeeSettingsAddedEvent>;\n  performanceFeeSettingsAddedEvents: Array<PerformanceFeeSettingsAddedEvent>;\n  performanceFeeActivatedForFundEvent?: Maybe<PerformanceFeeActivatedForFundEvent>;\n  performanceFeeActivatedForFundEvents: Array<PerformanceFeeActivatedForFundEvent>;\n  performanceFeeSharePriceUpdatedEvent?: Maybe<PerformanceFeeSharePriceUpdatedEvent>;\n  performanceFeeSharePriceUpdatedEvents: Array<PerformanceFeeSharePriceUpdatedEvent>;\n  performanceFeePaidOutEvent?: Maybe<PerformanceFeePaidOutEvent>;\n  performanceFeePaidOutEvents: Array<PerformanceFeePaidOutEvent>;\n  performanceFeePerformanceUpdatedEvent?: Maybe<PerformanceFeePerformanceUpdatedEvent>;\n  performanceFeePerformanceUpdatedEvents: Array<PerformanceFeePerformanceUpdatedEvent>;\n  entranceRateDirectFeeSettingsAddedEvent?: Maybe<EntranceRateDirectFeeSettingsAddedEvent>;\n  entranceRateDirectFeeSettingsAddedEvents: Array<EntranceRateDirectFeeSettingsAddedEvent>;\n  entranceRateDirectFeeSettledEvent?: Maybe<EntranceRateDirectFeeSettledEvent>;\n  entranceRateDirectFeeSettledEvents: Array<EntranceRateDirectFeeSettledEvent>;\n  entranceRateBurnFeeSettingsAddedEvent?: Maybe<EntranceRateBurnFeeSettingsAddedEvent>;\n  entranceRateBurnFeeSettingsAddedEvents: Array<EntranceRateBurnFeeSettingsAddedEvent>;\n  entranceRateBurnFeeSettledEvent?: Maybe<EntranceRateBurnFeeSettledEvent>;\n  entranceRateBurnFeeSettledEvents: Array<EntranceRateBurnFeeSettledEvent>;\n  overridePauseSetEvent?: Maybe<OverridePauseSetEvent>;\n  overridePauseSetEvents: Array<OverridePauseSetEvent>;\n  preRedeemSharesHookFailedEvent?: Maybe<PreRedeemSharesHookFailedEvent>;\n  preRedeemSharesHookFailedEvents: Array<PreRedeemSharesHookFailedEvent>;\n  requestCanceledEvent?: Maybe<RequestCanceledEvent>;\n  requestCanceledEvents: Array<RequestCanceledEvent>;\n  requestCreatedEvent?: Maybe<RequestCreatedEvent>;\n  requestCreatedEvents: Array<RequestCreatedEvent>;\n  requestExecutedEvent?: Maybe<RequestExecutedEvent>;\n  requestExecutedEvents: Array<RequestExecutedEvent>;\n  requestExecutorAddedEvent?: Maybe<RequestExecutorAddedEvent>;\n  requestExecutorAddedEvents: Array<RequestExecutorAddedEvent>;\n  requestExecutorRemovedEvent?: Maybe<RequestExecutorRemovedEvent>;\n  requestExecutorRemovedEvents: Array<RequestExecutorRemovedEvent>;\n  vaultProxyDeployedEvent?: Maybe<VaultProxyDeployedEvent>;\n  vaultProxyDeployedEvents: Array<VaultProxyDeployedEvent>;\n  comptrollerProxyDeployedEvent?: Maybe<ComptrollerProxyDeployedEvent>;\n  comptrollerProxyDeployedEvents: Array<ComptrollerProxyDeployedEvent>;\n  comptrollerLibSetEvent?: Maybe<ComptrollerLibSetEvent>;\n  comptrollerLibSetEvents: Array<ComptrollerLibSetEvent>;\n  adapterRegisteredEvent?: Maybe<AdapterRegisteredEvent>;\n  adapterRegisteredEvents: Array<AdapterRegisteredEvent>;\n  adapterDeregisteredEvent?: Maybe<AdapterDeregisteredEvent>;\n  adapterDeregisteredEvents: Array<AdapterDeregisteredEvent>;\n  trackedAssetsLimitSetEvent?: Maybe<TrackedAssetsLimitSetEvent>;\n  trackedAssetsLimitSetEvents: Array<TrackedAssetsLimitSetEvent>;\n  policyRegisteredEvent?: Maybe<PolicyRegisteredEvent>;\n  policyRegisteredEvents: Array<PolicyRegisteredEvent>;\n  policyDeregisteredEvent?: Maybe<PolicyDeregisteredEvent>;\n  policyDeregisteredEvents: Array<PolicyDeregisteredEvent>;\n  guaranteedRedemptionAdapterAddedEvent?: Maybe<GuaranteedRedemptionAdapterAddedEvent>;\n  guaranteedRedemptionAdapterAddedEvents: Array<GuaranteedRedemptionAdapterAddedEvent>;\n  guaranteedRedemptionAdapterRemovedEvent?: Maybe<GuaranteedRedemptionAdapterRemovedEvent>;\n  guaranteedRedemptionAdapterRemovedEvents: Array<GuaranteedRedemptionAdapterRemovedEvent>;\n  guaranteedRedemptionRedemptionWindowBufferSetEvent?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;\n  guaranteedRedemptionRedemptionWindowBufferSetEvents: Array<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;\n  fundDeployerSetEvent?: Maybe<FundDeployerSetEvent>;\n  fundDeployerSetEvents: Array<FundDeployerSetEvent>;\n  valueInterpreterSetEvent?: Maybe<ValueInterpreterSetEvent>;\n  valueInterpreterSetEvents: Array<ValueInterpreterSetEvent>;\n  ownershipTransferredEvent?: Maybe<OwnershipTransferredEvent>;\n  ownershipTransferredEvents: Array<OwnershipTransferredEvent>;\n  derivativeAddedEvent?: Maybe<DerivativeAddedEvent>;\n  derivativeAddedEvents: Array<DerivativeAddedEvent>;\n  derivativeRemovedEvent?: Maybe<DerivativeRemovedEvent>;\n  derivativeRemovedEvents: Array<DerivativeRemovedEvent>;\n  derivativeUpdatedEvent?: Maybe<DerivativeUpdatedEvent>;\n  derivativeUpdatedEvents: Array<DerivativeUpdatedEvent>;\n  aggregatorUpdatedEvent?: Maybe<AggregatorUpdatedEvent>;\n  aggregatorUpdatedEvents: Array<AggregatorUpdatedEvent>;\n  ethUsdAggregatorSetEvent?: Maybe<EthUsdAggregatorSetEvent>;\n  ethUsdAggregatorSetEvents: Array<EthUsdAggregatorSetEvent>;\n  primitiveAddedEvent?: Maybe<PrimitiveAddedEvent>;\n  primitiveAddedEvents: Array<PrimitiveAddedEvent>;\n  primitiveRemovedEvent?: Maybe<PrimitiveRemovedEvent>;\n  primitiveRemovedEvents: Array<PrimitiveRemovedEvent>;\n  feeRegisteredEvent?: Maybe<FeeRegisteredEvent>;\n  feeRegisteredEvents: Array<FeeRegisteredEvent>;\n  feeDeregisteredEvent?: Maybe<FeeDeregisteredEvent>;\n  feeDeregisteredEvents: Array<FeeDeregisteredEvent>;\n  migrationTimelockSetEvent?: Maybe<MigrationTimelockSetEvent>;\n  migrationTimelockSetEvents: Array<MigrationTimelockSetEvent>;\n  nominatedOwnerRemovedEvent?: Maybe<NominatedOwnerRemovedEvent>;\n  nominatedOwnerRemovedEvents: Array<NominatedOwnerRemovedEvent>;\n  nominatedOwnerSetEvent?: Maybe<NominatedOwnerSetEvent>;\n  nominatedOwnerSetEvents: Array<NominatedOwnerSetEvent>;\n  dispatcherOwnershipTransferredEvent?: Maybe<DispatcherOwnershipTransferredEvent>;\n  dispatcherOwnershipTransferredEvents: Array<DispatcherOwnershipTransferredEvent>;\n  sharesTokenSymbolSetEvent?: Maybe<SharesTokenSymbolSetEvent>;\n  sharesTokenSymbolSetEvents: Array<SharesTokenSymbolSetEvent>;\n  releaseStatusSetEvent?: Maybe<ReleaseStatusSetEvent>;\n  releaseStatusSetEvents: Array<ReleaseStatusSetEvent>;\n  vaultCallRegisteredEvent?: Maybe<VaultCallRegisteredEvent>;\n  vaultCallRegisteredEvents: Array<VaultCallRegisteredEvent>;\n  vaultCallDeregisteredEvent?: Maybe<VaultCallDeregisteredEvent>;\n  vaultCallDeregisteredEvents: Array<VaultCallDeregisteredEvent>;\n  sharesRequestorProxyDeployedEvent?: Maybe<SharesRequestorProxyDeployedEvent>;\n  sharesRequestorProxyDeployedEvents: Array<SharesRequestorProxyDeployedEvent>;\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n  integrationManager?: Maybe<IntegrationManager>;\n  integrationManagers: Array<IntegrationManager>;\n  policyManager?: Maybe<PolicyManager>;\n  policyManagers: Array<PolicyManager>;\n  feeManager?: Maybe<FeeManager>;\n  feeManagers: Array<FeeManager>;\n  guaranteedRedemption?: Maybe<GuaranteedRedemption>;\n  guaranteedRedemptions: Array<GuaranteedRedemption>;\n  fund?: Maybe<Fund>;\n  funds: Array<Fund>;\n  comptrollerProxy?: Maybe<ComptrollerProxy>;\n  comptrollerProxies: Array<ComptrollerProxy>;\n  hourlyFundState?: Maybe<HourlyFundState>;\n  hourlyFundStates: Array<HourlyFundState>;\n  dailyFundState?: Maybe<DailyFundState>;\n  dailyFundStates: Array<DailyFundState>;\n  monthlyFundState?: Maybe<MonthlyFundState>;\n  monthlyFundStates: Array<MonthlyFundState>;\n  migration?: Maybe<Migration>;\n  migrations: Array<Migration>;\n  release?: Maybe<Release>;\n  releases: Array<Release>;\n  account?: Maybe<Account>;\n  accounts: Array<Account>;\n  investment?: Maybe<Investment>;\n  investments: Array<Investment>;\n  investmentState?: Maybe<InvestmentState>;\n  investmentStates: Array<InvestmentState>;\n  fee?: Maybe<Fee>;\n  fees: Array<Fee>;\n  managementFeeSetting?: Maybe<ManagementFeeSetting>;\n  managementFeeSettings: Array<ManagementFeeSetting>;\n  performanceFeeSetting?: Maybe<PerformanceFeeSetting>;\n  performanceFeeSettings: Array<PerformanceFeeSetting>;\n  entranceRateDirectFeeSetting?: Maybe<EntranceRateDirectFeeSetting>;\n  entranceRateDirectFeeSettings: Array<EntranceRateDirectFeeSetting>;\n  entranceRateBurnFeeSetting?: Maybe<EntranceRateBurnFeeSetting>;\n  entranceRateBurnFeeSettings: Array<EntranceRateBurnFeeSetting>;\n  integrationAdapter?: Maybe<IntegrationAdapter>;\n  integrationAdapters: Array<IntegrationAdapter>;\n  policy?: Maybe<Policy>;\n  policies: Array<Policy>;\n  adapterBlacklistSetting?: Maybe<AdapterBlacklistSetting>;\n  adapterBlacklistSettings: Array<AdapterBlacklistSetting>;\n  adapterWhitelistSetting?: Maybe<AdapterWhitelistSetting>;\n  adapterWhitelistSettings: Array<AdapterWhitelistSetting>;\n  assetBlacklistSetting?: Maybe<AssetBlacklistSetting>;\n  assetBlacklistSettings: Array<AssetBlacklistSetting>;\n  assetWhitelistSetting?: Maybe<AssetWhitelistSetting>;\n  assetWhitelistSettings: Array<AssetWhitelistSetting>;\n  buySharesCallerWhitelistSetting?: Maybe<BuySharesCallerWhitelistSetting>;\n  buySharesCallerWhitelistSettings: Array<BuySharesCallerWhitelistSetting>;\n  guaranteedRedemptionSetting?: Maybe<GuaranteedRedemptionSetting>;\n  guaranteedRedemptionSettings: Array<GuaranteedRedemptionSetting>;\n  investorWhitelistSetting?: Maybe<InvestorWhitelistSetting>;\n  investorWhitelistSettings: Array<InvestorWhitelistSetting>;\n  maxConcentrationSetting?: Maybe<MaxConcentrationSetting>;\n  maxConcentrationSettings: Array<MaxConcentrationSetting>;\n  minMaxInvestmentSetting?: Maybe<MinMaxInvestmentSetting>;\n  minMaxInvestmentSettings: Array<MinMaxInvestmentSetting>;\n  unknownPolicySetting?: Maybe<UnknownPolicySetting>;\n  unknownPolicySettings: Array<UnknownPolicySetting>;\n  shareState?: Maybe<ShareState>;\n  shareStates: Array<ShareState>;\n  portfolioState?: Maybe<PortfolioState>;\n  portfolioStates: Array<PortfolioState>;\n  holdingState?: Maybe<HoldingState>;\n  holdingStates: Array<HoldingState>;\n  fundState?: Maybe<FundState>;\n  fundStates: Array<FundState>;\n  feeState?: Maybe<FeeState>;\n  feeStates: Array<FeeState>;\n  managementFeeState?: Maybe<ManagementFeeState>;\n  managementFeeStates: Array<ManagementFeeState>;\n  performanceFeeState?: Maybe<PerformanceFeeState>;\n  performanceFeeStates: Array<PerformanceFeeState>;\n  entranceRateDirectFeeState?: Maybe<EntranceRateDirectFeeState>;\n  entranceRateDirectFeeStates: Array<EntranceRateDirectFeeState>;\n  entranceRateBurnFeeState?: Maybe<EntranceRateBurnFeeState>;\n  entranceRateBurnFeeStates: Array<EntranceRateBurnFeeState>;\n  tokenSwapTrade?: Maybe<TokenSwapTrade>;\n  tokenSwapTrades: Array<TokenSwapTrade>;\n  multiTokenSwapTrade?: Maybe<MultiTokenSwapTrade>;\n  multiTokenSwapTrades: Array<MultiTokenSwapTrade>;\n  lendTrade?: Maybe<LendTrade>;\n  lendTrades: Array<LendTrade>;\n  multiLendTrade?: Maybe<MultiLendTrade>;\n  multiLendTrades: Array<MultiLendTrade>;\n  redeemTrade?: Maybe<RedeemTrade>;\n  redeemTrades: Array<RedeemTrade>;\n  multiRedeemTrade?: Maybe<MultiRedeemTrade>;\n  multiRedeemTrades: Array<MultiRedeemTrade>;\n  addTrackedAssetsTrade?: Maybe<AddTrackedAssetsTrade>;\n  addTrackedAssetsTrades: Array<AddTrackedAssetsTrade>;\n  removeTrackedAssetsTrade?: Maybe<RemoveTrackedAssetsTrade>;\n  removeTrackedAssetsTrades: Array<RemoveTrackedAssetsTrade>;\n  approveAssetsTrade?: Maybe<ApproveAssetsTrade>;\n  approveAssetsTrades: Array<ApproveAssetsTrade>;\n  stakeTrade?: Maybe<StakeTrade>;\n  stakeTrades: Array<StakeTrade>;\n  unstakeTrade?: Maybe<UnstakeTrade>;\n  unstakeTrades: Array<UnstakeTrade>;\n  claimRewardsTrade?: Maybe<ClaimRewardsTrade>;\n  claimRewardsTrades: Array<ClaimRewardsTrade>;\n  claimRewardsAndReinvestTrade?: Maybe<ClaimRewardsAndReinvestTrade>;\n  claimRewardsAndReinvestTrades: Array<ClaimRewardsAndReinvestTrade>;\n  claimRewardsAndSwapTrade?: Maybe<ClaimRewardsAndSwapTrade>;\n  claimRewardsAndSwapTrades: Array<ClaimRewardsAndSwapTrade>;\n  lendAndStakeTrade?: Maybe<LendAndStakeTrade>;\n  lendAndStakeTrades: Array<LendAndStakeTrade>;\n  unstakeAndRedeemTrade?: Maybe<UnstakeAndRedeemTrade>;\n  unstakeAndRedeemTrades: Array<UnstakeAndRedeemTrade>;\n  sharesRequestor?: Maybe<SharesRequestor>;\n  sharesRequestors: Array<SharesRequestor>;\n  sharesRequestExecutor?: Maybe<SharesRequestExecutor>;\n  sharesRequestExecutors: Array<SharesRequestExecutor>;\n  sharesRequest?: Maybe<SharesRequest>;\n  sharesRequests: Array<SharesRequest>;\n  asset?: Maybe<Asset>;\n  assets: Array<Asset>;\n  currency?: Maybe<Currency>;\n  currencies: Array<Currency>;\n  curvePoolAssetDetail?: Maybe<CurvePoolAssetDetail>;\n  curvePoolAssetDetails: Array<CurvePoolAssetDetail>;\n  uniswapV2PoolAssetDetail?: Maybe<UniswapV2PoolAssetDetail>;\n  uniswapV2PoolAssetDetails: Array<UniswapV2PoolAssetDetail>;\n  assetAmount?: Maybe<AssetAmount>;\n  assetAmounts: Array<AssetAmount>;\n  assetPrice?: Maybe<AssetPrice>;\n  assetPrices: Array<AssetPrice>;\n  currencyPrice?: Maybe<CurrencyPrice>;\n  currencyPrices: Array<CurrencyPrice>;\n  hourlyAssetPriceCandle?: Maybe<HourlyAssetPriceCandle>;\n  hourlyAssetPriceCandles: Array<HourlyAssetPriceCandle>;\n  dailyAssetPriceCandle?: Maybe<DailyAssetPriceCandle>;\n  dailyAssetPriceCandles: Array<DailyAssetPriceCandle>;\n  monthlyAssetPriceCandle?: Maybe<MonthlyAssetPriceCandle>;\n  monthlyAssetPriceCandles: Array<MonthlyAssetPriceCandle>;\n  hourlyCurrencyPriceCandle?: Maybe<HourlyCurrencyPriceCandle>;\n  hourlyCurrencyPriceCandles: Array<HourlyCurrencyPriceCandle>;\n  dailyCurrencyPriceCandle?: Maybe<DailyCurrencyPriceCandle>;\n  dailyCurrencyPriceCandles: Array<DailyCurrencyPriceCandle>;\n  monthlyCurrencyPriceCandle?: Maybe<MonthlyCurrencyPriceCandle>;\n  monthlyCurrencyPriceCandles: Array<MonthlyCurrencyPriceCandle>;\n  hourlyPriceCandleGroup?: Maybe<HourlyPriceCandleGroup>;\n  hourlyPriceCandleGroups: Array<HourlyPriceCandleGroup>;\n  dailyPriceCandleGroup?: Maybe<DailyPriceCandleGroup>;\n  dailyPriceCandleGroups: Array<DailyPriceCandleGroup>;\n  monthlyPriceCandleGroup?: Maybe<MonthlyPriceCandleGroup>;\n  monthlyPriceCandleGroups: Array<MonthlyPriceCandleGroup>;\n  chainlinkAggregatorProxy?: Maybe<ChainlinkAggregatorProxy>;\n  chainlinkAggregatorProxies: Array<ChainlinkAggregatorProxy>;\n  cron?: Maybe<Cron>;\n  crons: Array<Cron>;\n  network?: Maybe<Network>;\n  networks: Array<Network>;\n  networkState?: Maybe<NetworkState>;\n  networkStates: Array<NetworkState>;\n  networkAssetHolding?: Maybe<NetworkAssetHolding>;\n  networkAssetHoldings: Array<NetworkAssetHolding>;\n  eventInterface?: Maybe<EventInterface>;\n  eventInterfaces: Array<EventInterface>;\n  networkEventInterface?: Maybe<NetworkEventInterface>;\n  networkEventInterfaces: Array<NetworkEventInterface>;\n  fundEventInterface?: Maybe<FundEventInterface>;\n  fundEventInterfaces: Array<FundEventInterface>;\n  comptrollerEventInterface?: Maybe<ComptrollerEventInterface>;\n  comptrollerEventInterfaces: Array<ComptrollerEventInterface>;\n  sharesChangeInterface?: Maybe<SharesChangeInterface>;\n  sharesChangeInterfaces: Array<SharesChangeInterface>;\n  feeSharesChangeInterface?: Maybe<FeeSharesChangeInterface>;\n  feeSharesChangeInterfaces: Array<FeeSharesChangeInterface>;\n  investmentSharesChangeInterface?: Maybe<InvestmentSharesChangeInterface>;\n  investmentSharesChangeInterfaces: Array<InvestmentSharesChangeInterface>;\n  fundStateInterface?: Maybe<FundStateInterface>;\n  fundStateInterfaces: Array<FundStateInterface>;\n  feeSettingInterface?: Maybe<FeeSettingInterface>;\n  feeSettingInterfaces: Array<FeeSettingInterface>;\n  policySettingInterface?: Maybe<PolicySettingInterface>;\n  policySettingInterfaces: Array<PolicySettingInterface>;\n  individualFeeStateInterface?: Maybe<IndividualFeeStateInterface>;\n  individualFeeStateInterfaces: Array<IndividualFeeStateInterface>;\n  periodicFundStateInterface?: Maybe<PeriodicFundStateInterface>;\n  periodicFundStateInterfaces: Array<PeriodicFundStateInterface>;\n  trade?: Maybe<Trade>;\n  trades: Array<Trade>;\n  sharesRequestInterface?: Maybe<SharesRequestInterface>;\n  sharesRequestInterfaces: Array<SharesRequestInterface>;\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n};\n\n\nexport type QueryNewFundCreatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNewFundCreatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NewFundCreatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NewFundCreatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultProxySetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultProxySetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultProxySetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultProxySetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesBoughtEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesBoughtEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesBoughtEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesBoughtEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRedeemedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRedeemedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRedeemedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRedeemedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWithdrawnEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWithdrawnEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWithdrawnEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWithdrawnEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTrackedAssetAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTrackedAssetAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TrackedAssetAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TrackedAssetAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTrackedAssetRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTrackedAssetRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TrackedAssetRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TrackedAssetRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAuthUserAddedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAuthUserAddedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AuthUserAddedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AuthUserAddedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAuthUserRemovedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAuthUserRemovedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AuthUserRemovedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AuthUserRemovedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCallOnIntegrationExecutedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCallOnIntegrationExecutedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CallOnIntegrationExecutedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CallOnIntegrationExecutedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationSignaledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationSignaledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationSignaledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationSignaledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationCancelledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationCancelledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationCancelledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationCancelledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationExecutedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationExecutedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationExecutedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationExecutedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationInCancelHookFailedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationInCancelHookFailedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationInCancelHookFailedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationInCancelHookFailedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationOutHookFailedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationOutHookFailedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationOutHookFailedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationOutHookFailedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeEnabledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeEnabledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeEnabledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeEnabledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeesRecipientSetForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeesRecipientSetForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeesRecipientSetForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeesRecipientSetForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeSettledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeSettledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSettledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSettledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAllSharesOutstandingForcePaidForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAllSharesOutstandingForcePaidForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AllSharesOutstandingForcePaidForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AllSharesOutstandingForcePaidForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesOutstandingPaidForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesOutstandingPaidForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesOutstandingPaidForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesOutstandingPaidForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigratedSharesDuePaidEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigratedSharesDuePaidEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigratedSharesDuePaidEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigratedSharesDuePaidEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyEnabledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyEnabledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyEnabledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyEnabledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyDisabledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyDisabledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyDisabledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyDisabledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAccessorSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAccessorSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AccessorSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AccessorSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryOwnerSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryOwnerSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<OwnerSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<OwnerSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigratorSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigratorSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigratorSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigratorSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultLibSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultLibSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultLibSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultLibSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryApprovalEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryApprovalEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ApprovalEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ApprovalEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTransferEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTransferEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TransferEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TransferEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterBlacklistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterBlacklistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterBlacklistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterBlacklistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterBlacklistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterBlacklistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterBlacklistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterBlacklistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetBlacklistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetBlacklistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetBlacklistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetBlacklistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetBlacklistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetBlacklistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetBlacklistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetBlacklistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBuySharesCallerWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBuySharesCallerWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBuySharesCallerWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBuySharesCallerWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionFundSettingsSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionFundSettingsSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestorWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestorWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestorWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestorWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestorWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestorWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestorWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestorWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMaxConcentrationSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMaxConcentrationSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MaxConcentrationSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MaxConcentrationSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMinMaxInvestmentFundSettingsSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMinMaxInvestmentFundSettingsSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MinMaxInvestmentFundSettingsSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MinMaxInvestmentFundSettingsSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeSettledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeSettledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeSettledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeSettledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeActivatedForMigratedFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeActivatedForMigratedFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeActivatedForMigratedFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeActivatedForMigratedFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeActivatedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeActivatedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeActivatedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeActivatedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeSharePriceUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeSharePriceUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeSharePriceUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeSharePriceUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeePaidOutEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeePaidOutEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeePaidOutEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeePaidOutEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeePerformanceUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeePerformanceUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeePerformanceUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeePerformanceUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeSettledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeSettledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeSettledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeSettledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeSettledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeSettledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeSettledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeSettledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryOverridePauseSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryOverridePauseSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<OverridePauseSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<OverridePauseSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPreRedeemSharesHookFailedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPreRedeemSharesHookFailedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PreRedeemSharesHookFailedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PreRedeemSharesHookFailedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestCanceledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestCanceledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestCanceledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestCanceledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestCreatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestCreatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestCreatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestCreatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestExecutedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestExecutedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestExecutedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestExecutedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestExecutorAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestExecutorAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestExecutorAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestExecutorAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestExecutorRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRequestExecutorRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestExecutorRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestExecutorRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultProxyDeployedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultProxyDeployedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultProxyDeployedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultProxyDeployedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerProxyDeployedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerProxyDeployedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerProxyDeployedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerProxyDeployedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerLibSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerLibSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerLibSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerLibSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTrackedAssetsLimitSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTrackedAssetsLimitSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TrackedAssetsLimitSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TrackedAssetsLimitSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionAdapterAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionAdapterAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionAdapterAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionAdapterAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionAdapterRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionAdapterRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionRedemptionWindowBufferSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionRedemptionWindowBufferSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundDeployerSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundDeployerSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundDeployerSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundDeployerSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryValueInterpreterSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryValueInterpreterSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ValueInterpreterSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ValueInterpreterSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryOwnershipTransferredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryOwnershipTransferredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<OwnershipTransferredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<OwnershipTransferredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDerivativeAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDerivativeAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DerivativeAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DerivativeAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDerivativeRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDerivativeRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DerivativeRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DerivativeRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDerivativeUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDerivativeUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DerivativeUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DerivativeUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAggregatorUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAggregatorUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AggregatorUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AggregatorUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEthUsdAggregatorSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEthUsdAggregatorSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EthUsdAggregatorSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EthUsdAggregatorSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPrimitiveAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPrimitiveAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PrimitiveAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PrimitiveAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPrimitiveRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPrimitiveRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PrimitiveRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PrimitiveRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationTimelockSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationTimelockSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationTimelockSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationTimelockSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNominatedOwnerRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNominatedOwnerRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NominatedOwnerRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NominatedOwnerRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNominatedOwnerSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNominatedOwnerSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NominatedOwnerSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NominatedOwnerSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDispatcherOwnershipTransferredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDispatcherOwnershipTransferredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DispatcherOwnershipTransferredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DispatcherOwnershipTransferredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesTokenSymbolSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesTokenSymbolSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesTokenSymbolSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesTokenSymbolSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryReleaseStatusSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryReleaseStatusSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ReleaseStatusSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ReleaseStatusSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultCallRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultCallRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultCallRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultCallRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultCallDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryVaultCallDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultCallDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultCallDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestorProxyDeployedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestorProxyDeployedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestorProxyDeployedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestorProxyDeployedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTransactionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTransactionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Transaction_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Transaction_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryIntegrationManagerArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryIntegrationManagersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationManager_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationManager_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyManagerArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyManagersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyManager_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyManager_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeManagerArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeManagersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeManager_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeManager_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemption_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemption_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fund_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fund_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerProxyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerProxiesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerProxy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerProxy_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyFundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyFundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyFundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMigrationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Migration_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Migration_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryReleaseArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryReleasesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Release_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Release_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAccountArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAccountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Account_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Account_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestmentArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestmentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Investment_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Investment_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestmentStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestmentStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestmentState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestmentState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fee_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fee_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryIntegrationAdapterArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryIntegrationAdaptersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPoliciesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Policy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Policy_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterBlacklistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterBlacklistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterBlacklistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterBlacklistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAdapterWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetBlacklistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetBlacklistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetBlacklistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetBlacklistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBuySharesCallerWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBuySharesCallerWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<BuySharesCallerWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<BuySharesCallerWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryGuaranteedRedemptionSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestorWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestorWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestorWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestorWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMaxConcentrationSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMaxConcentrationSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MaxConcentrationSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MaxConcentrationSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMinMaxInvestmentSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMinMaxInvestmentSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MinMaxInvestmentSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MinMaxInvestmentSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUnknownPolicySettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUnknownPolicySettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UnknownPolicySetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UnknownPolicySetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryShareStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryShareStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ShareState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ShareState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPortfolioStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPortfolioStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PortfolioState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PortfolioState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHoldingStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHoldingStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HoldingState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HoldingState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryManagementFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPerformanceFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateDirectFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEntranceRateBurnFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokenSwapTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokenSwapTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TokenSwapTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TokenSwapTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMultiTokenSwapTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMultiTokenSwapTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MultiTokenSwapTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MultiTokenSwapTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryLendTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryLendTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<LendTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<LendTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMultiLendTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMultiLendTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MultiLendTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MultiLendTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRedeemTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRedeemTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RedeemTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RedeemTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMultiRedeemTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMultiRedeemTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MultiRedeemTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MultiRedeemTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAddTrackedAssetsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAddTrackedAssetsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AddTrackedAssetsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AddTrackedAssetsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRemoveTrackedAssetsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryRemoveTrackedAssetsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RemoveTrackedAssetsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RemoveTrackedAssetsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryApproveAssetsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryApproveAssetsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ApproveAssetsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ApproveAssetsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryStakeTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryStakeTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<StakeTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<StakeTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUnstakeTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUnstakeTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UnstakeTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UnstakeTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryClaimRewardsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryClaimRewardsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ClaimRewardsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ClaimRewardsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryClaimRewardsAndReinvestTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryClaimRewardsAndReinvestTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ClaimRewardsAndReinvestTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ClaimRewardsAndReinvestTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryClaimRewardsAndSwapTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryClaimRewardsAndSwapTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ClaimRewardsAndSwapTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ClaimRewardsAndSwapTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryLendAndStakeTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryLendAndStakeTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<LendAndStakeTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<LendAndStakeTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUnstakeAndRedeemTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUnstakeAndRedeemTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UnstakeAndRedeemTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UnstakeAndRedeemTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestorArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestorsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestor_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestor_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestExecutorArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestExecutorsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestExecutor_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestExecutor_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequest_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequest_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCurrencyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCurrenciesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Currency_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Currency_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCurvePoolAssetDetailArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCurvePoolAssetDetailsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CurvePoolAssetDetail_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CurvePoolAssetDetail_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUniswapV2PoolAssetDetailArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUniswapV2PoolAssetDetailsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UniswapV2PoolAssetDetail_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UniswapV2PoolAssetDetail_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetAmountArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetPriceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryAssetPricesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetPrice_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetPrice_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCurrencyPriceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCurrencyPricesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CurrencyPrice_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CurrencyPrice_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyAssetPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyAssetPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyAssetPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyAssetPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyAssetPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyAssetPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyAssetPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyAssetPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyAssetPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyCurrencyPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyCurrencyPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyCurrencyPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyCurrencyPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyCurrencyPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyCurrencyPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyCurrencyPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyCurrencyPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyPriceCandleGroupArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryHourlyPriceCandleGroupsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyPriceCandleGroup_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyPriceCandleGroup_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyPriceCandleGroupArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryDailyPriceCandleGroupsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyPriceCandleGroup_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyPriceCandleGroup_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyPriceCandleGroupArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMonthlyPriceCandleGroupsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyPriceCandleGroup_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyPriceCandleGroup_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryChainlinkAggregatorProxyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryChainlinkAggregatorProxiesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ChainlinkAggregatorProxy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ChainlinkAggregatorProxy_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCronArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCronsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Cron_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Cron_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworkArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworksArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Network_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Network_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworkStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworkStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworkAssetHoldingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworkAssetHoldingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkAssetHolding_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkAssetHolding_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworkEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryNetworkEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkEventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryComptrollerEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerEventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesChangeInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesChangeInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesChangeInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeSharesChangeInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeSharesChangeInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSharesChangeInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestmentSharesChangeInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryInvestmentSharesChangeInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestmentSharesChangeInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundStateInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFundStateInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundStateInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundStateInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeSettingInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFeeSettingInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSettingInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicySettingInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPolicySettingInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicySettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicySettingInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryIndividualFeeStateInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryIndividualFeeStateInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IndividualFeeStateInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IndividualFeeStateInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPeriodicFundStateInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPeriodicFundStateInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PeriodicFundStateInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PeriodicFundStateInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Trade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Trade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySharesRequestInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: Maybe<Block_Height>;\n};\n\nexport type RedeemTrade = Trade & {\n  __typename?: 'RedeemTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  outgoingAssetAmount: AssetAmount;\n  price: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type RedeemTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['BigDecimal']>;\n  price_not?: Maybe<Scalars['BigDecimal']>;\n  price_gt?: Maybe<Scalars['BigDecimal']>;\n  price_lt?: Maybe<Scalars['BigDecimal']>;\n  price_gte?: Maybe<Scalars['BigDecimal']>;\n  price_lte?: Maybe<Scalars['BigDecimal']>;\n  price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum RedeemTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  OutgoingAssetAmount = 'outgoingAssetAmount',\n  Price = 'price',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type Release = {\n  __typename?: 'Release';\n  id: Scalars['ID'];\n  current: Scalars['Boolean'];\n  open: Scalars['BigInt'];\n  close?: Maybe<Scalars['BigInt']>;\n  funds: Array<Fund>;\n  assets: Array<Asset>;\n  network: Network;\n  adapterBlacklist: Scalars['String'];\n  adapterWhitelist: Scalars['String'];\n  aggregatedDerivativePriceFeed: Scalars['String'];\n  alphaHomoraV1Adapter: Scalars['String'];\n  aaveAdapter: Scalars['String'];\n  assetBlacklist: Scalars['String'];\n  assetWhitelist: Scalars['String'];\n  authUserExecutedSharesRequestorFactory: Scalars['String'];\n  buySharesCallerWhitelist: Scalars['String'];\n  chaiAdapter: Scalars['String'];\n  chaiIntegratee: Scalars['String'];\n  chainlinkPriceFeed: Scalars['String'];\n  compoundAdapter: Scalars['String'];\n  comptrollerLib: Scalars['String'];\n  dispatcher: Scalars['String'];\n  entranceRateBurnFee: Scalars['String'];\n  entranceRateDirectFee: Scalars['String'];\n  feeManager: Scalars['String'];\n  fundActionsWrapper: Scalars['String'];\n  fundDeployer: Scalars['String'];\n  guaranteedRedemption: Scalars['String'];\n  idleAdapter: Scalars['String'];\n  idlePriceFeed: Scalars['String'];\n  integrationManager: Scalars['String'];\n  investorWhitelist: Scalars['String'];\n  kyberAdapter: Scalars['String'];\n  kyberIntegratee: Scalars['String'];\n  managementFee: Scalars['String'];\n  maxConcentration: Scalars['String'];\n  minMaxInvestment: Scalars['String'];\n  paraSwapAdapter: Scalars['String'];\n  paraSwapV4Adapter: Scalars['String'];\n  performanceFee: Scalars['String'];\n  policyManager: Scalars['String'];\n  synthetixAdapter: Scalars['String'];\n  synthetixAddressResolver: Scalars['String'];\n  synthetixDelegateApprovals: Scalars['String'];\n  synthetixIntegratee: Scalars['String'];\n  trackedAssetsAdapter: Scalars['String'];\n  uniswapV2Adapter: Scalars['String'];\n  uniswapV2Integratee: Scalars['String'];\n  yearnVaultV2Adapter: Scalars['String'];\n  valueInterpreter: Scalars['String'];\n  vaultLib: Scalars['String'];\n  wethToken: Scalars['String'];\n  zeroExV2Adapter: Scalars['String'];\n  aavePriceFeed: Scalars['String'];\n  alphaHomoraV1PriceFeed: Scalars['String'];\n  chaiPriceFeed: Scalars['String'];\n  compoundPriceFeed: Scalars['String'];\n  curvePriceFeed: Scalars['String'];\n  curveExchangeAdapter: Scalars['String'];\n  curveLiquidityAaveAdapter: Scalars['String'];\n  curveLiquiditySethAdapter: Scalars['String'];\n  curveLiquidityStethAdapter: Scalars['String'];\n  lidoStethPriceFeed: Scalars['String'];\n  stakehoundEthPriceFeed: Scalars['String'];\n  synthetixPriceFeed: Scalars['String'];\n  uniswapV2PoolPriceFeed: Scalars['String'];\n  wdgldPriceFeed: Scalars['String'];\n  yearnVaultV2PriceFeed: Scalars['String'];\n};\n\n\nexport type ReleaseFundsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fund_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fund_Filter>;\n};\n\n\nexport type ReleaseAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n};\n\nexport type ReleaseStatusSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'ReleaseStatusSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevStatus: Scalars['Int'];\n  nextStatus: Scalars['Int'];\n};\n\nexport type ReleaseStatusSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevStatus?: Maybe<Scalars['Int']>;\n  prevStatus_not?: Maybe<Scalars['Int']>;\n  prevStatus_gt?: Maybe<Scalars['Int']>;\n  prevStatus_lt?: Maybe<Scalars['Int']>;\n  prevStatus_gte?: Maybe<Scalars['Int']>;\n  prevStatus_lte?: Maybe<Scalars['Int']>;\n  prevStatus_in?: Maybe<Array<Scalars['Int']>>;\n  prevStatus_not_in?: Maybe<Array<Scalars['Int']>>;\n  nextStatus?: Maybe<Scalars['Int']>;\n  nextStatus_not?: Maybe<Scalars['Int']>;\n  nextStatus_gt?: Maybe<Scalars['Int']>;\n  nextStatus_lt?: Maybe<Scalars['Int']>;\n  nextStatus_gte?: Maybe<Scalars['Int']>;\n  nextStatus_lte?: Maybe<Scalars['Int']>;\n  nextStatus_in?: Maybe<Array<Scalars['Int']>>;\n  nextStatus_not_in?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport enum ReleaseStatusSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevStatus = 'prevStatus',\n  NextStatus = 'nextStatus'\n}\n\nexport type Release_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  current?: Maybe<Scalars['Boolean']>;\n  current_not?: Maybe<Scalars['Boolean']>;\n  current_in?: Maybe<Array<Scalars['Boolean']>>;\n  current_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  open?: Maybe<Scalars['BigInt']>;\n  open_not?: Maybe<Scalars['BigInt']>;\n  open_gt?: Maybe<Scalars['BigInt']>;\n  open_lt?: Maybe<Scalars['BigInt']>;\n  open_gte?: Maybe<Scalars['BigInt']>;\n  open_lte?: Maybe<Scalars['BigInt']>;\n  open_in?: Maybe<Array<Scalars['BigInt']>>;\n  open_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  close?: Maybe<Scalars['BigInt']>;\n  close_not?: Maybe<Scalars['BigInt']>;\n  close_gt?: Maybe<Scalars['BigInt']>;\n  close_lt?: Maybe<Scalars['BigInt']>;\n  close_gte?: Maybe<Scalars['BigInt']>;\n  close_lte?: Maybe<Scalars['BigInt']>;\n  close_in?: Maybe<Array<Scalars['BigInt']>>;\n  close_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  network?: Maybe<Scalars['String']>;\n  network_not?: Maybe<Scalars['String']>;\n  network_gt?: Maybe<Scalars['String']>;\n  network_lt?: Maybe<Scalars['String']>;\n  network_gte?: Maybe<Scalars['String']>;\n  network_lte?: Maybe<Scalars['String']>;\n  network_in?: Maybe<Array<Scalars['String']>>;\n  network_not_in?: Maybe<Array<Scalars['String']>>;\n  network_contains?: Maybe<Scalars['String']>;\n  network_not_contains?: Maybe<Scalars['String']>;\n  network_starts_with?: Maybe<Scalars['String']>;\n  network_not_starts_with?: Maybe<Scalars['String']>;\n  network_ends_with?: Maybe<Scalars['String']>;\n  network_not_ends_with?: Maybe<Scalars['String']>;\n  adapterBlacklist?: Maybe<Scalars['String']>;\n  adapterBlacklist_not?: Maybe<Scalars['String']>;\n  adapterBlacklist_gt?: Maybe<Scalars['String']>;\n  adapterBlacklist_lt?: Maybe<Scalars['String']>;\n  adapterBlacklist_gte?: Maybe<Scalars['String']>;\n  adapterBlacklist_lte?: Maybe<Scalars['String']>;\n  adapterBlacklist_in?: Maybe<Array<Scalars['String']>>;\n  adapterBlacklist_not_in?: Maybe<Array<Scalars['String']>>;\n  adapterBlacklist_contains?: Maybe<Scalars['String']>;\n  adapterBlacklist_not_contains?: Maybe<Scalars['String']>;\n  adapterBlacklist_starts_with?: Maybe<Scalars['String']>;\n  adapterBlacklist_not_starts_with?: Maybe<Scalars['String']>;\n  adapterBlacklist_ends_with?: Maybe<Scalars['String']>;\n  adapterBlacklist_not_ends_with?: Maybe<Scalars['String']>;\n  adapterWhitelist?: Maybe<Scalars['String']>;\n  adapterWhitelist_not?: Maybe<Scalars['String']>;\n  adapterWhitelist_gt?: Maybe<Scalars['String']>;\n  adapterWhitelist_lt?: Maybe<Scalars['String']>;\n  adapterWhitelist_gte?: Maybe<Scalars['String']>;\n  adapterWhitelist_lte?: Maybe<Scalars['String']>;\n  adapterWhitelist_in?: Maybe<Array<Scalars['String']>>;\n  adapterWhitelist_not_in?: Maybe<Array<Scalars['String']>>;\n  adapterWhitelist_contains?: Maybe<Scalars['String']>;\n  adapterWhitelist_not_contains?: Maybe<Scalars['String']>;\n  adapterWhitelist_starts_with?: Maybe<Scalars['String']>;\n  adapterWhitelist_not_starts_with?: Maybe<Scalars['String']>;\n  adapterWhitelist_ends_with?: Maybe<Scalars['String']>;\n  adapterWhitelist_not_ends_with?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_not?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_gt?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_lt?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_gte?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_lte?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  aggregatedDerivativePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  aggregatedDerivativePriceFeed_contains?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_not_contains?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_starts_with?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_ends_with?: Maybe<Scalars['String']>;\n  aggregatedDerivativePriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_not?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_gt?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_lt?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_gte?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_lte?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_in?: Maybe<Array<Scalars['String']>>;\n  alphaHomoraV1Adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  alphaHomoraV1Adapter_contains?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_not_contains?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_starts_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_not_starts_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_ends_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1Adapter_not_ends_with?: Maybe<Scalars['String']>;\n  aaveAdapter?: Maybe<Scalars['String']>;\n  aaveAdapter_not?: Maybe<Scalars['String']>;\n  aaveAdapter_gt?: Maybe<Scalars['String']>;\n  aaveAdapter_lt?: Maybe<Scalars['String']>;\n  aaveAdapter_gte?: Maybe<Scalars['String']>;\n  aaveAdapter_lte?: Maybe<Scalars['String']>;\n  aaveAdapter_in?: Maybe<Array<Scalars['String']>>;\n  aaveAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  aaveAdapter_contains?: Maybe<Scalars['String']>;\n  aaveAdapter_not_contains?: Maybe<Scalars['String']>;\n  aaveAdapter_starts_with?: Maybe<Scalars['String']>;\n  aaveAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  aaveAdapter_ends_with?: Maybe<Scalars['String']>;\n  aaveAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  assetBlacklist?: Maybe<Scalars['String']>;\n  assetBlacklist_not?: Maybe<Scalars['String']>;\n  assetBlacklist_gt?: Maybe<Scalars['String']>;\n  assetBlacklist_lt?: Maybe<Scalars['String']>;\n  assetBlacklist_gte?: Maybe<Scalars['String']>;\n  assetBlacklist_lte?: Maybe<Scalars['String']>;\n  assetBlacklist_in?: Maybe<Array<Scalars['String']>>;\n  assetBlacklist_not_in?: Maybe<Array<Scalars['String']>>;\n  assetBlacklist_contains?: Maybe<Scalars['String']>;\n  assetBlacklist_not_contains?: Maybe<Scalars['String']>;\n  assetBlacklist_starts_with?: Maybe<Scalars['String']>;\n  assetBlacklist_not_starts_with?: Maybe<Scalars['String']>;\n  assetBlacklist_ends_with?: Maybe<Scalars['String']>;\n  assetBlacklist_not_ends_with?: Maybe<Scalars['String']>;\n  assetWhitelist?: Maybe<Scalars['String']>;\n  assetWhitelist_not?: Maybe<Scalars['String']>;\n  assetWhitelist_gt?: Maybe<Scalars['String']>;\n  assetWhitelist_lt?: Maybe<Scalars['String']>;\n  assetWhitelist_gte?: Maybe<Scalars['String']>;\n  assetWhitelist_lte?: Maybe<Scalars['String']>;\n  assetWhitelist_in?: Maybe<Array<Scalars['String']>>;\n  assetWhitelist_not_in?: Maybe<Array<Scalars['String']>>;\n  assetWhitelist_contains?: Maybe<Scalars['String']>;\n  assetWhitelist_not_contains?: Maybe<Scalars['String']>;\n  assetWhitelist_starts_with?: Maybe<Scalars['String']>;\n  assetWhitelist_not_starts_with?: Maybe<Scalars['String']>;\n  assetWhitelist_ends_with?: Maybe<Scalars['String']>;\n  assetWhitelist_not_ends_with?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_not?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_gt?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_lt?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_gte?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_lte?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_in?: Maybe<Array<Scalars['String']>>;\n  authUserExecutedSharesRequestorFactory_not_in?: Maybe<Array<Scalars['String']>>;\n  authUserExecutedSharesRequestorFactory_contains?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_not_contains?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_starts_with?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_not_starts_with?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_ends_with?: Maybe<Scalars['String']>;\n  authUserExecutedSharesRequestorFactory_not_ends_with?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_not?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_gt?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_lt?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_gte?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_lte?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_in?: Maybe<Array<Scalars['String']>>;\n  buySharesCallerWhitelist_not_in?: Maybe<Array<Scalars['String']>>;\n  buySharesCallerWhitelist_contains?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_not_contains?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_starts_with?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_not_starts_with?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_ends_with?: Maybe<Scalars['String']>;\n  buySharesCallerWhitelist_not_ends_with?: Maybe<Scalars['String']>;\n  chaiAdapter?: Maybe<Scalars['String']>;\n  chaiAdapter_not?: Maybe<Scalars['String']>;\n  chaiAdapter_gt?: Maybe<Scalars['String']>;\n  chaiAdapter_lt?: Maybe<Scalars['String']>;\n  chaiAdapter_gte?: Maybe<Scalars['String']>;\n  chaiAdapter_lte?: Maybe<Scalars['String']>;\n  chaiAdapter_in?: Maybe<Array<Scalars['String']>>;\n  chaiAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  chaiAdapter_contains?: Maybe<Scalars['String']>;\n  chaiAdapter_not_contains?: Maybe<Scalars['String']>;\n  chaiAdapter_starts_with?: Maybe<Scalars['String']>;\n  chaiAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  chaiAdapter_ends_with?: Maybe<Scalars['String']>;\n  chaiAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  chaiIntegratee?: Maybe<Scalars['String']>;\n  chaiIntegratee_not?: Maybe<Scalars['String']>;\n  chaiIntegratee_gt?: Maybe<Scalars['String']>;\n  chaiIntegratee_lt?: Maybe<Scalars['String']>;\n  chaiIntegratee_gte?: Maybe<Scalars['String']>;\n  chaiIntegratee_lte?: Maybe<Scalars['String']>;\n  chaiIntegratee_in?: Maybe<Array<Scalars['String']>>;\n  chaiIntegratee_not_in?: Maybe<Array<Scalars['String']>>;\n  chaiIntegratee_contains?: Maybe<Scalars['String']>;\n  chaiIntegratee_not_contains?: Maybe<Scalars['String']>;\n  chaiIntegratee_starts_with?: Maybe<Scalars['String']>;\n  chaiIntegratee_not_starts_with?: Maybe<Scalars['String']>;\n  chaiIntegratee_ends_with?: Maybe<Scalars['String']>;\n  chaiIntegratee_not_ends_with?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_not?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_gt?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_lt?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_gte?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_lte?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  chainlinkPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  chainlinkPriceFeed_contains?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  chainlinkPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  compoundAdapter?: Maybe<Scalars['String']>;\n  compoundAdapter_not?: Maybe<Scalars['String']>;\n  compoundAdapter_gt?: Maybe<Scalars['String']>;\n  compoundAdapter_lt?: Maybe<Scalars['String']>;\n  compoundAdapter_gte?: Maybe<Scalars['String']>;\n  compoundAdapter_lte?: Maybe<Scalars['String']>;\n  compoundAdapter_in?: Maybe<Array<Scalars['String']>>;\n  compoundAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  compoundAdapter_contains?: Maybe<Scalars['String']>;\n  compoundAdapter_not_contains?: Maybe<Scalars['String']>;\n  compoundAdapter_starts_with?: Maybe<Scalars['String']>;\n  compoundAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  compoundAdapter_ends_with?: Maybe<Scalars['String']>;\n  compoundAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerLib?: Maybe<Scalars['String']>;\n  comptrollerLib_not?: Maybe<Scalars['String']>;\n  comptrollerLib_gt?: Maybe<Scalars['String']>;\n  comptrollerLib_lt?: Maybe<Scalars['String']>;\n  comptrollerLib_gte?: Maybe<Scalars['String']>;\n  comptrollerLib_lte?: Maybe<Scalars['String']>;\n  comptrollerLib_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerLib_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerLib_contains?: Maybe<Scalars['String']>;\n  comptrollerLib_not_contains?: Maybe<Scalars['String']>;\n  comptrollerLib_starts_with?: Maybe<Scalars['String']>;\n  comptrollerLib_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerLib_ends_with?: Maybe<Scalars['String']>;\n  comptrollerLib_not_ends_with?: Maybe<Scalars['String']>;\n  dispatcher?: Maybe<Scalars['String']>;\n  dispatcher_not?: Maybe<Scalars['String']>;\n  dispatcher_gt?: Maybe<Scalars['String']>;\n  dispatcher_lt?: Maybe<Scalars['String']>;\n  dispatcher_gte?: Maybe<Scalars['String']>;\n  dispatcher_lte?: Maybe<Scalars['String']>;\n  dispatcher_in?: Maybe<Array<Scalars['String']>>;\n  dispatcher_not_in?: Maybe<Array<Scalars['String']>>;\n  dispatcher_contains?: Maybe<Scalars['String']>;\n  dispatcher_not_contains?: Maybe<Scalars['String']>;\n  dispatcher_starts_with?: Maybe<Scalars['String']>;\n  dispatcher_not_starts_with?: Maybe<Scalars['String']>;\n  dispatcher_ends_with?: Maybe<Scalars['String']>;\n  dispatcher_not_ends_with?: Maybe<Scalars['String']>;\n  entranceRateBurnFee?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_not?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_gt?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_lt?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_gte?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_lte?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_in?: Maybe<Array<Scalars['String']>>;\n  entranceRateBurnFee_not_in?: Maybe<Array<Scalars['String']>>;\n  entranceRateBurnFee_contains?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_not_contains?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_starts_with?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_not_starts_with?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_ends_with?: Maybe<Scalars['String']>;\n  entranceRateBurnFee_not_ends_with?: Maybe<Scalars['String']>;\n  entranceRateDirectFee?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_not?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_gt?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_lt?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_gte?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_lte?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_in?: Maybe<Array<Scalars['String']>>;\n  entranceRateDirectFee_not_in?: Maybe<Array<Scalars['String']>>;\n  entranceRateDirectFee_contains?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_not_contains?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_starts_with?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_not_starts_with?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_ends_with?: Maybe<Scalars['String']>;\n  entranceRateDirectFee_not_ends_with?: Maybe<Scalars['String']>;\n  feeManager?: Maybe<Scalars['String']>;\n  feeManager_not?: Maybe<Scalars['String']>;\n  feeManager_gt?: Maybe<Scalars['String']>;\n  feeManager_lt?: Maybe<Scalars['String']>;\n  feeManager_gte?: Maybe<Scalars['String']>;\n  feeManager_lte?: Maybe<Scalars['String']>;\n  feeManager_in?: Maybe<Array<Scalars['String']>>;\n  feeManager_not_in?: Maybe<Array<Scalars['String']>>;\n  feeManager_contains?: Maybe<Scalars['String']>;\n  feeManager_not_contains?: Maybe<Scalars['String']>;\n  feeManager_starts_with?: Maybe<Scalars['String']>;\n  feeManager_not_starts_with?: Maybe<Scalars['String']>;\n  feeManager_ends_with?: Maybe<Scalars['String']>;\n  feeManager_not_ends_with?: Maybe<Scalars['String']>;\n  fundActionsWrapper?: Maybe<Scalars['String']>;\n  fundActionsWrapper_not?: Maybe<Scalars['String']>;\n  fundActionsWrapper_gt?: Maybe<Scalars['String']>;\n  fundActionsWrapper_lt?: Maybe<Scalars['String']>;\n  fundActionsWrapper_gte?: Maybe<Scalars['String']>;\n  fundActionsWrapper_lte?: Maybe<Scalars['String']>;\n  fundActionsWrapper_in?: Maybe<Array<Scalars['String']>>;\n  fundActionsWrapper_not_in?: Maybe<Array<Scalars['String']>>;\n  fundActionsWrapper_contains?: Maybe<Scalars['String']>;\n  fundActionsWrapper_not_contains?: Maybe<Scalars['String']>;\n  fundActionsWrapper_starts_with?: Maybe<Scalars['String']>;\n  fundActionsWrapper_not_starts_with?: Maybe<Scalars['String']>;\n  fundActionsWrapper_ends_with?: Maybe<Scalars['String']>;\n  fundActionsWrapper_not_ends_with?: Maybe<Scalars['String']>;\n  fundDeployer?: Maybe<Scalars['String']>;\n  fundDeployer_not?: Maybe<Scalars['String']>;\n  fundDeployer_gt?: Maybe<Scalars['String']>;\n  fundDeployer_lt?: Maybe<Scalars['String']>;\n  fundDeployer_gte?: Maybe<Scalars['String']>;\n  fundDeployer_lte?: Maybe<Scalars['String']>;\n  fundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  fundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  fundDeployer_contains?: Maybe<Scalars['String']>;\n  fundDeployer_not_contains?: Maybe<Scalars['String']>;\n  fundDeployer_starts_with?: Maybe<Scalars['String']>;\n  fundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  fundDeployer_ends_with?: Maybe<Scalars['String']>;\n  fundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n  guaranteedRedemption?: Maybe<Scalars['String']>;\n  guaranteedRedemption_not?: Maybe<Scalars['String']>;\n  guaranteedRedemption_gt?: Maybe<Scalars['String']>;\n  guaranteedRedemption_lt?: Maybe<Scalars['String']>;\n  guaranteedRedemption_gte?: Maybe<Scalars['String']>;\n  guaranteedRedemption_lte?: Maybe<Scalars['String']>;\n  guaranteedRedemption_in?: Maybe<Array<Scalars['String']>>;\n  guaranteedRedemption_not_in?: Maybe<Array<Scalars['String']>>;\n  guaranteedRedemption_contains?: Maybe<Scalars['String']>;\n  guaranteedRedemption_not_contains?: Maybe<Scalars['String']>;\n  guaranteedRedemption_starts_with?: Maybe<Scalars['String']>;\n  guaranteedRedemption_not_starts_with?: Maybe<Scalars['String']>;\n  guaranteedRedemption_ends_with?: Maybe<Scalars['String']>;\n  guaranteedRedemption_not_ends_with?: Maybe<Scalars['String']>;\n  idleAdapter?: Maybe<Scalars['String']>;\n  idleAdapter_not?: Maybe<Scalars['String']>;\n  idleAdapter_gt?: Maybe<Scalars['String']>;\n  idleAdapter_lt?: Maybe<Scalars['String']>;\n  idleAdapter_gte?: Maybe<Scalars['String']>;\n  idleAdapter_lte?: Maybe<Scalars['String']>;\n  idleAdapter_in?: Maybe<Array<Scalars['String']>>;\n  idleAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  idleAdapter_contains?: Maybe<Scalars['String']>;\n  idleAdapter_not_contains?: Maybe<Scalars['String']>;\n  idleAdapter_starts_with?: Maybe<Scalars['String']>;\n  idleAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  idleAdapter_ends_with?: Maybe<Scalars['String']>;\n  idleAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  idlePriceFeed?: Maybe<Scalars['String']>;\n  idlePriceFeed_not?: Maybe<Scalars['String']>;\n  idlePriceFeed_gt?: Maybe<Scalars['String']>;\n  idlePriceFeed_lt?: Maybe<Scalars['String']>;\n  idlePriceFeed_gte?: Maybe<Scalars['String']>;\n  idlePriceFeed_lte?: Maybe<Scalars['String']>;\n  idlePriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  idlePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  idlePriceFeed_contains?: Maybe<Scalars['String']>;\n  idlePriceFeed_not_contains?: Maybe<Scalars['String']>;\n  idlePriceFeed_starts_with?: Maybe<Scalars['String']>;\n  idlePriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  idlePriceFeed_ends_with?: Maybe<Scalars['String']>;\n  idlePriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  integrationManager?: Maybe<Scalars['String']>;\n  integrationManager_not?: Maybe<Scalars['String']>;\n  integrationManager_gt?: Maybe<Scalars['String']>;\n  integrationManager_lt?: Maybe<Scalars['String']>;\n  integrationManager_gte?: Maybe<Scalars['String']>;\n  integrationManager_lte?: Maybe<Scalars['String']>;\n  integrationManager_in?: Maybe<Array<Scalars['String']>>;\n  integrationManager_not_in?: Maybe<Array<Scalars['String']>>;\n  integrationManager_contains?: Maybe<Scalars['String']>;\n  integrationManager_not_contains?: Maybe<Scalars['String']>;\n  integrationManager_starts_with?: Maybe<Scalars['String']>;\n  integrationManager_not_starts_with?: Maybe<Scalars['String']>;\n  integrationManager_ends_with?: Maybe<Scalars['String']>;\n  integrationManager_not_ends_with?: Maybe<Scalars['String']>;\n  investorWhitelist?: Maybe<Scalars['String']>;\n  investorWhitelist_not?: Maybe<Scalars['String']>;\n  investorWhitelist_gt?: Maybe<Scalars['String']>;\n  investorWhitelist_lt?: Maybe<Scalars['String']>;\n  investorWhitelist_gte?: Maybe<Scalars['String']>;\n  investorWhitelist_lte?: Maybe<Scalars['String']>;\n  investorWhitelist_in?: Maybe<Array<Scalars['String']>>;\n  investorWhitelist_not_in?: Maybe<Array<Scalars['String']>>;\n  investorWhitelist_contains?: Maybe<Scalars['String']>;\n  investorWhitelist_not_contains?: Maybe<Scalars['String']>;\n  investorWhitelist_starts_with?: Maybe<Scalars['String']>;\n  investorWhitelist_not_starts_with?: Maybe<Scalars['String']>;\n  investorWhitelist_ends_with?: Maybe<Scalars['String']>;\n  investorWhitelist_not_ends_with?: Maybe<Scalars['String']>;\n  kyberAdapter?: Maybe<Scalars['String']>;\n  kyberAdapter_not?: Maybe<Scalars['String']>;\n  kyberAdapter_gt?: Maybe<Scalars['String']>;\n  kyberAdapter_lt?: Maybe<Scalars['String']>;\n  kyberAdapter_gte?: Maybe<Scalars['String']>;\n  kyberAdapter_lte?: Maybe<Scalars['String']>;\n  kyberAdapter_in?: Maybe<Array<Scalars['String']>>;\n  kyberAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  kyberAdapter_contains?: Maybe<Scalars['String']>;\n  kyberAdapter_not_contains?: Maybe<Scalars['String']>;\n  kyberAdapter_starts_with?: Maybe<Scalars['String']>;\n  kyberAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  kyberAdapter_ends_with?: Maybe<Scalars['String']>;\n  kyberAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  kyberIntegratee?: Maybe<Scalars['String']>;\n  kyberIntegratee_not?: Maybe<Scalars['String']>;\n  kyberIntegratee_gt?: Maybe<Scalars['String']>;\n  kyberIntegratee_lt?: Maybe<Scalars['String']>;\n  kyberIntegratee_gte?: Maybe<Scalars['String']>;\n  kyberIntegratee_lte?: Maybe<Scalars['String']>;\n  kyberIntegratee_in?: Maybe<Array<Scalars['String']>>;\n  kyberIntegratee_not_in?: Maybe<Array<Scalars['String']>>;\n  kyberIntegratee_contains?: Maybe<Scalars['String']>;\n  kyberIntegratee_not_contains?: Maybe<Scalars['String']>;\n  kyberIntegratee_starts_with?: Maybe<Scalars['String']>;\n  kyberIntegratee_not_starts_with?: Maybe<Scalars['String']>;\n  kyberIntegratee_ends_with?: Maybe<Scalars['String']>;\n  kyberIntegratee_not_ends_with?: Maybe<Scalars['String']>;\n  managementFee?: Maybe<Scalars['String']>;\n  managementFee_not?: Maybe<Scalars['String']>;\n  managementFee_gt?: Maybe<Scalars['String']>;\n  managementFee_lt?: Maybe<Scalars['String']>;\n  managementFee_gte?: Maybe<Scalars['String']>;\n  managementFee_lte?: Maybe<Scalars['String']>;\n  managementFee_in?: Maybe<Array<Scalars['String']>>;\n  managementFee_not_in?: Maybe<Array<Scalars['String']>>;\n  managementFee_contains?: Maybe<Scalars['String']>;\n  managementFee_not_contains?: Maybe<Scalars['String']>;\n  managementFee_starts_with?: Maybe<Scalars['String']>;\n  managementFee_not_starts_with?: Maybe<Scalars['String']>;\n  managementFee_ends_with?: Maybe<Scalars['String']>;\n  managementFee_not_ends_with?: Maybe<Scalars['String']>;\n  maxConcentration?: Maybe<Scalars['String']>;\n  maxConcentration_not?: Maybe<Scalars['String']>;\n  maxConcentration_gt?: Maybe<Scalars['String']>;\n  maxConcentration_lt?: Maybe<Scalars['String']>;\n  maxConcentration_gte?: Maybe<Scalars['String']>;\n  maxConcentration_lte?: Maybe<Scalars['String']>;\n  maxConcentration_in?: Maybe<Array<Scalars['String']>>;\n  maxConcentration_not_in?: Maybe<Array<Scalars['String']>>;\n  maxConcentration_contains?: Maybe<Scalars['String']>;\n  maxConcentration_not_contains?: Maybe<Scalars['String']>;\n  maxConcentration_starts_with?: Maybe<Scalars['String']>;\n  maxConcentration_not_starts_with?: Maybe<Scalars['String']>;\n  maxConcentration_ends_with?: Maybe<Scalars['String']>;\n  maxConcentration_not_ends_with?: Maybe<Scalars['String']>;\n  minMaxInvestment?: Maybe<Scalars['String']>;\n  minMaxInvestment_not?: Maybe<Scalars['String']>;\n  minMaxInvestment_gt?: Maybe<Scalars['String']>;\n  minMaxInvestment_lt?: Maybe<Scalars['String']>;\n  minMaxInvestment_gte?: Maybe<Scalars['String']>;\n  minMaxInvestment_lte?: Maybe<Scalars['String']>;\n  minMaxInvestment_in?: Maybe<Array<Scalars['String']>>;\n  minMaxInvestment_not_in?: Maybe<Array<Scalars['String']>>;\n  minMaxInvestment_contains?: Maybe<Scalars['String']>;\n  minMaxInvestment_not_contains?: Maybe<Scalars['String']>;\n  minMaxInvestment_starts_with?: Maybe<Scalars['String']>;\n  minMaxInvestment_not_starts_with?: Maybe<Scalars['String']>;\n  minMaxInvestment_ends_with?: Maybe<Scalars['String']>;\n  minMaxInvestment_not_ends_with?: Maybe<Scalars['String']>;\n  paraSwapAdapter?: Maybe<Scalars['String']>;\n  paraSwapAdapter_not?: Maybe<Scalars['String']>;\n  paraSwapAdapter_gt?: Maybe<Scalars['String']>;\n  paraSwapAdapter_lt?: Maybe<Scalars['String']>;\n  paraSwapAdapter_gte?: Maybe<Scalars['String']>;\n  paraSwapAdapter_lte?: Maybe<Scalars['String']>;\n  paraSwapAdapter_in?: Maybe<Array<Scalars['String']>>;\n  paraSwapAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  paraSwapAdapter_contains?: Maybe<Scalars['String']>;\n  paraSwapAdapter_not_contains?: Maybe<Scalars['String']>;\n  paraSwapAdapter_starts_with?: Maybe<Scalars['String']>;\n  paraSwapAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  paraSwapAdapter_ends_with?: Maybe<Scalars['String']>;\n  paraSwapAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_not?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_gt?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_lt?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_gte?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_lte?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_in?: Maybe<Array<Scalars['String']>>;\n  paraSwapV4Adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  paraSwapV4Adapter_contains?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_not_contains?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_starts_with?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_not_starts_with?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_ends_with?: Maybe<Scalars['String']>;\n  paraSwapV4Adapter_not_ends_with?: Maybe<Scalars['String']>;\n  performanceFee?: Maybe<Scalars['String']>;\n  performanceFee_not?: Maybe<Scalars['String']>;\n  performanceFee_gt?: Maybe<Scalars['String']>;\n  performanceFee_lt?: Maybe<Scalars['String']>;\n  performanceFee_gte?: Maybe<Scalars['String']>;\n  performanceFee_lte?: Maybe<Scalars['String']>;\n  performanceFee_in?: Maybe<Array<Scalars['String']>>;\n  performanceFee_not_in?: Maybe<Array<Scalars['String']>>;\n  performanceFee_contains?: Maybe<Scalars['String']>;\n  performanceFee_not_contains?: Maybe<Scalars['String']>;\n  performanceFee_starts_with?: Maybe<Scalars['String']>;\n  performanceFee_not_starts_with?: Maybe<Scalars['String']>;\n  performanceFee_ends_with?: Maybe<Scalars['String']>;\n  performanceFee_not_ends_with?: Maybe<Scalars['String']>;\n  policyManager?: Maybe<Scalars['String']>;\n  policyManager_not?: Maybe<Scalars['String']>;\n  policyManager_gt?: Maybe<Scalars['String']>;\n  policyManager_lt?: Maybe<Scalars['String']>;\n  policyManager_gte?: Maybe<Scalars['String']>;\n  policyManager_lte?: Maybe<Scalars['String']>;\n  policyManager_in?: Maybe<Array<Scalars['String']>>;\n  policyManager_not_in?: Maybe<Array<Scalars['String']>>;\n  policyManager_contains?: Maybe<Scalars['String']>;\n  policyManager_not_contains?: Maybe<Scalars['String']>;\n  policyManager_starts_with?: Maybe<Scalars['String']>;\n  policyManager_not_starts_with?: Maybe<Scalars['String']>;\n  policyManager_ends_with?: Maybe<Scalars['String']>;\n  policyManager_not_ends_with?: Maybe<Scalars['String']>;\n  synthetixAdapter?: Maybe<Scalars['String']>;\n  synthetixAdapter_not?: Maybe<Scalars['String']>;\n  synthetixAdapter_gt?: Maybe<Scalars['String']>;\n  synthetixAdapter_lt?: Maybe<Scalars['String']>;\n  synthetixAdapter_gte?: Maybe<Scalars['String']>;\n  synthetixAdapter_lte?: Maybe<Scalars['String']>;\n  synthetixAdapter_in?: Maybe<Array<Scalars['String']>>;\n  synthetixAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  synthetixAdapter_contains?: Maybe<Scalars['String']>;\n  synthetixAdapter_not_contains?: Maybe<Scalars['String']>;\n  synthetixAdapter_starts_with?: Maybe<Scalars['String']>;\n  synthetixAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  synthetixAdapter_ends_with?: Maybe<Scalars['String']>;\n  synthetixAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  synthetixAddressResolver?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_not?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_gt?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_lt?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_gte?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_lte?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_in?: Maybe<Array<Scalars['String']>>;\n  synthetixAddressResolver_not_in?: Maybe<Array<Scalars['String']>>;\n  synthetixAddressResolver_contains?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_not_contains?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_starts_with?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_not_starts_with?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_ends_with?: Maybe<Scalars['String']>;\n  synthetixAddressResolver_not_ends_with?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_not?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_gt?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_lt?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_gte?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_lte?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_in?: Maybe<Array<Scalars['String']>>;\n  synthetixDelegateApprovals_not_in?: Maybe<Array<Scalars['String']>>;\n  synthetixDelegateApprovals_contains?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_not_contains?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_starts_with?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_not_starts_with?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_ends_with?: Maybe<Scalars['String']>;\n  synthetixDelegateApprovals_not_ends_with?: Maybe<Scalars['String']>;\n  synthetixIntegratee?: Maybe<Scalars['String']>;\n  synthetixIntegratee_not?: Maybe<Scalars['String']>;\n  synthetixIntegratee_gt?: Maybe<Scalars['String']>;\n  synthetixIntegratee_lt?: Maybe<Scalars['String']>;\n  synthetixIntegratee_gte?: Maybe<Scalars['String']>;\n  synthetixIntegratee_lte?: Maybe<Scalars['String']>;\n  synthetixIntegratee_in?: Maybe<Array<Scalars['String']>>;\n  synthetixIntegratee_not_in?: Maybe<Array<Scalars['String']>>;\n  synthetixIntegratee_contains?: Maybe<Scalars['String']>;\n  synthetixIntegratee_not_contains?: Maybe<Scalars['String']>;\n  synthetixIntegratee_starts_with?: Maybe<Scalars['String']>;\n  synthetixIntegratee_not_starts_with?: Maybe<Scalars['String']>;\n  synthetixIntegratee_ends_with?: Maybe<Scalars['String']>;\n  synthetixIntegratee_not_ends_with?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_not?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_gt?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_lt?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_gte?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_lte?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_in?: Maybe<Array<Scalars['String']>>;\n  trackedAssetsAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  trackedAssetsAdapter_contains?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_not_contains?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_starts_with?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_ends_with?: Maybe<Scalars['String']>;\n  trackedAssetsAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2Adapter?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_not?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_gt?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_lt?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_gte?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_lte?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2Adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2Adapter_contains?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_not_contains?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_not_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2Adapter_not_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2Integratee?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_not?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_gt?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_lt?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_gte?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_lte?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2Integratee_not_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2Integratee_contains?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_not_contains?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_not_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2Integratee_not_ends_with?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_not?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_gt?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_lt?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_gte?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_lte?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_in?: Maybe<Array<Scalars['String']>>;\n  yearnVaultV2Adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  yearnVaultV2Adapter_contains?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_not_contains?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_starts_with?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_not_starts_with?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_ends_with?: Maybe<Scalars['String']>;\n  yearnVaultV2Adapter_not_ends_with?: Maybe<Scalars['String']>;\n  valueInterpreter?: Maybe<Scalars['String']>;\n  valueInterpreter_not?: Maybe<Scalars['String']>;\n  valueInterpreter_gt?: Maybe<Scalars['String']>;\n  valueInterpreter_lt?: Maybe<Scalars['String']>;\n  valueInterpreter_gte?: Maybe<Scalars['String']>;\n  valueInterpreter_lte?: Maybe<Scalars['String']>;\n  valueInterpreter_in?: Maybe<Array<Scalars['String']>>;\n  valueInterpreter_not_in?: Maybe<Array<Scalars['String']>>;\n  valueInterpreter_contains?: Maybe<Scalars['String']>;\n  valueInterpreter_not_contains?: Maybe<Scalars['String']>;\n  valueInterpreter_starts_with?: Maybe<Scalars['String']>;\n  valueInterpreter_not_starts_with?: Maybe<Scalars['String']>;\n  valueInterpreter_ends_with?: Maybe<Scalars['String']>;\n  valueInterpreter_not_ends_with?: Maybe<Scalars['String']>;\n  vaultLib?: Maybe<Scalars['String']>;\n  vaultLib_not?: Maybe<Scalars['String']>;\n  vaultLib_gt?: Maybe<Scalars['String']>;\n  vaultLib_lt?: Maybe<Scalars['String']>;\n  vaultLib_gte?: Maybe<Scalars['String']>;\n  vaultLib_lte?: Maybe<Scalars['String']>;\n  vaultLib_in?: Maybe<Array<Scalars['String']>>;\n  vaultLib_not_in?: Maybe<Array<Scalars['String']>>;\n  vaultLib_contains?: Maybe<Scalars['String']>;\n  vaultLib_not_contains?: Maybe<Scalars['String']>;\n  vaultLib_starts_with?: Maybe<Scalars['String']>;\n  vaultLib_not_starts_with?: Maybe<Scalars['String']>;\n  vaultLib_ends_with?: Maybe<Scalars['String']>;\n  vaultLib_not_ends_with?: Maybe<Scalars['String']>;\n  wethToken?: Maybe<Scalars['String']>;\n  wethToken_not?: Maybe<Scalars['String']>;\n  wethToken_gt?: Maybe<Scalars['String']>;\n  wethToken_lt?: Maybe<Scalars['String']>;\n  wethToken_gte?: Maybe<Scalars['String']>;\n  wethToken_lte?: Maybe<Scalars['String']>;\n  wethToken_in?: Maybe<Array<Scalars['String']>>;\n  wethToken_not_in?: Maybe<Array<Scalars['String']>>;\n  wethToken_contains?: Maybe<Scalars['String']>;\n  wethToken_not_contains?: Maybe<Scalars['String']>;\n  wethToken_starts_with?: Maybe<Scalars['String']>;\n  wethToken_not_starts_with?: Maybe<Scalars['String']>;\n  wethToken_ends_with?: Maybe<Scalars['String']>;\n  wethToken_not_ends_with?: Maybe<Scalars['String']>;\n  zeroExV2Adapter?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_not?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_gt?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_lt?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_gte?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_lte?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_in?: Maybe<Array<Scalars['String']>>;\n  zeroExV2Adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  zeroExV2Adapter_contains?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_not_contains?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_starts_with?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_not_starts_with?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_ends_with?: Maybe<Scalars['String']>;\n  zeroExV2Adapter_not_ends_with?: Maybe<Scalars['String']>;\n  aavePriceFeed?: Maybe<Scalars['String']>;\n  aavePriceFeed_not?: Maybe<Scalars['String']>;\n  aavePriceFeed_gt?: Maybe<Scalars['String']>;\n  aavePriceFeed_lt?: Maybe<Scalars['String']>;\n  aavePriceFeed_gte?: Maybe<Scalars['String']>;\n  aavePriceFeed_lte?: Maybe<Scalars['String']>;\n  aavePriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  aavePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  aavePriceFeed_contains?: Maybe<Scalars['String']>;\n  aavePriceFeed_not_contains?: Maybe<Scalars['String']>;\n  aavePriceFeed_starts_with?: Maybe<Scalars['String']>;\n  aavePriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  aavePriceFeed_ends_with?: Maybe<Scalars['String']>;\n  aavePriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_not?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_gt?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_lt?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_gte?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_lte?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  alphaHomoraV1PriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  alphaHomoraV1PriceFeed_contains?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_not_contains?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_starts_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_ends_with?: Maybe<Scalars['String']>;\n  alphaHomoraV1PriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  chaiPriceFeed?: Maybe<Scalars['String']>;\n  chaiPriceFeed_not?: Maybe<Scalars['String']>;\n  chaiPriceFeed_gt?: Maybe<Scalars['String']>;\n  chaiPriceFeed_lt?: Maybe<Scalars['String']>;\n  chaiPriceFeed_gte?: Maybe<Scalars['String']>;\n  chaiPriceFeed_lte?: Maybe<Scalars['String']>;\n  chaiPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  chaiPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  chaiPriceFeed_contains?: Maybe<Scalars['String']>;\n  chaiPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  chaiPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  chaiPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  chaiPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  chaiPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  compoundPriceFeed?: Maybe<Scalars['String']>;\n  compoundPriceFeed_not?: Maybe<Scalars['String']>;\n  compoundPriceFeed_gt?: Maybe<Scalars['String']>;\n  compoundPriceFeed_lt?: Maybe<Scalars['String']>;\n  compoundPriceFeed_gte?: Maybe<Scalars['String']>;\n  compoundPriceFeed_lte?: Maybe<Scalars['String']>;\n  compoundPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  compoundPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  compoundPriceFeed_contains?: Maybe<Scalars['String']>;\n  compoundPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  compoundPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  compoundPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  compoundPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  compoundPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  curvePriceFeed?: Maybe<Scalars['String']>;\n  curvePriceFeed_not?: Maybe<Scalars['String']>;\n  curvePriceFeed_gt?: Maybe<Scalars['String']>;\n  curvePriceFeed_lt?: Maybe<Scalars['String']>;\n  curvePriceFeed_gte?: Maybe<Scalars['String']>;\n  curvePriceFeed_lte?: Maybe<Scalars['String']>;\n  curvePriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  curvePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  curvePriceFeed_contains?: Maybe<Scalars['String']>;\n  curvePriceFeed_not_contains?: Maybe<Scalars['String']>;\n  curvePriceFeed_starts_with?: Maybe<Scalars['String']>;\n  curvePriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  curvePriceFeed_ends_with?: Maybe<Scalars['String']>;\n  curvePriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  curveExchangeAdapter?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_not?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_gt?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_lt?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_gte?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_lte?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_in?: Maybe<Array<Scalars['String']>>;\n  curveExchangeAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  curveExchangeAdapter_contains?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_not_contains?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_starts_with?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_ends_with?: Maybe<Scalars['String']>;\n  curveExchangeAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_not?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_gt?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_lt?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_gte?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_lte?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_in?: Maybe<Array<Scalars['String']>>;\n  curveLiquidityAaveAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  curveLiquidityAaveAdapter_contains?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_not_contains?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_starts_with?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_ends_with?: Maybe<Scalars['String']>;\n  curveLiquidityAaveAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_not?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_gt?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_lt?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_gte?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_lte?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_in?: Maybe<Array<Scalars['String']>>;\n  curveLiquiditySethAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  curveLiquiditySethAdapter_contains?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_not_contains?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_starts_with?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_ends_with?: Maybe<Scalars['String']>;\n  curveLiquiditySethAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_not?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_gt?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_lt?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_gte?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_lte?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_in?: Maybe<Array<Scalars['String']>>;\n  curveLiquidityStethAdapter_not_in?: Maybe<Array<Scalars['String']>>;\n  curveLiquidityStethAdapter_contains?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_not_contains?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_starts_with?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_not_starts_with?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_ends_with?: Maybe<Scalars['String']>;\n  curveLiquidityStethAdapter_not_ends_with?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_not?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_gt?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_lt?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_gte?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_lte?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  lidoStethPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  lidoStethPriceFeed_contains?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  lidoStethPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_not?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_gt?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_lt?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_gte?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_lte?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  stakehoundEthPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  stakehoundEthPriceFeed_contains?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  stakehoundEthPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  synthetixPriceFeed?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_not?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_gt?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_lt?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_gte?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_lte?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  synthetixPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  synthetixPriceFeed_contains?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  synthetixPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_not?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_gt?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_lt?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_gte?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_lte?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2PoolPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  uniswapV2PoolPriceFeed_contains?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  uniswapV2PoolPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  wdgldPriceFeed?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_not?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_gt?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_lt?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_gte?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_lte?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  wdgldPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  wdgldPriceFeed_contains?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_not_contains?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_starts_with?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_ends_with?: Maybe<Scalars['String']>;\n  wdgldPriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_not?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_gt?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_lt?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_gte?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_lte?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_in?: Maybe<Array<Scalars['String']>>;\n  yearnVaultV2PriceFeed_not_in?: Maybe<Array<Scalars['String']>>;\n  yearnVaultV2PriceFeed_contains?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_not_contains?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_starts_with?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_not_starts_with?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_ends_with?: Maybe<Scalars['String']>;\n  yearnVaultV2PriceFeed_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Release_OrderBy {\n  Id = 'id',\n  Current = 'current',\n  Open = 'open',\n  Close = 'close',\n  Funds = 'funds',\n  Assets = 'assets',\n  Network = 'network',\n  AdapterBlacklist = 'adapterBlacklist',\n  AdapterWhitelist = 'adapterWhitelist',\n  AggregatedDerivativePriceFeed = 'aggregatedDerivativePriceFeed',\n  AlphaHomoraV1Adapter = 'alphaHomoraV1Adapter',\n  AaveAdapter = 'aaveAdapter',\n  AssetBlacklist = 'assetBlacklist',\n  AssetWhitelist = 'assetWhitelist',\n  AuthUserExecutedSharesRequestorFactory = 'authUserExecutedSharesRequestorFactory',\n  BuySharesCallerWhitelist = 'buySharesCallerWhitelist',\n  ChaiAdapter = 'chaiAdapter',\n  ChaiIntegratee = 'chaiIntegratee',\n  ChainlinkPriceFeed = 'chainlinkPriceFeed',\n  CompoundAdapter = 'compoundAdapter',\n  ComptrollerLib = 'comptrollerLib',\n  Dispatcher = 'dispatcher',\n  EntranceRateBurnFee = 'entranceRateBurnFee',\n  EntranceRateDirectFee = 'entranceRateDirectFee',\n  FeeManager = 'feeManager',\n  FundActionsWrapper = 'fundActionsWrapper',\n  FundDeployer = 'fundDeployer',\n  GuaranteedRedemption = 'guaranteedRedemption',\n  IdleAdapter = 'idleAdapter',\n  IdlePriceFeed = 'idlePriceFeed',\n  IntegrationManager = 'integrationManager',\n  InvestorWhitelist = 'investorWhitelist',\n  KyberAdapter = 'kyberAdapter',\n  KyberIntegratee = 'kyberIntegratee',\n  ManagementFee = 'managementFee',\n  MaxConcentration = 'maxConcentration',\n  MinMaxInvestment = 'minMaxInvestment',\n  ParaSwapAdapter = 'paraSwapAdapter',\n  ParaSwapV4Adapter = 'paraSwapV4Adapter',\n  PerformanceFee = 'performanceFee',\n  PolicyManager = 'policyManager',\n  SynthetixAdapter = 'synthetixAdapter',\n  SynthetixAddressResolver = 'synthetixAddressResolver',\n  SynthetixDelegateApprovals = 'synthetixDelegateApprovals',\n  SynthetixIntegratee = 'synthetixIntegratee',\n  TrackedAssetsAdapter = 'trackedAssetsAdapter',\n  UniswapV2Adapter = 'uniswapV2Adapter',\n  UniswapV2Integratee = 'uniswapV2Integratee',\n  YearnVaultV2Adapter = 'yearnVaultV2Adapter',\n  ValueInterpreter = 'valueInterpreter',\n  VaultLib = 'vaultLib',\n  WethToken = 'wethToken',\n  ZeroExV2Adapter = 'zeroExV2Adapter',\n  AavePriceFeed = 'aavePriceFeed',\n  AlphaHomoraV1PriceFeed = 'alphaHomoraV1PriceFeed',\n  ChaiPriceFeed = 'chaiPriceFeed',\n  CompoundPriceFeed = 'compoundPriceFeed',\n  CurvePriceFeed = 'curvePriceFeed',\n  CurveExchangeAdapter = 'curveExchangeAdapter',\n  CurveLiquidityAaveAdapter = 'curveLiquidityAaveAdapter',\n  CurveLiquiditySethAdapter = 'curveLiquiditySethAdapter',\n  CurveLiquidityStethAdapter = 'curveLiquidityStethAdapter',\n  LidoStethPriceFeed = 'lidoStethPriceFeed',\n  StakehoundEthPriceFeed = 'stakehoundEthPriceFeed',\n  SynthetixPriceFeed = 'synthetixPriceFeed',\n  UniswapV2PoolPriceFeed = 'uniswapV2PoolPriceFeed',\n  WdgldPriceFeed = 'wdgldPriceFeed',\n  YearnVaultV2PriceFeed = 'yearnVaultV2PriceFeed'\n}\n\nexport type RemoveTrackedAssetsTrade = Trade & {\n  __typename?: 'RemoveTrackedAssetsTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  outgoingAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type RemoveTrackedAssetsTradeOutgoingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type RemoveTrackedAssetsTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum RemoveTrackedAssetsTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  OutgoingAssetAmounts = 'outgoingAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type RequestCanceledEvent = EventInterface & FundEventInterface & SharesRequestInterface & {\n  __typename?: 'RequestCanceledEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  sharesRequestor: SharesRequestor;\n  type: SharesRequestType;\n  investmentAmount: Scalars['BigDecimal'];\n  minSharesQuantity: Scalars['BigDecimal'];\n  transaction: Transaction;\n};\n\nexport type RequestCanceledEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<SharesRequestType>;\n  type_not?: Maybe<SharesRequestType>;\n  investmentAmount?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  investmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum RequestCanceledEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  SharesRequestor = 'sharesRequestor',\n  Type = 'type',\n  InvestmentAmount = 'investmentAmount',\n  MinSharesQuantity = 'minSharesQuantity',\n  Transaction = 'transaction'\n}\n\nexport type RequestCreatedEvent = EventInterface & FundEventInterface & SharesRequestInterface & {\n  __typename?: 'RequestCreatedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  sharesRequestor: SharesRequestor;\n  type: SharesRequestType;\n  investmentAmount: Scalars['BigDecimal'];\n  minSharesQuantity: Scalars['BigDecimal'];\n  transaction: Transaction;\n};\n\nexport type RequestCreatedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<SharesRequestType>;\n  type_not?: Maybe<SharesRequestType>;\n  investmentAmount?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  investmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum RequestCreatedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  SharesRequestor = 'sharesRequestor',\n  Type = 'type',\n  InvestmentAmount = 'investmentAmount',\n  MinSharesQuantity = 'minSharesQuantity',\n  Transaction = 'transaction'\n}\n\nexport type RequestExecutedEvent = EventInterface & FundEventInterface & SharesRequestInterface & {\n  __typename?: 'RequestExecutedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  sharesRequestor: SharesRequestor;\n  type: SharesRequestType;\n  investmentAmount: Scalars['BigDecimal'];\n  minSharesQuantity: Scalars['BigDecimal'];\n  caller: Scalars['String'];\n  transaction: Transaction;\n};\n\nexport type RequestExecutedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<SharesRequestType>;\n  type_not?: Maybe<SharesRequestType>;\n  investmentAmount?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  investmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  caller?: Maybe<Scalars['String']>;\n  caller_not?: Maybe<Scalars['String']>;\n  caller_gt?: Maybe<Scalars['String']>;\n  caller_lt?: Maybe<Scalars['String']>;\n  caller_gte?: Maybe<Scalars['String']>;\n  caller_lte?: Maybe<Scalars['String']>;\n  caller_in?: Maybe<Array<Scalars['String']>>;\n  caller_not_in?: Maybe<Array<Scalars['String']>>;\n  caller_contains?: Maybe<Scalars['String']>;\n  caller_not_contains?: Maybe<Scalars['String']>;\n  caller_starts_with?: Maybe<Scalars['String']>;\n  caller_not_starts_with?: Maybe<Scalars['String']>;\n  caller_ends_with?: Maybe<Scalars['String']>;\n  caller_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum RequestExecutedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  SharesRequestor = 'sharesRequestor',\n  Type = 'type',\n  InvestmentAmount = 'investmentAmount',\n  MinSharesQuantity = 'minSharesQuantity',\n  Caller = 'caller',\n  Transaction = 'transaction'\n}\n\nexport type RequestExecutorAddedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'RequestExecutorAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  sharesRequestor: SharesRequestor;\n  requestExecutor: SharesRequestExecutor;\n  transaction: Transaction;\n};\n\nexport type RequestExecutorAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  requestExecutor?: Maybe<Scalars['String']>;\n  requestExecutor_not?: Maybe<Scalars['String']>;\n  requestExecutor_gt?: Maybe<Scalars['String']>;\n  requestExecutor_lt?: Maybe<Scalars['String']>;\n  requestExecutor_gte?: Maybe<Scalars['String']>;\n  requestExecutor_lte?: Maybe<Scalars['String']>;\n  requestExecutor_in?: Maybe<Array<Scalars['String']>>;\n  requestExecutor_not_in?: Maybe<Array<Scalars['String']>>;\n  requestExecutor_contains?: Maybe<Scalars['String']>;\n  requestExecutor_not_contains?: Maybe<Scalars['String']>;\n  requestExecutor_starts_with?: Maybe<Scalars['String']>;\n  requestExecutor_not_starts_with?: Maybe<Scalars['String']>;\n  requestExecutor_ends_with?: Maybe<Scalars['String']>;\n  requestExecutor_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum RequestExecutorAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  SharesRequestor = 'sharesRequestor',\n  RequestExecutor = 'requestExecutor',\n  Transaction = 'transaction'\n}\n\nexport type RequestExecutorRemovedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'RequestExecutorRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  sharesRequestor: SharesRequestor;\n  requestExecutor: SharesRequestExecutor;\n  transaction: Transaction;\n};\n\nexport type RequestExecutorRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  requestExecutor?: Maybe<Scalars['String']>;\n  requestExecutor_not?: Maybe<Scalars['String']>;\n  requestExecutor_gt?: Maybe<Scalars['String']>;\n  requestExecutor_lt?: Maybe<Scalars['String']>;\n  requestExecutor_gte?: Maybe<Scalars['String']>;\n  requestExecutor_lte?: Maybe<Scalars['String']>;\n  requestExecutor_in?: Maybe<Array<Scalars['String']>>;\n  requestExecutor_not_in?: Maybe<Array<Scalars['String']>>;\n  requestExecutor_contains?: Maybe<Scalars['String']>;\n  requestExecutor_not_contains?: Maybe<Scalars['String']>;\n  requestExecutor_starts_with?: Maybe<Scalars['String']>;\n  requestExecutor_not_starts_with?: Maybe<Scalars['String']>;\n  requestExecutor_ends_with?: Maybe<Scalars['String']>;\n  requestExecutor_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum RequestExecutorRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  SharesRequestor = 'sharesRequestor',\n  RequestExecutor = 'requestExecutor',\n  Transaction = 'transaction'\n}\n\nexport enum SettlementType {\n  None = 'None',\n  Direct = 'Direct',\n  Mint = 'Mint',\n  Burn = 'Burn',\n  MintSharesOutstanding = 'MintSharesOutstanding',\n  BurnSharesOutstanding = 'BurnSharesOutstanding',\n  Unknown = 'Unknown'\n}\n\nexport enum ShareChangeType {\n  SharesBought = 'SharesBought',\n  SharesRedeemed = 'SharesRedeemed',\n  FeeSettledForFund = 'FeeSettledForFund',\n  AllSharesOutstandingForcePaidForFund = 'AllSharesOutstandingForcePaidForFund',\n  SharesOutstandingPaidForFund = 'SharesOutstandingPaidForFund',\n  MigratedSharesDuePaid = 'MigratedSharesDuePaid'\n}\n\nexport type ShareState = FundStateInterface & {\n  __typename?: 'ShareState';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  totalSupply: Scalars['BigDecimal'];\n  outstandingForFees: Scalars['BigDecimal'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type ShareStateEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type ShareState_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  totalSupply?: Maybe<Scalars['BigDecimal']>;\n  totalSupply_not?: Maybe<Scalars['BigDecimal']>;\n  totalSupply_gt?: Maybe<Scalars['BigDecimal']>;\n  totalSupply_lt?: Maybe<Scalars['BigDecimal']>;\n  totalSupply_gte?: Maybe<Scalars['BigDecimal']>;\n  totalSupply_lte?: Maybe<Scalars['BigDecimal']>;\n  totalSupply_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalSupply_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  outstandingForFees?: Maybe<Scalars['BigDecimal']>;\n  outstandingForFees_not?: Maybe<Scalars['BigDecimal']>;\n  outstandingForFees_gt?: Maybe<Scalars['BigDecimal']>;\n  outstandingForFees_lt?: Maybe<Scalars['BigDecimal']>;\n  outstandingForFees_gte?: Maybe<Scalars['BigDecimal']>;\n  outstandingForFees_lte?: Maybe<Scalars['BigDecimal']>;\n  outstandingForFees_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  outstandingForFees_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum ShareState_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  TotalSupply = 'totalSupply',\n  OutstandingForFees = 'outstandingForFees',\n  Events = 'events'\n}\n\nexport type SharesBoughtEvent = EventInterface & FundEventInterface & SharesChangeInterface & InvestmentSharesChangeInterface & {\n  __typename?: 'SharesBoughtEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  type: ShareChangeType;\n  investor: Account;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  asset: Asset;\n  investmentAmount: Scalars['BigDecimal'];\n  sharesIssued: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n  transaction: Transaction;\n};\n\nexport type SharesBoughtEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  investmentAmount?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  investmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesIssued?: Maybe<Scalars['BigDecimal']>;\n  sharesIssued_not?: Maybe<Scalars['BigDecimal']>;\n  sharesIssued_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesIssued_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesIssued_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesIssued_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesIssued_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesIssued_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesBoughtEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Type = 'type',\n  Investor = 'investor',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  Asset = 'asset',\n  InvestmentAmount = 'investmentAmount',\n  SharesIssued = 'sharesIssued',\n  Timestamp = 'timestamp',\n  FundState = 'fundState',\n  Transaction = 'transaction'\n}\n\nexport type SharesChangeInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  investor: Account;\n  timestamp: Scalars['BigInt'];\n  type: ShareChangeType;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  fundState: FundState;\n  transaction: Transaction;\n};\n\nexport type SharesChangeInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesChangeInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Investor = 'investor',\n  Timestamp = 'timestamp',\n  Type = 'type',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  FundState = 'fundState',\n  Transaction = 'transaction'\n}\n\nexport type SharesOutstandingPaidForFundEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {\n  __typename?: 'SharesOutstandingPaidForFundEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  type: ShareChangeType;\n  investor: Account;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  comptrollerProxy: Scalars['String'];\n  fee: Fee;\n  sharesDue: Scalars['BigDecimal'];\n  fundState: FundState;\n};\n\nexport type SharesOutstandingPaidForFundEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  fee?: Maybe<Scalars['String']>;\n  fee_not?: Maybe<Scalars['String']>;\n  fee_gt?: Maybe<Scalars['String']>;\n  fee_lt?: Maybe<Scalars['String']>;\n  fee_gte?: Maybe<Scalars['String']>;\n  fee_lte?: Maybe<Scalars['String']>;\n  fee_in?: Maybe<Array<Scalars['String']>>;\n  fee_not_in?: Maybe<Array<Scalars['String']>>;\n  fee_contains?: Maybe<Scalars['String']>;\n  fee_not_contains?: Maybe<Scalars['String']>;\n  fee_starts_with?: Maybe<Scalars['String']>;\n  fee_not_starts_with?: Maybe<Scalars['String']>;\n  fee_ends_with?: Maybe<Scalars['String']>;\n  fee_not_ends_with?: Maybe<Scalars['String']>;\n  sharesDue?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_not?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lt?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_gte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_lte?: Maybe<Scalars['BigDecimal']>;\n  sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesOutstandingPaidForFundEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Type = 'type',\n  Investor = 'investor',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  ComptrollerProxy = 'comptrollerProxy',\n  Fee = 'fee',\n  SharesDue = 'sharesDue',\n  FundState = 'fundState'\n}\n\nexport type SharesRedeemedEvent = EventInterface & FundEventInterface & SharesChangeInterface & InvestmentSharesChangeInterface & {\n  __typename?: 'SharesRedeemedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  type: ShareChangeType;\n  investor: Account;\n  investmentState: InvestmentState;\n  shares: Scalars['BigDecimal'];\n  payoutAssetAmounts: Array<AssetAmount>;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n  transaction: Transaction;\n};\n\n\nexport type SharesRedeemedEventPayoutAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type SharesRedeemedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ShareChangeType>;\n  type_not?: Maybe<ShareChangeType>;\n  investor?: Maybe<Scalars['String']>;\n  investor_not?: Maybe<Scalars['String']>;\n  investor_gt?: Maybe<Scalars['String']>;\n  investor_lt?: Maybe<Scalars['String']>;\n  investor_gte?: Maybe<Scalars['String']>;\n  investor_lte?: Maybe<Scalars['String']>;\n  investor_in?: Maybe<Array<Scalars['String']>>;\n  investor_not_in?: Maybe<Array<Scalars['String']>>;\n  investor_contains?: Maybe<Scalars['String']>;\n  investor_not_contains?: Maybe<Scalars['String']>;\n  investor_starts_with?: Maybe<Scalars['String']>;\n  investor_not_starts_with?: Maybe<Scalars['String']>;\n  investor_ends_with?: Maybe<Scalars['String']>;\n  investor_not_ends_with?: Maybe<Scalars['String']>;\n  investmentState?: Maybe<Scalars['String']>;\n  investmentState_not?: Maybe<Scalars['String']>;\n  investmentState_gt?: Maybe<Scalars['String']>;\n  investmentState_lt?: Maybe<Scalars['String']>;\n  investmentState_gte?: Maybe<Scalars['String']>;\n  investmentState_lte?: Maybe<Scalars['String']>;\n  investmentState_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_not_in?: Maybe<Array<Scalars['String']>>;\n  investmentState_contains?: Maybe<Scalars['String']>;\n  investmentState_not_contains?: Maybe<Scalars['String']>;\n  investmentState_starts_with?: Maybe<Scalars['String']>;\n  investmentState_not_starts_with?: Maybe<Scalars['String']>;\n  investmentState_ends_with?: Maybe<Scalars['String']>;\n  investmentState_not_ends_with?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['BigDecimal']>;\n  shares_not?: Maybe<Scalars['BigDecimal']>;\n  shares_gt?: Maybe<Scalars['BigDecimal']>;\n  shares_lt?: Maybe<Scalars['BigDecimal']>;\n  shares_gte?: Maybe<Scalars['BigDecimal']>;\n  shares_lte?: Maybe<Scalars['BigDecimal']>;\n  shares_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  payoutAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  payoutAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  payoutAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  payoutAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesRedeemedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Type = 'type',\n  Investor = 'investor',\n  InvestmentState = 'investmentState',\n  Shares = 'shares',\n  PayoutAssetAmounts = 'payoutAssetAmounts',\n  Timestamp = 'timestamp',\n  FundState = 'fundState',\n  Transaction = 'transaction'\n}\n\nexport type SharesRequest = {\n  __typename?: 'SharesRequest';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  sharesRequestor: SharesRequestor;\n  account: Account;\n  fund: Fund;\n  investmentAmount: Scalars['BigDecimal'];\n  minSharesQuantity: Scalars['BigDecimal'];\n};\n\nexport type SharesRequestExecutor = {\n  __typename?: 'SharesRequestExecutor';\n  id: Scalars['ID'];\n  since: Scalars['BigInt'];\n  account: Account;\n  sharesRequestor: SharesRequestor;\n};\n\nexport type SharesRequestExecutor_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  since?: Maybe<Scalars['BigInt']>;\n  since_not?: Maybe<Scalars['BigInt']>;\n  since_gt?: Maybe<Scalars['BigInt']>;\n  since_lt?: Maybe<Scalars['BigInt']>;\n  since_gte?: Maybe<Scalars['BigInt']>;\n  since_lte?: Maybe<Scalars['BigInt']>;\n  since_in?: Maybe<Array<Scalars['BigInt']>>;\n  since_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  account?: Maybe<Scalars['String']>;\n  account_not?: Maybe<Scalars['String']>;\n  account_gt?: Maybe<Scalars['String']>;\n  account_lt?: Maybe<Scalars['String']>;\n  account_gte?: Maybe<Scalars['String']>;\n  account_lte?: Maybe<Scalars['String']>;\n  account_in?: Maybe<Array<Scalars['String']>>;\n  account_not_in?: Maybe<Array<Scalars['String']>>;\n  account_contains?: Maybe<Scalars['String']>;\n  account_not_contains?: Maybe<Scalars['String']>;\n  account_starts_with?: Maybe<Scalars['String']>;\n  account_not_starts_with?: Maybe<Scalars['String']>;\n  account_ends_with?: Maybe<Scalars['String']>;\n  account_not_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesRequestExecutor_OrderBy {\n  Id = 'id',\n  Since = 'since',\n  Account = 'account',\n  SharesRequestor = 'sharesRequestor'\n}\n\nexport type SharesRequestInterface = {\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  sharesRequestor: SharesRequestor;\n  type: SharesRequestType;\n  investmentAmount: Scalars['BigDecimal'];\n  minSharesQuantity: Scalars['BigDecimal'];\n  transaction: Transaction;\n};\n\nexport type SharesRequestInterface_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<SharesRequestType>;\n  type_not?: Maybe<SharesRequestType>;\n  investmentAmount?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  investmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesRequestInterface_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  SharesRequestor = 'sharesRequestor',\n  Type = 'type',\n  InvestmentAmount = 'investmentAmount',\n  MinSharesQuantity = 'minSharesQuantity',\n  Transaction = 'transaction'\n}\n\nexport enum SharesRequestType {\n  Canceled = 'CANCELED',\n  Created = 'CREATED',\n  Executed = 'EXECUTED'\n}\n\nexport type SharesRequest_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sharesRequestor?: Maybe<Scalars['String']>;\n  sharesRequestor_not?: Maybe<Scalars['String']>;\n  sharesRequestor_gt?: Maybe<Scalars['String']>;\n  sharesRequestor_lt?: Maybe<Scalars['String']>;\n  sharesRequestor_gte?: Maybe<Scalars['String']>;\n  sharesRequestor_lte?: Maybe<Scalars['String']>;\n  sharesRequestor_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestor_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestor_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestor_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestor_not_ends_with?: Maybe<Scalars['String']>;\n  account?: Maybe<Scalars['String']>;\n  account_not?: Maybe<Scalars['String']>;\n  account_gt?: Maybe<Scalars['String']>;\n  account_lt?: Maybe<Scalars['String']>;\n  account_gte?: Maybe<Scalars['String']>;\n  account_lte?: Maybe<Scalars['String']>;\n  account_in?: Maybe<Array<Scalars['String']>>;\n  account_not_in?: Maybe<Array<Scalars['String']>>;\n  account_contains?: Maybe<Scalars['String']>;\n  account_not_contains?: Maybe<Scalars['String']>;\n  account_starts_with?: Maybe<Scalars['String']>;\n  account_not_starts_with?: Maybe<Scalars['String']>;\n  account_ends_with?: Maybe<Scalars['String']>;\n  account_not_ends_with?: Maybe<Scalars['String']>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  investmentAmount?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_not?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lt?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_gte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_lte?: Maybe<Scalars['BigDecimal']>;\n  investmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  investmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_not?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;\n  minSharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  minSharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum SharesRequest_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  SharesRequestor = 'sharesRequestor',\n  Account = 'account',\n  Fund = 'fund',\n  InvestmentAmount = 'investmentAmount',\n  MinSharesQuantity = 'minSharesQuantity'\n}\n\nexport type SharesRequestor = {\n  __typename?: 'SharesRequestor';\n  id: Scalars['ID'];\n  fund: Fund;\n  executors: Array<SharesRequestExecutor>;\n  requests: Array<SharesRequest>;\n  requestHistory: Array<SharesRequestInterface>;\n};\n\n\nexport type SharesRequestorExecutorsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestExecutor_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestExecutor_Filter>;\n};\n\n\nexport type SharesRequestorRequestsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequest_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequest_Filter>;\n};\n\n\nexport type SharesRequestorRequestHistoryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestInterface_Filter>;\n};\n\nexport type SharesRequestorProxyDeployedEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'SharesRequestorProxyDeployedEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  comptrollerProxy: Scalars['String'];\n  sharesRequestorProxy: Scalars['String'];\n};\n\nexport type SharesRequestorProxyDeployedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy?: Maybe<Scalars['String']>;\n  comptrollerProxy_not?: Maybe<Scalars['String']>;\n  comptrollerProxy_gt?: Maybe<Scalars['String']>;\n  comptrollerProxy_lt?: Maybe<Scalars['String']>;\n  comptrollerProxy_gte?: Maybe<Scalars['String']>;\n  comptrollerProxy_lte?: Maybe<Scalars['String']>;\n  comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  comptrollerProxy_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_contains?: Maybe<Scalars['String']>;\n  comptrollerProxy_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_ends_with?: Maybe<Scalars['String']>;\n  comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestorProxy?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_not?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_gt?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_lt?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_gte?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_lte?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestorProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesRequestorProxy_contains?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_not_contains?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_not_starts_with?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_ends_with?: Maybe<Scalars['String']>;\n  sharesRequestorProxy_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesRequestorProxyDeployedEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ComptrollerProxy = 'comptrollerProxy',\n  SharesRequestorProxy = 'sharesRequestorProxy'\n}\n\nexport type SharesRequestor_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesRequestor_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Executors = 'executors',\n  Requests = 'requests',\n  RequestHistory = 'requestHistory'\n}\n\nexport type SharesTokenSymbolSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'SharesTokenSymbolSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  sharesTokenSymbol: Scalars['String'];\n};\n\nexport type SharesTokenSymbolSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  sharesTokenSymbol?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_not?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_gt?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_lt?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_gte?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_lte?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_in?: Maybe<Array<Scalars['String']>>;\n  sharesTokenSymbol_not_in?: Maybe<Array<Scalars['String']>>;\n  sharesTokenSymbol_contains?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_not_contains?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_starts_with?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_not_starts_with?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_ends_with?: Maybe<Scalars['String']>;\n  sharesTokenSymbol_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum SharesTokenSymbolSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  SharesTokenSymbol = 'sharesTokenSymbol'\n}\n\nexport type StakeTrade = Trade & {\n  __typename?: 'StakeTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  outgoingAssetAmount: AssetAmount;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type StakeTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum StakeTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  OutgoingAssetAmount = 'outgoingAssetAmount',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  newFundCreatedEvent?: Maybe<NewFundCreatedEvent>;\n  newFundCreatedEvents: Array<NewFundCreatedEvent>;\n  vaultProxySetEvent?: Maybe<VaultProxySetEvent>;\n  vaultProxySetEvents: Array<VaultProxySetEvent>;\n  sharesBoughtEvent?: Maybe<SharesBoughtEvent>;\n  sharesBoughtEvents: Array<SharesBoughtEvent>;\n  sharesRedeemedEvent?: Maybe<SharesRedeemedEvent>;\n  sharesRedeemedEvents: Array<SharesRedeemedEvent>;\n  assetWithdrawnEvent?: Maybe<AssetWithdrawnEvent>;\n  assetWithdrawnEvents: Array<AssetWithdrawnEvent>;\n  trackedAssetAddedEvent?: Maybe<TrackedAssetAddedEvent>;\n  trackedAssetAddedEvents: Array<TrackedAssetAddedEvent>;\n  trackedAssetRemovedEvent?: Maybe<TrackedAssetRemovedEvent>;\n  trackedAssetRemovedEvents: Array<TrackedAssetRemovedEvent>;\n  authUserAddedForFundEvent?: Maybe<AuthUserAddedForFundEvent>;\n  authUserAddedForFundEvents: Array<AuthUserAddedForFundEvent>;\n  authUserRemovedForFundEvent?: Maybe<AuthUserRemovedForFundEvent>;\n  authUserRemovedForFundEvents: Array<AuthUserRemovedForFundEvent>;\n  callOnIntegrationExecutedForFundEvent?: Maybe<CallOnIntegrationExecutedForFundEvent>;\n  callOnIntegrationExecutedForFundEvents: Array<CallOnIntegrationExecutedForFundEvent>;\n  migrationSignaledEvent?: Maybe<MigrationSignaledEvent>;\n  migrationSignaledEvents: Array<MigrationSignaledEvent>;\n  migrationCancelledEvent?: Maybe<MigrationCancelledEvent>;\n  migrationCancelledEvents: Array<MigrationCancelledEvent>;\n  migrationExecutedEvent?: Maybe<MigrationExecutedEvent>;\n  migrationExecutedEvents: Array<MigrationExecutedEvent>;\n  migrationInCancelHookFailedEvent?: Maybe<MigrationInCancelHookFailedEvent>;\n  migrationInCancelHookFailedEvents: Array<MigrationInCancelHookFailedEvent>;\n  migrationOutHookFailedEvent?: Maybe<MigrationOutHookFailedEvent>;\n  migrationOutHookFailedEvents: Array<MigrationOutHookFailedEvent>;\n  feeEnabledForFundEvent?: Maybe<FeeEnabledForFundEvent>;\n  feeEnabledForFundEvents: Array<FeeEnabledForFundEvent>;\n  feesRecipientSetForFundEvent?: Maybe<FeesRecipientSetForFundEvent>;\n  feesRecipientSetForFundEvents: Array<FeesRecipientSetForFundEvent>;\n  feeSettledForFundEvent?: Maybe<FeeSettledForFundEvent>;\n  feeSettledForFundEvents: Array<FeeSettledForFundEvent>;\n  allSharesOutstandingForcePaidForFundEvent?: Maybe<AllSharesOutstandingForcePaidForFundEvent>;\n  allSharesOutstandingForcePaidForFundEvents: Array<AllSharesOutstandingForcePaidForFundEvent>;\n  sharesOutstandingPaidForFundEvent?: Maybe<SharesOutstandingPaidForFundEvent>;\n  sharesOutstandingPaidForFundEvents: Array<SharesOutstandingPaidForFundEvent>;\n  migratedSharesDuePaidEvent?: Maybe<MigratedSharesDuePaidEvent>;\n  migratedSharesDuePaidEvents: Array<MigratedSharesDuePaidEvent>;\n  policyEnabledForFundEvent?: Maybe<PolicyEnabledForFundEvent>;\n  policyEnabledForFundEvents: Array<PolicyEnabledForFundEvent>;\n  policyDisabledForFundEvent?: Maybe<PolicyDisabledForFundEvent>;\n  policyDisabledForFundEvents: Array<PolicyDisabledForFundEvent>;\n  accessorSetEvent?: Maybe<AccessorSetEvent>;\n  accessorSetEvents: Array<AccessorSetEvent>;\n  ownerSetEvent?: Maybe<OwnerSetEvent>;\n  ownerSetEvents: Array<OwnerSetEvent>;\n  migratorSetEvent?: Maybe<MigratorSetEvent>;\n  migratorSetEvents: Array<MigratorSetEvent>;\n  vaultLibSetEvent?: Maybe<VaultLibSetEvent>;\n  vaultLibSetEvents: Array<VaultLibSetEvent>;\n  approvalEvent?: Maybe<ApprovalEvent>;\n  approvalEvents: Array<ApprovalEvent>;\n  transferEvent?: Maybe<TransferEvent>;\n  transferEvents: Array<TransferEvent>;\n  adapterBlacklistAddressesAddedEvent?: Maybe<AdapterBlacklistAddressesAddedEvent>;\n  adapterBlacklistAddressesAddedEvents: Array<AdapterBlacklistAddressesAddedEvent>;\n  adapterBlacklistAddressesRemovedEvent?: Maybe<AdapterBlacklistAddressesRemovedEvent>;\n  adapterBlacklistAddressesRemovedEvents: Array<AdapterBlacklistAddressesRemovedEvent>;\n  adapterWhitelistAddressesAddedEvent?: Maybe<AdapterWhitelistAddressesAddedEvent>;\n  adapterWhitelistAddressesAddedEvents: Array<AdapterWhitelistAddressesAddedEvent>;\n  adapterWhitelistAddressesRemovedEvent?: Maybe<AdapterWhitelistAddressesRemovedEvent>;\n  adapterWhitelistAddressesRemovedEvents: Array<AdapterWhitelistAddressesRemovedEvent>;\n  assetBlacklistAddressesAddedEvent?: Maybe<AssetBlacklistAddressesAddedEvent>;\n  assetBlacklistAddressesAddedEvents: Array<AssetBlacklistAddressesAddedEvent>;\n  assetBlacklistAddressesRemovedEvent?: Maybe<AssetBlacklistAddressesRemovedEvent>;\n  assetBlacklistAddressesRemovedEvents: Array<AssetBlacklistAddressesRemovedEvent>;\n  assetWhitelistAddressesAddedEvent?: Maybe<AssetWhitelistAddressesAddedEvent>;\n  assetWhitelistAddressesAddedEvents: Array<AssetWhitelistAddressesAddedEvent>;\n  assetWhitelistAddressesRemovedEvent?: Maybe<AssetWhitelistAddressesRemovedEvent>;\n  assetWhitelistAddressesRemovedEvents: Array<AssetWhitelistAddressesRemovedEvent>;\n  buySharesCallerWhitelistAddressesAddedEvent?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent>;\n  buySharesCallerWhitelistAddressesAddedEvents: Array<BuySharesCallerWhitelistAddressesAddedEvent>;\n  buySharesCallerWhitelistAddressesRemovedEvent?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent>;\n  buySharesCallerWhitelistAddressesRemovedEvents: Array<BuySharesCallerWhitelistAddressesRemovedEvent>;\n  guaranteedRedemptionFundSettingsSetEvent?: Maybe<GuaranteedRedemptionFundSettingsSetEvent>;\n  guaranteedRedemptionFundSettingsSetEvents: Array<GuaranteedRedemptionFundSettingsSetEvent>;\n  investorWhitelistAddressesAddedEvent?: Maybe<InvestorWhitelistAddressesAddedEvent>;\n  investorWhitelistAddressesAddedEvents: Array<InvestorWhitelistAddressesAddedEvent>;\n  investorWhitelistAddressesRemovedEvent?: Maybe<InvestorWhitelistAddressesRemovedEvent>;\n  investorWhitelistAddressesRemovedEvents: Array<InvestorWhitelistAddressesRemovedEvent>;\n  maxConcentrationSetEvent?: Maybe<MaxConcentrationSetEvent>;\n  maxConcentrationSetEvents: Array<MaxConcentrationSetEvent>;\n  minMaxInvestmentFundSettingsSetEvent?: Maybe<MinMaxInvestmentFundSettingsSetEvent>;\n  minMaxInvestmentFundSettingsSetEvents: Array<MinMaxInvestmentFundSettingsSetEvent>;\n  managementFeeSettingsAddedEvent?: Maybe<ManagementFeeSettingsAddedEvent>;\n  managementFeeSettingsAddedEvents: Array<ManagementFeeSettingsAddedEvent>;\n  managementFeeSettledEvent?: Maybe<ManagementFeeSettledEvent>;\n  managementFeeSettledEvents: Array<ManagementFeeSettledEvent>;\n  managementFeeActivatedForMigratedFundEvent?: Maybe<ManagementFeeActivatedForMigratedFundEvent>;\n  managementFeeActivatedForMigratedFundEvents: Array<ManagementFeeActivatedForMigratedFundEvent>;\n  performanceFeeSettingsAddedEvent?: Maybe<PerformanceFeeSettingsAddedEvent>;\n  performanceFeeSettingsAddedEvents: Array<PerformanceFeeSettingsAddedEvent>;\n  performanceFeeActivatedForFundEvent?: Maybe<PerformanceFeeActivatedForFundEvent>;\n  performanceFeeActivatedForFundEvents: Array<PerformanceFeeActivatedForFundEvent>;\n  performanceFeeSharePriceUpdatedEvent?: Maybe<PerformanceFeeSharePriceUpdatedEvent>;\n  performanceFeeSharePriceUpdatedEvents: Array<PerformanceFeeSharePriceUpdatedEvent>;\n  performanceFeePaidOutEvent?: Maybe<PerformanceFeePaidOutEvent>;\n  performanceFeePaidOutEvents: Array<PerformanceFeePaidOutEvent>;\n  performanceFeePerformanceUpdatedEvent?: Maybe<PerformanceFeePerformanceUpdatedEvent>;\n  performanceFeePerformanceUpdatedEvents: Array<PerformanceFeePerformanceUpdatedEvent>;\n  entranceRateDirectFeeSettingsAddedEvent?: Maybe<EntranceRateDirectFeeSettingsAddedEvent>;\n  entranceRateDirectFeeSettingsAddedEvents: Array<EntranceRateDirectFeeSettingsAddedEvent>;\n  entranceRateDirectFeeSettledEvent?: Maybe<EntranceRateDirectFeeSettledEvent>;\n  entranceRateDirectFeeSettledEvents: Array<EntranceRateDirectFeeSettledEvent>;\n  entranceRateBurnFeeSettingsAddedEvent?: Maybe<EntranceRateBurnFeeSettingsAddedEvent>;\n  entranceRateBurnFeeSettingsAddedEvents: Array<EntranceRateBurnFeeSettingsAddedEvent>;\n  entranceRateBurnFeeSettledEvent?: Maybe<EntranceRateBurnFeeSettledEvent>;\n  entranceRateBurnFeeSettledEvents: Array<EntranceRateBurnFeeSettledEvent>;\n  overridePauseSetEvent?: Maybe<OverridePauseSetEvent>;\n  overridePauseSetEvents: Array<OverridePauseSetEvent>;\n  preRedeemSharesHookFailedEvent?: Maybe<PreRedeemSharesHookFailedEvent>;\n  preRedeemSharesHookFailedEvents: Array<PreRedeemSharesHookFailedEvent>;\n  requestCanceledEvent?: Maybe<RequestCanceledEvent>;\n  requestCanceledEvents: Array<RequestCanceledEvent>;\n  requestCreatedEvent?: Maybe<RequestCreatedEvent>;\n  requestCreatedEvents: Array<RequestCreatedEvent>;\n  requestExecutedEvent?: Maybe<RequestExecutedEvent>;\n  requestExecutedEvents: Array<RequestExecutedEvent>;\n  requestExecutorAddedEvent?: Maybe<RequestExecutorAddedEvent>;\n  requestExecutorAddedEvents: Array<RequestExecutorAddedEvent>;\n  requestExecutorRemovedEvent?: Maybe<RequestExecutorRemovedEvent>;\n  requestExecutorRemovedEvents: Array<RequestExecutorRemovedEvent>;\n  vaultProxyDeployedEvent?: Maybe<VaultProxyDeployedEvent>;\n  vaultProxyDeployedEvents: Array<VaultProxyDeployedEvent>;\n  comptrollerProxyDeployedEvent?: Maybe<ComptrollerProxyDeployedEvent>;\n  comptrollerProxyDeployedEvents: Array<ComptrollerProxyDeployedEvent>;\n  comptrollerLibSetEvent?: Maybe<ComptrollerLibSetEvent>;\n  comptrollerLibSetEvents: Array<ComptrollerLibSetEvent>;\n  adapterRegisteredEvent?: Maybe<AdapterRegisteredEvent>;\n  adapterRegisteredEvents: Array<AdapterRegisteredEvent>;\n  adapterDeregisteredEvent?: Maybe<AdapterDeregisteredEvent>;\n  adapterDeregisteredEvents: Array<AdapterDeregisteredEvent>;\n  trackedAssetsLimitSetEvent?: Maybe<TrackedAssetsLimitSetEvent>;\n  trackedAssetsLimitSetEvents: Array<TrackedAssetsLimitSetEvent>;\n  policyRegisteredEvent?: Maybe<PolicyRegisteredEvent>;\n  policyRegisteredEvents: Array<PolicyRegisteredEvent>;\n  policyDeregisteredEvent?: Maybe<PolicyDeregisteredEvent>;\n  policyDeregisteredEvents: Array<PolicyDeregisteredEvent>;\n  guaranteedRedemptionAdapterAddedEvent?: Maybe<GuaranteedRedemptionAdapterAddedEvent>;\n  guaranteedRedemptionAdapterAddedEvents: Array<GuaranteedRedemptionAdapterAddedEvent>;\n  guaranteedRedemptionAdapterRemovedEvent?: Maybe<GuaranteedRedemptionAdapterRemovedEvent>;\n  guaranteedRedemptionAdapterRemovedEvents: Array<GuaranteedRedemptionAdapterRemovedEvent>;\n  guaranteedRedemptionRedemptionWindowBufferSetEvent?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;\n  guaranteedRedemptionRedemptionWindowBufferSetEvents: Array<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;\n  fundDeployerSetEvent?: Maybe<FundDeployerSetEvent>;\n  fundDeployerSetEvents: Array<FundDeployerSetEvent>;\n  valueInterpreterSetEvent?: Maybe<ValueInterpreterSetEvent>;\n  valueInterpreterSetEvents: Array<ValueInterpreterSetEvent>;\n  ownershipTransferredEvent?: Maybe<OwnershipTransferredEvent>;\n  ownershipTransferredEvents: Array<OwnershipTransferredEvent>;\n  derivativeAddedEvent?: Maybe<DerivativeAddedEvent>;\n  derivativeAddedEvents: Array<DerivativeAddedEvent>;\n  derivativeRemovedEvent?: Maybe<DerivativeRemovedEvent>;\n  derivativeRemovedEvents: Array<DerivativeRemovedEvent>;\n  derivativeUpdatedEvent?: Maybe<DerivativeUpdatedEvent>;\n  derivativeUpdatedEvents: Array<DerivativeUpdatedEvent>;\n  aggregatorUpdatedEvent?: Maybe<AggregatorUpdatedEvent>;\n  aggregatorUpdatedEvents: Array<AggregatorUpdatedEvent>;\n  ethUsdAggregatorSetEvent?: Maybe<EthUsdAggregatorSetEvent>;\n  ethUsdAggregatorSetEvents: Array<EthUsdAggregatorSetEvent>;\n  primitiveAddedEvent?: Maybe<PrimitiveAddedEvent>;\n  primitiveAddedEvents: Array<PrimitiveAddedEvent>;\n  primitiveRemovedEvent?: Maybe<PrimitiveRemovedEvent>;\n  primitiveRemovedEvents: Array<PrimitiveRemovedEvent>;\n  feeRegisteredEvent?: Maybe<FeeRegisteredEvent>;\n  feeRegisteredEvents: Array<FeeRegisteredEvent>;\n  feeDeregisteredEvent?: Maybe<FeeDeregisteredEvent>;\n  feeDeregisteredEvents: Array<FeeDeregisteredEvent>;\n  migrationTimelockSetEvent?: Maybe<MigrationTimelockSetEvent>;\n  migrationTimelockSetEvents: Array<MigrationTimelockSetEvent>;\n  nominatedOwnerRemovedEvent?: Maybe<NominatedOwnerRemovedEvent>;\n  nominatedOwnerRemovedEvents: Array<NominatedOwnerRemovedEvent>;\n  nominatedOwnerSetEvent?: Maybe<NominatedOwnerSetEvent>;\n  nominatedOwnerSetEvents: Array<NominatedOwnerSetEvent>;\n  dispatcherOwnershipTransferredEvent?: Maybe<DispatcherOwnershipTransferredEvent>;\n  dispatcherOwnershipTransferredEvents: Array<DispatcherOwnershipTransferredEvent>;\n  sharesTokenSymbolSetEvent?: Maybe<SharesTokenSymbolSetEvent>;\n  sharesTokenSymbolSetEvents: Array<SharesTokenSymbolSetEvent>;\n  releaseStatusSetEvent?: Maybe<ReleaseStatusSetEvent>;\n  releaseStatusSetEvents: Array<ReleaseStatusSetEvent>;\n  vaultCallRegisteredEvent?: Maybe<VaultCallRegisteredEvent>;\n  vaultCallRegisteredEvents: Array<VaultCallRegisteredEvent>;\n  vaultCallDeregisteredEvent?: Maybe<VaultCallDeregisteredEvent>;\n  vaultCallDeregisteredEvents: Array<VaultCallDeregisteredEvent>;\n  sharesRequestorProxyDeployedEvent?: Maybe<SharesRequestorProxyDeployedEvent>;\n  sharesRequestorProxyDeployedEvents: Array<SharesRequestorProxyDeployedEvent>;\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n  integrationManager?: Maybe<IntegrationManager>;\n  integrationManagers: Array<IntegrationManager>;\n  policyManager?: Maybe<PolicyManager>;\n  policyManagers: Array<PolicyManager>;\n  feeManager?: Maybe<FeeManager>;\n  feeManagers: Array<FeeManager>;\n  guaranteedRedemption?: Maybe<GuaranteedRedemption>;\n  guaranteedRedemptions: Array<GuaranteedRedemption>;\n  fund?: Maybe<Fund>;\n  funds: Array<Fund>;\n  comptrollerProxy?: Maybe<ComptrollerProxy>;\n  comptrollerProxies: Array<ComptrollerProxy>;\n  hourlyFundState?: Maybe<HourlyFundState>;\n  hourlyFundStates: Array<HourlyFundState>;\n  dailyFundState?: Maybe<DailyFundState>;\n  dailyFundStates: Array<DailyFundState>;\n  monthlyFundState?: Maybe<MonthlyFundState>;\n  monthlyFundStates: Array<MonthlyFundState>;\n  migration?: Maybe<Migration>;\n  migrations: Array<Migration>;\n  release?: Maybe<Release>;\n  releases: Array<Release>;\n  account?: Maybe<Account>;\n  accounts: Array<Account>;\n  investment?: Maybe<Investment>;\n  investments: Array<Investment>;\n  investmentState?: Maybe<InvestmentState>;\n  investmentStates: Array<InvestmentState>;\n  fee?: Maybe<Fee>;\n  fees: Array<Fee>;\n  managementFeeSetting?: Maybe<ManagementFeeSetting>;\n  managementFeeSettings: Array<ManagementFeeSetting>;\n  performanceFeeSetting?: Maybe<PerformanceFeeSetting>;\n  performanceFeeSettings: Array<PerformanceFeeSetting>;\n  entranceRateDirectFeeSetting?: Maybe<EntranceRateDirectFeeSetting>;\n  entranceRateDirectFeeSettings: Array<EntranceRateDirectFeeSetting>;\n  entranceRateBurnFeeSetting?: Maybe<EntranceRateBurnFeeSetting>;\n  entranceRateBurnFeeSettings: Array<EntranceRateBurnFeeSetting>;\n  integrationAdapter?: Maybe<IntegrationAdapter>;\n  integrationAdapters: Array<IntegrationAdapter>;\n  policy?: Maybe<Policy>;\n  policies: Array<Policy>;\n  adapterBlacklistSetting?: Maybe<AdapterBlacklistSetting>;\n  adapterBlacklistSettings: Array<AdapterBlacklistSetting>;\n  adapterWhitelistSetting?: Maybe<AdapterWhitelistSetting>;\n  adapterWhitelistSettings: Array<AdapterWhitelistSetting>;\n  assetBlacklistSetting?: Maybe<AssetBlacklistSetting>;\n  assetBlacklistSettings: Array<AssetBlacklistSetting>;\n  assetWhitelistSetting?: Maybe<AssetWhitelistSetting>;\n  assetWhitelistSettings: Array<AssetWhitelistSetting>;\n  buySharesCallerWhitelistSetting?: Maybe<BuySharesCallerWhitelistSetting>;\n  buySharesCallerWhitelistSettings: Array<BuySharesCallerWhitelistSetting>;\n  guaranteedRedemptionSetting?: Maybe<GuaranteedRedemptionSetting>;\n  guaranteedRedemptionSettings: Array<GuaranteedRedemptionSetting>;\n  investorWhitelistSetting?: Maybe<InvestorWhitelistSetting>;\n  investorWhitelistSettings: Array<InvestorWhitelistSetting>;\n  maxConcentrationSetting?: Maybe<MaxConcentrationSetting>;\n  maxConcentrationSettings: Array<MaxConcentrationSetting>;\n  minMaxInvestmentSetting?: Maybe<MinMaxInvestmentSetting>;\n  minMaxInvestmentSettings: Array<MinMaxInvestmentSetting>;\n  unknownPolicySetting?: Maybe<UnknownPolicySetting>;\n  unknownPolicySettings: Array<UnknownPolicySetting>;\n  shareState?: Maybe<ShareState>;\n  shareStates: Array<ShareState>;\n  portfolioState?: Maybe<PortfolioState>;\n  portfolioStates: Array<PortfolioState>;\n  holdingState?: Maybe<HoldingState>;\n  holdingStates: Array<HoldingState>;\n  fundState?: Maybe<FundState>;\n  fundStates: Array<FundState>;\n  feeState?: Maybe<FeeState>;\n  feeStates: Array<FeeState>;\n  managementFeeState?: Maybe<ManagementFeeState>;\n  managementFeeStates: Array<ManagementFeeState>;\n  performanceFeeState?: Maybe<PerformanceFeeState>;\n  performanceFeeStates: Array<PerformanceFeeState>;\n  entranceRateDirectFeeState?: Maybe<EntranceRateDirectFeeState>;\n  entranceRateDirectFeeStates: Array<EntranceRateDirectFeeState>;\n  entranceRateBurnFeeState?: Maybe<EntranceRateBurnFeeState>;\n  entranceRateBurnFeeStates: Array<EntranceRateBurnFeeState>;\n  tokenSwapTrade?: Maybe<TokenSwapTrade>;\n  tokenSwapTrades: Array<TokenSwapTrade>;\n  multiTokenSwapTrade?: Maybe<MultiTokenSwapTrade>;\n  multiTokenSwapTrades: Array<MultiTokenSwapTrade>;\n  lendTrade?: Maybe<LendTrade>;\n  lendTrades: Array<LendTrade>;\n  multiLendTrade?: Maybe<MultiLendTrade>;\n  multiLendTrades: Array<MultiLendTrade>;\n  redeemTrade?: Maybe<RedeemTrade>;\n  redeemTrades: Array<RedeemTrade>;\n  multiRedeemTrade?: Maybe<MultiRedeemTrade>;\n  multiRedeemTrades: Array<MultiRedeemTrade>;\n  addTrackedAssetsTrade?: Maybe<AddTrackedAssetsTrade>;\n  addTrackedAssetsTrades: Array<AddTrackedAssetsTrade>;\n  removeTrackedAssetsTrade?: Maybe<RemoveTrackedAssetsTrade>;\n  removeTrackedAssetsTrades: Array<RemoveTrackedAssetsTrade>;\n  approveAssetsTrade?: Maybe<ApproveAssetsTrade>;\n  approveAssetsTrades: Array<ApproveAssetsTrade>;\n  stakeTrade?: Maybe<StakeTrade>;\n  stakeTrades: Array<StakeTrade>;\n  unstakeTrade?: Maybe<UnstakeTrade>;\n  unstakeTrades: Array<UnstakeTrade>;\n  claimRewardsTrade?: Maybe<ClaimRewardsTrade>;\n  claimRewardsTrades: Array<ClaimRewardsTrade>;\n  claimRewardsAndReinvestTrade?: Maybe<ClaimRewardsAndReinvestTrade>;\n  claimRewardsAndReinvestTrades: Array<ClaimRewardsAndReinvestTrade>;\n  claimRewardsAndSwapTrade?: Maybe<ClaimRewardsAndSwapTrade>;\n  claimRewardsAndSwapTrades: Array<ClaimRewardsAndSwapTrade>;\n  lendAndStakeTrade?: Maybe<LendAndStakeTrade>;\n  lendAndStakeTrades: Array<LendAndStakeTrade>;\n  unstakeAndRedeemTrade?: Maybe<UnstakeAndRedeemTrade>;\n  unstakeAndRedeemTrades: Array<UnstakeAndRedeemTrade>;\n  sharesRequestor?: Maybe<SharesRequestor>;\n  sharesRequestors: Array<SharesRequestor>;\n  sharesRequestExecutor?: Maybe<SharesRequestExecutor>;\n  sharesRequestExecutors: Array<SharesRequestExecutor>;\n  sharesRequest?: Maybe<SharesRequest>;\n  sharesRequests: Array<SharesRequest>;\n  asset?: Maybe<Asset>;\n  assets: Array<Asset>;\n  currency?: Maybe<Currency>;\n  currencies: Array<Currency>;\n  curvePoolAssetDetail?: Maybe<CurvePoolAssetDetail>;\n  curvePoolAssetDetails: Array<CurvePoolAssetDetail>;\n  uniswapV2PoolAssetDetail?: Maybe<UniswapV2PoolAssetDetail>;\n  uniswapV2PoolAssetDetails: Array<UniswapV2PoolAssetDetail>;\n  assetAmount?: Maybe<AssetAmount>;\n  assetAmounts: Array<AssetAmount>;\n  assetPrice?: Maybe<AssetPrice>;\n  assetPrices: Array<AssetPrice>;\n  currencyPrice?: Maybe<CurrencyPrice>;\n  currencyPrices: Array<CurrencyPrice>;\n  hourlyAssetPriceCandle?: Maybe<HourlyAssetPriceCandle>;\n  hourlyAssetPriceCandles: Array<HourlyAssetPriceCandle>;\n  dailyAssetPriceCandle?: Maybe<DailyAssetPriceCandle>;\n  dailyAssetPriceCandles: Array<DailyAssetPriceCandle>;\n  monthlyAssetPriceCandle?: Maybe<MonthlyAssetPriceCandle>;\n  monthlyAssetPriceCandles: Array<MonthlyAssetPriceCandle>;\n  hourlyCurrencyPriceCandle?: Maybe<HourlyCurrencyPriceCandle>;\n  hourlyCurrencyPriceCandles: Array<HourlyCurrencyPriceCandle>;\n  dailyCurrencyPriceCandle?: Maybe<DailyCurrencyPriceCandle>;\n  dailyCurrencyPriceCandles: Array<DailyCurrencyPriceCandle>;\n  monthlyCurrencyPriceCandle?: Maybe<MonthlyCurrencyPriceCandle>;\n  monthlyCurrencyPriceCandles: Array<MonthlyCurrencyPriceCandle>;\n  hourlyPriceCandleGroup?: Maybe<HourlyPriceCandleGroup>;\n  hourlyPriceCandleGroups: Array<HourlyPriceCandleGroup>;\n  dailyPriceCandleGroup?: Maybe<DailyPriceCandleGroup>;\n  dailyPriceCandleGroups: Array<DailyPriceCandleGroup>;\n  monthlyPriceCandleGroup?: Maybe<MonthlyPriceCandleGroup>;\n  monthlyPriceCandleGroups: Array<MonthlyPriceCandleGroup>;\n  chainlinkAggregatorProxy?: Maybe<ChainlinkAggregatorProxy>;\n  chainlinkAggregatorProxies: Array<ChainlinkAggregatorProxy>;\n  cron?: Maybe<Cron>;\n  crons: Array<Cron>;\n  network?: Maybe<Network>;\n  networks: Array<Network>;\n  networkState?: Maybe<NetworkState>;\n  networkStates: Array<NetworkState>;\n  networkAssetHolding?: Maybe<NetworkAssetHolding>;\n  networkAssetHoldings: Array<NetworkAssetHolding>;\n  eventInterface?: Maybe<EventInterface>;\n  eventInterfaces: Array<EventInterface>;\n  networkEventInterface?: Maybe<NetworkEventInterface>;\n  networkEventInterfaces: Array<NetworkEventInterface>;\n  fundEventInterface?: Maybe<FundEventInterface>;\n  fundEventInterfaces: Array<FundEventInterface>;\n  comptrollerEventInterface?: Maybe<ComptrollerEventInterface>;\n  comptrollerEventInterfaces: Array<ComptrollerEventInterface>;\n  sharesChangeInterface?: Maybe<SharesChangeInterface>;\n  sharesChangeInterfaces: Array<SharesChangeInterface>;\n  feeSharesChangeInterface?: Maybe<FeeSharesChangeInterface>;\n  feeSharesChangeInterfaces: Array<FeeSharesChangeInterface>;\n  investmentSharesChangeInterface?: Maybe<InvestmentSharesChangeInterface>;\n  investmentSharesChangeInterfaces: Array<InvestmentSharesChangeInterface>;\n  fundStateInterface?: Maybe<FundStateInterface>;\n  fundStateInterfaces: Array<FundStateInterface>;\n  feeSettingInterface?: Maybe<FeeSettingInterface>;\n  feeSettingInterfaces: Array<FeeSettingInterface>;\n  policySettingInterface?: Maybe<PolicySettingInterface>;\n  policySettingInterfaces: Array<PolicySettingInterface>;\n  individualFeeStateInterface?: Maybe<IndividualFeeStateInterface>;\n  individualFeeStateInterfaces: Array<IndividualFeeStateInterface>;\n  periodicFundStateInterface?: Maybe<PeriodicFundStateInterface>;\n  periodicFundStateInterfaces: Array<PeriodicFundStateInterface>;\n  trade?: Maybe<Trade>;\n  trades: Array<Trade>;\n  sharesRequestInterface?: Maybe<SharesRequestInterface>;\n  sharesRequestInterfaces: Array<SharesRequestInterface>;\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n};\n\n\nexport type SubscriptionNewFundCreatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNewFundCreatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NewFundCreatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NewFundCreatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultProxySetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultProxySetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultProxySetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultProxySetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesBoughtEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesBoughtEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesBoughtEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesBoughtEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRedeemedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRedeemedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRedeemedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRedeemedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWithdrawnEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWithdrawnEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWithdrawnEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWithdrawnEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTrackedAssetAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTrackedAssetAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TrackedAssetAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TrackedAssetAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTrackedAssetRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTrackedAssetRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TrackedAssetRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TrackedAssetRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAuthUserAddedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAuthUserAddedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AuthUserAddedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AuthUserAddedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAuthUserRemovedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAuthUserRemovedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AuthUserRemovedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AuthUserRemovedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCallOnIntegrationExecutedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCallOnIntegrationExecutedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CallOnIntegrationExecutedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CallOnIntegrationExecutedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationSignaledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationSignaledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationSignaledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationSignaledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationCancelledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationCancelledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationCancelledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationCancelledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationExecutedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationExecutedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationExecutedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationExecutedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationInCancelHookFailedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationInCancelHookFailedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationInCancelHookFailedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationInCancelHookFailedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationOutHookFailedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationOutHookFailedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationOutHookFailedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationOutHookFailedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeEnabledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeEnabledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeEnabledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeEnabledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeesRecipientSetForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeesRecipientSetForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeesRecipientSetForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeesRecipientSetForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeSettledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeSettledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSettledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSettledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAllSharesOutstandingForcePaidForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAllSharesOutstandingForcePaidForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AllSharesOutstandingForcePaidForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AllSharesOutstandingForcePaidForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesOutstandingPaidForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesOutstandingPaidForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesOutstandingPaidForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesOutstandingPaidForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigratedSharesDuePaidEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigratedSharesDuePaidEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigratedSharesDuePaidEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigratedSharesDuePaidEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyEnabledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyEnabledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyEnabledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyEnabledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyDisabledForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyDisabledForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyDisabledForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyDisabledForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAccessorSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAccessorSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AccessorSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AccessorSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionOwnerSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionOwnerSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<OwnerSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<OwnerSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigratorSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigratorSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigratorSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigratorSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultLibSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultLibSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultLibSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultLibSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionApprovalEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionApprovalEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ApprovalEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ApprovalEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTransferEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTransferEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TransferEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TransferEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterBlacklistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterBlacklistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterBlacklistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterBlacklistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterBlacklistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterBlacklistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterBlacklistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterBlacklistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetBlacklistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetBlacklistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetBlacklistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetBlacklistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetBlacklistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetBlacklistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetBlacklistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetBlacklistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBuySharesCallerWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBuySharesCallerWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBuySharesCallerWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBuySharesCallerWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionFundSettingsSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionFundSettingsSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestorWhitelistAddressesAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestorWhitelistAddressesAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestorWhitelistAddressesAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestorWhitelistAddressesAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestorWhitelistAddressesRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestorWhitelistAddressesRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestorWhitelistAddressesRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestorWhitelistAddressesRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMaxConcentrationSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMaxConcentrationSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MaxConcentrationSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MaxConcentrationSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMinMaxInvestmentFundSettingsSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMinMaxInvestmentFundSettingsSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MinMaxInvestmentFundSettingsSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MinMaxInvestmentFundSettingsSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeSettledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeSettledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeSettledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeSettledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeActivatedForMigratedFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeActivatedForMigratedFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeActivatedForMigratedFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeActivatedForMigratedFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeActivatedForFundEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeActivatedForFundEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeActivatedForFundEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeActivatedForFundEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeSharePriceUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeSharePriceUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeSharePriceUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeSharePriceUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeePaidOutEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeePaidOutEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeePaidOutEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeePaidOutEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeePerformanceUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeePerformanceUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeePerformanceUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeePerformanceUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeSettledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeSettledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeSettledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeSettledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeSettingsAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeSettingsAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeSettledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeSettledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeSettledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeSettledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionOverridePauseSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionOverridePauseSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<OverridePauseSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<OverridePauseSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPreRedeemSharesHookFailedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPreRedeemSharesHookFailedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PreRedeemSharesHookFailedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PreRedeemSharesHookFailedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestCanceledEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestCanceledEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestCanceledEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestCanceledEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestCreatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestCreatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestCreatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestCreatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestExecutedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestExecutedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestExecutedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestExecutedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestExecutorAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestExecutorAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestExecutorAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestExecutorAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestExecutorRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRequestExecutorRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RequestExecutorRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RequestExecutorRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultProxyDeployedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultProxyDeployedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultProxyDeployedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultProxyDeployedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerProxyDeployedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerProxyDeployedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerProxyDeployedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerProxyDeployedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerLibSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerLibSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerLibSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerLibSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTrackedAssetsLimitSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTrackedAssetsLimitSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TrackedAssetsLimitSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TrackedAssetsLimitSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionAdapterAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionAdapterAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionAdapterAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionAdapterAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionAdapterRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionAdapterRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionRedemptionWindowBufferSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionRedemptionWindowBufferSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundDeployerSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundDeployerSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundDeployerSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundDeployerSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionValueInterpreterSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionValueInterpreterSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ValueInterpreterSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ValueInterpreterSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionOwnershipTransferredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionOwnershipTransferredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<OwnershipTransferredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<OwnershipTransferredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDerivativeAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDerivativeAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DerivativeAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DerivativeAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDerivativeRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDerivativeRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DerivativeRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DerivativeRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDerivativeUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDerivativeUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DerivativeUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DerivativeUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAggregatorUpdatedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAggregatorUpdatedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AggregatorUpdatedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AggregatorUpdatedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEthUsdAggregatorSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEthUsdAggregatorSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EthUsdAggregatorSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EthUsdAggregatorSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPrimitiveAddedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPrimitiveAddedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PrimitiveAddedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PrimitiveAddedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPrimitiveRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPrimitiveRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PrimitiveRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PrimitiveRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationTimelockSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationTimelockSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MigrationTimelockSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MigrationTimelockSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNominatedOwnerRemovedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNominatedOwnerRemovedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NominatedOwnerRemovedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NominatedOwnerRemovedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNominatedOwnerSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNominatedOwnerSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NominatedOwnerSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NominatedOwnerSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDispatcherOwnershipTransferredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDispatcherOwnershipTransferredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DispatcherOwnershipTransferredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DispatcherOwnershipTransferredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesTokenSymbolSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesTokenSymbolSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesTokenSymbolSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesTokenSymbolSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionReleaseStatusSetEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionReleaseStatusSetEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ReleaseStatusSetEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ReleaseStatusSetEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultCallRegisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultCallRegisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultCallRegisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultCallRegisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultCallDeregisteredEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionVaultCallDeregisteredEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<VaultCallDeregisteredEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<VaultCallDeregisteredEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestorProxyDeployedEventArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestorProxyDeployedEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestorProxyDeployedEvent_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestorProxyDeployedEvent_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTransactionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTransactionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Transaction_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Transaction_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionIntegrationManagerArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionIntegrationManagersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationManager_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationManager_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyManagerArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyManagersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicyManager_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicyManager_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeManagerArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeManagersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeManager_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeManager_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemption_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemption_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fund_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fund_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerProxyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerProxiesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerProxy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerProxy_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyFundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyFundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyFundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyFundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMigrationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Migration_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Migration_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionReleaseArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionReleasesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Release_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Release_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAccountArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAccountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Account_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Account_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestmentArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestmentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Investment_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Investment_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestmentStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestmentStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestmentState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestmentState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Fee_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Fee_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionIntegrationAdapterArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionIntegrationAdaptersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IntegrationAdapter_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IntegrationAdapter_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPoliciesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Policy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Policy_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterBlacklistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterBlacklistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterBlacklistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterBlacklistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAdapterWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AdapterWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AdapterWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetBlacklistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetBlacklistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetBlacklistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetBlacklistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBuySharesCallerWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBuySharesCallerWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<BuySharesCallerWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<BuySharesCallerWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionGuaranteedRedemptionSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<GuaranteedRedemptionSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<GuaranteedRedemptionSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestorWhitelistSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestorWhitelistSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestorWhitelistSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestorWhitelistSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMaxConcentrationSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMaxConcentrationSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MaxConcentrationSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MaxConcentrationSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMinMaxInvestmentSettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMinMaxInvestmentSettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MinMaxInvestmentSetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MinMaxInvestmentSetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUnknownPolicySettingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUnknownPolicySettingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UnknownPolicySetting_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UnknownPolicySetting_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionShareStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionShareStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ShareState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ShareState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPortfolioStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPortfolioStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PortfolioState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PortfolioState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHoldingStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHoldingStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HoldingState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HoldingState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionManagementFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ManagementFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ManagementFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPerformanceFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PerformanceFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PerformanceFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateDirectFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateDirectFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateDirectFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEntranceRateBurnFeeStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EntranceRateBurnFeeState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EntranceRateBurnFeeState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokenSwapTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokenSwapTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TokenSwapTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TokenSwapTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMultiTokenSwapTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMultiTokenSwapTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MultiTokenSwapTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MultiTokenSwapTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionLendTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionLendTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<LendTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<LendTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMultiLendTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMultiLendTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MultiLendTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MultiLendTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRedeemTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRedeemTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RedeemTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RedeemTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMultiRedeemTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMultiRedeemTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MultiRedeemTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MultiRedeemTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAddTrackedAssetsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAddTrackedAssetsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AddTrackedAssetsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AddTrackedAssetsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRemoveTrackedAssetsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionRemoveTrackedAssetsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<RemoveTrackedAssetsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<RemoveTrackedAssetsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionApproveAssetsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionApproveAssetsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ApproveAssetsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ApproveAssetsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionStakeTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionStakeTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<StakeTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<StakeTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUnstakeTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUnstakeTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UnstakeTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UnstakeTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionClaimRewardsTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionClaimRewardsTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ClaimRewardsTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ClaimRewardsTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionClaimRewardsAndReinvestTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionClaimRewardsAndReinvestTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ClaimRewardsAndReinvestTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ClaimRewardsAndReinvestTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionClaimRewardsAndSwapTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionClaimRewardsAndSwapTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ClaimRewardsAndSwapTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ClaimRewardsAndSwapTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionLendAndStakeTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionLendAndStakeTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<LendAndStakeTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<LendAndStakeTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUnstakeAndRedeemTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUnstakeAndRedeemTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UnstakeAndRedeemTrade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UnstakeAndRedeemTrade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestorArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestorsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestor_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestor_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestExecutorArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestExecutorsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestExecutor_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestExecutor_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequest_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequest_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Asset_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Asset_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCurrencyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCurrenciesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Currency_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Currency_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCurvePoolAssetDetailArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCurvePoolAssetDetailsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CurvePoolAssetDetail_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CurvePoolAssetDetail_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUniswapV2PoolAssetDetailArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUniswapV2PoolAssetDetailsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UniswapV2PoolAssetDetail_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UniswapV2PoolAssetDetail_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetAmountArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetPriceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionAssetPricesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetPrice_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetPrice_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCurrencyPriceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCurrencyPricesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<CurrencyPrice_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<CurrencyPrice_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyAssetPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyAssetPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyAssetPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyAssetPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyAssetPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyAssetPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyAssetPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyAssetPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyAssetPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyCurrencyPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyCurrencyPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyCurrencyPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyCurrencyPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyCurrencyPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyCurrencyPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyCurrencyPriceCandleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyCurrencyPriceCandlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyPriceCandleGroupArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionHourlyPriceCandleGroupsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<HourlyPriceCandleGroup_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<HourlyPriceCandleGroup_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyPriceCandleGroupArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionDailyPriceCandleGroupsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<DailyPriceCandleGroup_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<DailyPriceCandleGroup_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyPriceCandleGroupArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMonthlyPriceCandleGroupsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<MonthlyPriceCandleGroup_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<MonthlyPriceCandleGroup_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionChainlinkAggregatorProxyArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionChainlinkAggregatorProxiesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ChainlinkAggregatorProxy_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ChainlinkAggregatorProxy_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCronArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCronsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Cron_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Cron_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworkArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworksArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Network_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Network_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworkStateArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworkStatesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkState_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkState_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworkAssetHoldingArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworkAssetHoldingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkAssetHolding_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkAssetHolding_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworkEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionNetworkEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<NetworkEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<NetworkEventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerEventInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionComptrollerEventInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<ComptrollerEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<ComptrollerEventInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesChangeInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesChangeInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesChangeInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeSharesChangeInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeSharesChangeInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSharesChangeInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestmentSharesChangeInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionInvestmentSharesChangeInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<InvestmentSharesChangeInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundStateInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFundStateInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundStateInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundStateInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeSettingInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFeeSettingInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FeeSettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FeeSettingInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicySettingInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPolicySettingInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PolicySettingInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PolicySettingInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionIndividualFeeStateInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionIndividualFeeStateInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<IndividualFeeStateInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<IndividualFeeStateInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPeriodicFundStateInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPeriodicFundStateInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PeriodicFundStateInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PeriodicFundStateInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTradeArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTradesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Trade_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Trade_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestInterfaceArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSharesRequestInterfacesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<SharesRequestInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<SharesRequestInterface_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: Maybe<Block_Height>;\n};\n\nexport type TokenSwapTrade = Trade & {\n  __typename?: 'TokenSwapTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  outgoingAssetAmount: AssetAmount;\n  price: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type TokenSwapTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['BigDecimal']>;\n  price_not?: Maybe<Scalars['BigDecimal']>;\n  price_gt?: Maybe<Scalars['BigDecimal']>;\n  price_lt?: Maybe<Scalars['BigDecimal']>;\n  price_gte?: Maybe<Scalars['BigDecimal']>;\n  price_lte?: Maybe<Scalars['BigDecimal']>;\n  price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum TokenSwapTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  OutgoingAssetAmount = 'outgoingAssetAmount',\n  Price = 'price',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type TrackedAssetAddedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'TrackedAssetAddedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  asset: Asset;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type TrackedAssetAddedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum TrackedAssetAddedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Asset = 'asset',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type TrackedAssetRemovedEvent = EventInterface & FundEventInterface & {\n  __typename?: 'TrackedAssetRemovedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  account: Account;\n  asset: Asset;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type TrackedAssetRemovedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  account?: Maybe<Scalars['String']>;\n  account_not?: Maybe<Scalars['String']>;\n  account_gt?: Maybe<Scalars['String']>;\n  account_lt?: Maybe<Scalars['String']>;\n  account_gte?: Maybe<Scalars['String']>;\n  account_lte?: Maybe<Scalars['String']>;\n  account_in?: Maybe<Array<Scalars['String']>>;\n  account_not_in?: Maybe<Array<Scalars['String']>>;\n  account_contains?: Maybe<Scalars['String']>;\n  account_not_contains?: Maybe<Scalars['String']>;\n  account_starts_with?: Maybe<Scalars['String']>;\n  account_not_starts_with?: Maybe<Scalars['String']>;\n  account_ends_with?: Maybe<Scalars['String']>;\n  account_not_ends_with?: Maybe<Scalars['String']>;\n  asset?: Maybe<Scalars['String']>;\n  asset_not?: Maybe<Scalars['String']>;\n  asset_gt?: Maybe<Scalars['String']>;\n  asset_lt?: Maybe<Scalars['String']>;\n  asset_gte?: Maybe<Scalars['String']>;\n  asset_lte?: Maybe<Scalars['String']>;\n  asset_in?: Maybe<Array<Scalars['String']>>;\n  asset_not_in?: Maybe<Array<Scalars['String']>>;\n  asset_contains?: Maybe<Scalars['String']>;\n  asset_not_contains?: Maybe<Scalars['String']>;\n  asset_starts_with?: Maybe<Scalars['String']>;\n  asset_not_starts_with?: Maybe<Scalars['String']>;\n  asset_ends_with?: Maybe<Scalars['String']>;\n  asset_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum TrackedAssetRemovedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Account = 'account',\n  Asset = 'asset',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction'\n}\n\nexport type TrackedAssetsLimitSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'TrackedAssetsLimitSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  nextTrackedAssetsLimit: Scalars['BigInt'];\n  transaction: Transaction;\n};\n\nexport type TrackedAssetsLimitSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  nextTrackedAssetsLimit?: Maybe<Scalars['BigInt']>;\n  nextTrackedAssetsLimit_not?: Maybe<Scalars['BigInt']>;\n  nextTrackedAssetsLimit_gt?: Maybe<Scalars['BigInt']>;\n  nextTrackedAssetsLimit_lt?: Maybe<Scalars['BigInt']>;\n  nextTrackedAssetsLimit_gte?: Maybe<Scalars['BigInt']>;\n  nextTrackedAssetsLimit_lte?: Maybe<Scalars['BigInt']>;\n  nextTrackedAssetsLimit_in?: Maybe<Array<Scalars['BigInt']>>;\n  nextTrackedAssetsLimit_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum TrackedAssetsLimitSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  NextTrackedAssetsLimit = 'nextTrackedAssetsLimit',\n  Transaction = 'transaction'\n}\n\nexport type Trade = {\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type Trade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Trade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  id: Scalars['ID'];\n  from: Scalars['String'];\n  to?: Maybe<Scalars['String']>;\n  value: Scalars['BigDecimal'];\n  timestamp: Scalars['BigInt'];\n  block: Scalars['BigInt'];\n  gasUsed: Scalars['Int'];\n  gasPrice: Scalars['BigDecimal'];\n  input: Scalars['String'];\n  events: Array<EventInterface>;\n};\n\n\nexport type TransactionEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<EventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<EventInterface_Filter>;\n};\n\nexport type Transaction_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  from?: Maybe<Scalars['String']>;\n  from_not?: Maybe<Scalars['String']>;\n  from_gt?: Maybe<Scalars['String']>;\n  from_lt?: Maybe<Scalars['String']>;\n  from_gte?: Maybe<Scalars['String']>;\n  from_lte?: Maybe<Scalars['String']>;\n  from_in?: Maybe<Array<Scalars['String']>>;\n  from_not_in?: Maybe<Array<Scalars['String']>>;\n  from_contains?: Maybe<Scalars['String']>;\n  from_not_contains?: Maybe<Scalars['String']>;\n  from_starts_with?: Maybe<Scalars['String']>;\n  from_not_starts_with?: Maybe<Scalars['String']>;\n  from_ends_with?: Maybe<Scalars['String']>;\n  from_not_ends_with?: Maybe<Scalars['String']>;\n  to?: Maybe<Scalars['String']>;\n  to_not?: Maybe<Scalars['String']>;\n  to_gt?: Maybe<Scalars['String']>;\n  to_lt?: Maybe<Scalars['String']>;\n  to_gte?: Maybe<Scalars['String']>;\n  to_lte?: Maybe<Scalars['String']>;\n  to_in?: Maybe<Array<Scalars['String']>>;\n  to_not_in?: Maybe<Array<Scalars['String']>>;\n  to_contains?: Maybe<Scalars['String']>;\n  to_not_contains?: Maybe<Scalars['String']>;\n  to_starts_with?: Maybe<Scalars['String']>;\n  to_not_starts_with?: Maybe<Scalars['String']>;\n  to_ends_with?: Maybe<Scalars['String']>;\n  to_not_ends_with?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['BigDecimal']>;\n  value_not?: Maybe<Scalars['BigDecimal']>;\n  value_gt?: Maybe<Scalars['BigDecimal']>;\n  value_lt?: Maybe<Scalars['BigDecimal']>;\n  value_gte?: Maybe<Scalars['BigDecimal']>;\n  value_lte?: Maybe<Scalars['BigDecimal']>;\n  value_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  value_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  block?: Maybe<Scalars['BigInt']>;\n  block_not?: Maybe<Scalars['BigInt']>;\n  block_gt?: Maybe<Scalars['BigInt']>;\n  block_lt?: Maybe<Scalars['BigInt']>;\n  block_gte?: Maybe<Scalars['BigInt']>;\n  block_lte?: Maybe<Scalars['BigInt']>;\n  block_in?: Maybe<Array<Scalars['BigInt']>>;\n  block_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  gasUsed?: Maybe<Scalars['Int']>;\n  gasUsed_not?: Maybe<Scalars['Int']>;\n  gasUsed_gt?: Maybe<Scalars['Int']>;\n  gasUsed_lt?: Maybe<Scalars['Int']>;\n  gasUsed_gte?: Maybe<Scalars['Int']>;\n  gasUsed_lte?: Maybe<Scalars['Int']>;\n  gasUsed_in?: Maybe<Array<Scalars['Int']>>;\n  gasUsed_not_in?: Maybe<Array<Scalars['Int']>>;\n  gasPrice?: Maybe<Scalars['BigDecimal']>;\n  gasPrice_not?: Maybe<Scalars['BigDecimal']>;\n  gasPrice_gt?: Maybe<Scalars['BigDecimal']>;\n  gasPrice_lt?: Maybe<Scalars['BigDecimal']>;\n  gasPrice_gte?: Maybe<Scalars['BigDecimal']>;\n  gasPrice_lte?: Maybe<Scalars['BigDecimal']>;\n  gasPrice_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  gasPrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  input?: Maybe<Scalars['String']>;\n  input_not?: Maybe<Scalars['String']>;\n  input_gt?: Maybe<Scalars['String']>;\n  input_lt?: Maybe<Scalars['String']>;\n  input_gte?: Maybe<Scalars['String']>;\n  input_lte?: Maybe<Scalars['String']>;\n  input_in?: Maybe<Array<Scalars['String']>>;\n  input_not_in?: Maybe<Array<Scalars['String']>>;\n  input_contains?: Maybe<Scalars['String']>;\n  input_not_contains?: Maybe<Scalars['String']>;\n  input_starts_with?: Maybe<Scalars['String']>;\n  input_not_starts_with?: Maybe<Scalars['String']>;\n  input_ends_with?: Maybe<Scalars['String']>;\n  input_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Transaction_OrderBy {\n  Id = 'id',\n  From = 'from',\n  To = 'to',\n  Value = 'value',\n  Timestamp = 'timestamp',\n  Block = 'block',\n  GasUsed = 'gasUsed',\n  GasPrice = 'gasPrice',\n  Input = 'input',\n  Events = 'events'\n}\n\nexport type TransferEvent = EventInterface & FundEventInterface & {\n  __typename?: 'TransferEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  from: Scalars['String'];\n  to: Scalars['String'];\n  amount: Scalars['BigDecimal'];\n};\n\nexport type TransferEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  from?: Maybe<Scalars['String']>;\n  from_not?: Maybe<Scalars['String']>;\n  from_gt?: Maybe<Scalars['String']>;\n  from_lt?: Maybe<Scalars['String']>;\n  from_gte?: Maybe<Scalars['String']>;\n  from_lte?: Maybe<Scalars['String']>;\n  from_in?: Maybe<Array<Scalars['String']>>;\n  from_not_in?: Maybe<Array<Scalars['String']>>;\n  from_contains?: Maybe<Scalars['String']>;\n  from_not_contains?: Maybe<Scalars['String']>;\n  from_starts_with?: Maybe<Scalars['String']>;\n  from_not_starts_with?: Maybe<Scalars['String']>;\n  from_ends_with?: Maybe<Scalars['String']>;\n  from_not_ends_with?: Maybe<Scalars['String']>;\n  to?: Maybe<Scalars['String']>;\n  to_not?: Maybe<Scalars['String']>;\n  to_gt?: Maybe<Scalars['String']>;\n  to_lt?: Maybe<Scalars['String']>;\n  to_gte?: Maybe<Scalars['String']>;\n  to_lte?: Maybe<Scalars['String']>;\n  to_in?: Maybe<Array<Scalars['String']>>;\n  to_not_in?: Maybe<Array<Scalars['String']>>;\n  to_contains?: Maybe<Scalars['String']>;\n  to_not_contains?: Maybe<Scalars['String']>;\n  to_starts_with?: Maybe<Scalars['String']>;\n  to_not_starts_with?: Maybe<Scalars['String']>;\n  to_ends_with?: Maybe<Scalars['String']>;\n  to_not_ends_with?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['BigDecimal']>;\n  amount_not?: Maybe<Scalars['BigDecimal']>;\n  amount_gt?: Maybe<Scalars['BigDecimal']>;\n  amount_lt?: Maybe<Scalars['BigDecimal']>;\n  amount_gte?: Maybe<Scalars['BigDecimal']>;\n  amount_lte?: Maybe<Scalars['BigDecimal']>;\n  amount_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TransferEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  From = 'from',\n  To = 'to',\n  Amount = 'amount'\n}\n\nexport type UniswapV2PoolAssetDetail = {\n  __typename?: 'UniswapV2PoolAssetDetail';\n  id: Scalars['ID'];\n  token0: Asset;\n  token1: Asset;\n};\n\nexport type UniswapV2PoolAssetDetail_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  token0?: Maybe<Scalars['String']>;\n  token0_not?: Maybe<Scalars['String']>;\n  token0_gt?: Maybe<Scalars['String']>;\n  token0_lt?: Maybe<Scalars['String']>;\n  token0_gte?: Maybe<Scalars['String']>;\n  token0_lte?: Maybe<Scalars['String']>;\n  token0_in?: Maybe<Array<Scalars['String']>>;\n  token0_not_in?: Maybe<Array<Scalars['String']>>;\n  token0_contains?: Maybe<Scalars['String']>;\n  token0_not_contains?: Maybe<Scalars['String']>;\n  token0_starts_with?: Maybe<Scalars['String']>;\n  token0_not_starts_with?: Maybe<Scalars['String']>;\n  token0_ends_with?: Maybe<Scalars['String']>;\n  token0_not_ends_with?: Maybe<Scalars['String']>;\n  token1?: Maybe<Scalars['String']>;\n  token1_not?: Maybe<Scalars['String']>;\n  token1_gt?: Maybe<Scalars['String']>;\n  token1_lt?: Maybe<Scalars['String']>;\n  token1_gte?: Maybe<Scalars['String']>;\n  token1_lte?: Maybe<Scalars['String']>;\n  token1_in?: Maybe<Array<Scalars['String']>>;\n  token1_not_in?: Maybe<Array<Scalars['String']>>;\n  token1_contains?: Maybe<Scalars['String']>;\n  token1_not_contains?: Maybe<Scalars['String']>;\n  token1_starts_with?: Maybe<Scalars['String']>;\n  token1_not_starts_with?: Maybe<Scalars['String']>;\n  token1_ends_with?: Maybe<Scalars['String']>;\n  token1_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum UniswapV2PoolAssetDetail_OrderBy {\n  Id = 'id',\n  Token0 = 'token0',\n  Token1 = 'token1'\n}\n\nexport type UnknownPolicySetting = PolicySettingInterface & {\n  __typename?: 'UnknownPolicySetting';\n  id: Scalars['ID'];\n  policy: Policy;\n  comptroller: ComptrollerProxy;\n  timestamp: Scalars['BigInt'];\n  enabled: Scalars['Boolean'];\n  events: Array<FundEventInterface>;\n};\n\n\nexport type UnknownPolicySettingEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<FundEventInterface_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<FundEventInterface_Filter>;\n};\n\nexport type UnknownPolicySetting_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  policy?: Maybe<Scalars['String']>;\n  policy_not?: Maybe<Scalars['String']>;\n  policy_gt?: Maybe<Scalars['String']>;\n  policy_lt?: Maybe<Scalars['String']>;\n  policy_gte?: Maybe<Scalars['String']>;\n  policy_lte?: Maybe<Scalars['String']>;\n  policy_in?: Maybe<Array<Scalars['String']>>;\n  policy_not_in?: Maybe<Array<Scalars['String']>>;\n  policy_contains?: Maybe<Scalars['String']>;\n  policy_not_contains?: Maybe<Scalars['String']>;\n  policy_starts_with?: Maybe<Scalars['String']>;\n  policy_not_starts_with?: Maybe<Scalars['String']>;\n  policy_ends_with?: Maybe<Scalars['String']>;\n  policy_not_ends_with?: Maybe<Scalars['String']>;\n  comptroller?: Maybe<Scalars['String']>;\n  comptroller_not?: Maybe<Scalars['String']>;\n  comptroller_gt?: Maybe<Scalars['String']>;\n  comptroller_lt?: Maybe<Scalars['String']>;\n  comptroller_gte?: Maybe<Scalars['String']>;\n  comptroller_lte?: Maybe<Scalars['String']>;\n  comptroller_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_not_in?: Maybe<Array<Scalars['String']>>;\n  comptroller_contains?: Maybe<Scalars['String']>;\n  comptroller_not_contains?: Maybe<Scalars['String']>;\n  comptroller_starts_with?: Maybe<Scalars['String']>;\n  comptroller_not_starts_with?: Maybe<Scalars['String']>;\n  comptroller_ends_with?: Maybe<Scalars['String']>;\n  comptroller_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  enabled?: Maybe<Scalars['Boolean']>;\n  enabled_not?: Maybe<Scalars['Boolean']>;\n  enabled_in?: Maybe<Array<Scalars['Boolean']>>;\n  enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;\n  events?: Maybe<Array<Scalars['String']>>;\n  events_not?: Maybe<Array<Scalars['String']>>;\n  events_contains?: Maybe<Array<Scalars['String']>>;\n  events_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum UnknownPolicySetting_OrderBy {\n  Id = 'id',\n  Policy = 'policy',\n  Comptroller = 'comptroller',\n  Timestamp = 'timestamp',\n  Enabled = 'enabled',\n  Events = 'events'\n}\n\nexport type UnstakeAndRedeemTrade = Trade & {\n  __typename?: 'UnstakeAndRedeemTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmounts: Array<AssetAmount>;\n  outgoingAssetAmount: AssetAmount;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\n\nexport type UnstakeAndRedeemTradeIncomingAssetAmountsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<AssetAmount_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<AssetAmount_Filter>;\n};\n\nexport type UnstakeAndRedeemTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum UnstakeAndRedeemTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmounts = 'incomingAssetAmounts',\n  OutgoingAssetAmount = 'outgoingAssetAmount',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type UnstakeTrade = Trade & {\n  __typename?: 'UnstakeTrade';\n  id: Scalars['ID'];\n  fund: Fund;\n  adapter: IntegrationAdapter;\n  method: IntegrationMethod;\n  incomingAssetAmount: AssetAmount;\n  outgoingAssetAmount: AssetAmount;\n  timestamp: Scalars['BigInt'];\n  fundState: FundState;\n};\n\nexport type UnstakeTrade_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  adapter?: Maybe<Scalars['String']>;\n  adapter_not?: Maybe<Scalars['String']>;\n  adapter_gt?: Maybe<Scalars['String']>;\n  adapter_lt?: Maybe<Scalars['String']>;\n  adapter_gte?: Maybe<Scalars['String']>;\n  adapter_lte?: Maybe<Scalars['String']>;\n  adapter_in?: Maybe<Array<Scalars['String']>>;\n  adapter_not_in?: Maybe<Array<Scalars['String']>>;\n  adapter_contains?: Maybe<Scalars['String']>;\n  adapter_not_contains?: Maybe<Scalars['String']>;\n  adapter_starts_with?: Maybe<Scalars['String']>;\n  adapter_not_starts_with?: Maybe<Scalars['String']>;\n  adapter_ends_with?: Maybe<Scalars['String']>;\n  adapter_not_ends_with?: Maybe<Scalars['String']>;\n  method?: Maybe<IntegrationMethod>;\n  method_not?: Maybe<IntegrationMethod>;\n  incomingAssetAmount?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lt?: Maybe<Scalars['String']>;\n  incomingAssetAmount_gte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_lte?: Maybe<Scalars['String']>;\n  incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  incomingAssetAmount_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lt?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_gte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_lte?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;\n  outgoingAssetAmount_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;\n  outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  fundState?: Maybe<Scalars['String']>;\n  fundState_not?: Maybe<Scalars['String']>;\n  fundState_gt?: Maybe<Scalars['String']>;\n  fundState_lt?: Maybe<Scalars['String']>;\n  fundState_gte?: Maybe<Scalars['String']>;\n  fundState_lte?: Maybe<Scalars['String']>;\n  fundState_in?: Maybe<Array<Scalars['String']>>;\n  fundState_not_in?: Maybe<Array<Scalars['String']>>;\n  fundState_contains?: Maybe<Scalars['String']>;\n  fundState_not_contains?: Maybe<Scalars['String']>;\n  fundState_starts_with?: Maybe<Scalars['String']>;\n  fundState_not_starts_with?: Maybe<Scalars['String']>;\n  fundState_ends_with?: Maybe<Scalars['String']>;\n  fundState_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum UnstakeTrade_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Adapter = 'adapter',\n  Method = 'method',\n  IncomingAssetAmount = 'incomingAssetAmount',\n  OutgoingAssetAmount = 'outgoingAssetAmount',\n  Timestamp = 'timestamp',\n  FundState = 'fundState'\n}\n\nexport type ValueInterpreterSetEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'ValueInterpreterSetEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevValueInterpreter?: Maybe<Scalars['String']>;\n  nextValueInterpreter: Scalars['String'];\n};\n\nexport type ValueInterpreterSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevValueInterpreter?: Maybe<Scalars['String']>;\n  prevValueInterpreter_not?: Maybe<Scalars['String']>;\n  prevValueInterpreter_gt?: Maybe<Scalars['String']>;\n  prevValueInterpreter_lt?: Maybe<Scalars['String']>;\n  prevValueInterpreter_gte?: Maybe<Scalars['String']>;\n  prevValueInterpreter_lte?: Maybe<Scalars['String']>;\n  prevValueInterpreter_in?: Maybe<Array<Scalars['String']>>;\n  prevValueInterpreter_not_in?: Maybe<Array<Scalars['String']>>;\n  prevValueInterpreter_contains?: Maybe<Scalars['String']>;\n  prevValueInterpreter_not_contains?: Maybe<Scalars['String']>;\n  prevValueInterpreter_starts_with?: Maybe<Scalars['String']>;\n  prevValueInterpreter_not_starts_with?: Maybe<Scalars['String']>;\n  prevValueInterpreter_ends_with?: Maybe<Scalars['String']>;\n  prevValueInterpreter_not_ends_with?: Maybe<Scalars['String']>;\n  nextValueInterpreter?: Maybe<Scalars['String']>;\n  nextValueInterpreter_not?: Maybe<Scalars['String']>;\n  nextValueInterpreter_gt?: Maybe<Scalars['String']>;\n  nextValueInterpreter_lt?: Maybe<Scalars['String']>;\n  nextValueInterpreter_gte?: Maybe<Scalars['String']>;\n  nextValueInterpreter_lte?: Maybe<Scalars['String']>;\n  nextValueInterpreter_in?: Maybe<Array<Scalars['String']>>;\n  nextValueInterpreter_not_in?: Maybe<Array<Scalars['String']>>;\n  nextValueInterpreter_contains?: Maybe<Scalars['String']>;\n  nextValueInterpreter_not_contains?: Maybe<Scalars['String']>;\n  nextValueInterpreter_starts_with?: Maybe<Scalars['String']>;\n  nextValueInterpreter_not_starts_with?: Maybe<Scalars['String']>;\n  nextValueInterpreter_ends_with?: Maybe<Scalars['String']>;\n  nextValueInterpreter_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum ValueInterpreterSetEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevValueInterpreter = 'prevValueInterpreter',\n  NextValueInterpreter = 'nextValueInterpreter'\n}\n\nexport type VaultCallDeregisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'VaultCallDeregisteredEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  contractAddress: Scalars['String'];\n  selector: Scalars['String'];\n};\n\nexport type VaultCallDeregisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  contractAddress?: Maybe<Scalars['String']>;\n  contractAddress_not?: Maybe<Scalars['String']>;\n  contractAddress_gt?: Maybe<Scalars['String']>;\n  contractAddress_lt?: Maybe<Scalars['String']>;\n  contractAddress_gte?: Maybe<Scalars['String']>;\n  contractAddress_lte?: Maybe<Scalars['String']>;\n  contractAddress_in?: Maybe<Array<Scalars['String']>>;\n  contractAddress_not_in?: Maybe<Array<Scalars['String']>>;\n  contractAddress_contains?: Maybe<Scalars['String']>;\n  contractAddress_not_contains?: Maybe<Scalars['String']>;\n  contractAddress_starts_with?: Maybe<Scalars['String']>;\n  contractAddress_not_starts_with?: Maybe<Scalars['String']>;\n  contractAddress_ends_with?: Maybe<Scalars['String']>;\n  contractAddress_not_ends_with?: Maybe<Scalars['String']>;\n  selector?: Maybe<Scalars['String']>;\n  selector_not?: Maybe<Scalars['String']>;\n  selector_gt?: Maybe<Scalars['String']>;\n  selector_lt?: Maybe<Scalars['String']>;\n  selector_gte?: Maybe<Scalars['String']>;\n  selector_lte?: Maybe<Scalars['String']>;\n  selector_in?: Maybe<Array<Scalars['String']>>;\n  selector_not_in?: Maybe<Array<Scalars['String']>>;\n  selector_contains?: Maybe<Scalars['String']>;\n  selector_not_contains?: Maybe<Scalars['String']>;\n  selector_starts_with?: Maybe<Scalars['String']>;\n  selector_not_starts_with?: Maybe<Scalars['String']>;\n  selector_ends_with?: Maybe<Scalars['String']>;\n  selector_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum VaultCallDeregisteredEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ContractAddress = 'contractAddress',\n  Selector = 'selector'\n}\n\nexport type VaultCallRegisteredEvent = EventInterface & NetworkEventInterface & {\n  __typename?: 'VaultCallRegisteredEvent';\n  id: Scalars['ID'];\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  contractAddress: Scalars['String'];\n  selector: Scalars['String'];\n};\n\nexport type VaultCallRegisteredEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  contractAddress?: Maybe<Scalars['String']>;\n  contractAddress_not?: Maybe<Scalars['String']>;\n  contractAddress_gt?: Maybe<Scalars['String']>;\n  contractAddress_lt?: Maybe<Scalars['String']>;\n  contractAddress_gte?: Maybe<Scalars['String']>;\n  contractAddress_lte?: Maybe<Scalars['String']>;\n  contractAddress_in?: Maybe<Array<Scalars['String']>>;\n  contractAddress_not_in?: Maybe<Array<Scalars['String']>>;\n  contractAddress_contains?: Maybe<Scalars['String']>;\n  contractAddress_not_contains?: Maybe<Scalars['String']>;\n  contractAddress_starts_with?: Maybe<Scalars['String']>;\n  contractAddress_not_starts_with?: Maybe<Scalars['String']>;\n  contractAddress_ends_with?: Maybe<Scalars['String']>;\n  contractAddress_not_ends_with?: Maybe<Scalars['String']>;\n  selector?: Maybe<Scalars['String']>;\n  selector_not?: Maybe<Scalars['String']>;\n  selector_gt?: Maybe<Scalars['String']>;\n  selector_lt?: Maybe<Scalars['String']>;\n  selector_gte?: Maybe<Scalars['String']>;\n  selector_lte?: Maybe<Scalars['String']>;\n  selector_in?: Maybe<Array<Scalars['String']>>;\n  selector_not_in?: Maybe<Array<Scalars['String']>>;\n  selector_contains?: Maybe<Scalars['String']>;\n  selector_not_contains?: Maybe<Scalars['String']>;\n  selector_starts_with?: Maybe<Scalars['String']>;\n  selector_not_starts_with?: Maybe<Scalars['String']>;\n  selector_ends_with?: Maybe<Scalars['String']>;\n  selector_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum VaultCallRegisteredEvent_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  ContractAddress = 'contractAddress',\n  Selector = 'selector'\n}\n\nexport type VaultLibSetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'VaultLibSetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  prevVaultLib?: Maybe<Scalars['String']>;\n  nextVaultLib: Scalars['String'];\n};\n\nexport type VaultLibSetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  prevVaultLib?: Maybe<Scalars['String']>;\n  prevVaultLib_not?: Maybe<Scalars['String']>;\n  prevVaultLib_gt?: Maybe<Scalars['String']>;\n  prevVaultLib_lt?: Maybe<Scalars['String']>;\n  prevVaultLib_gte?: Maybe<Scalars['String']>;\n  prevVaultLib_lte?: Maybe<Scalars['String']>;\n  prevVaultLib_in?: Maybe<Array<Scalars['String']>>;\n  prevVaultLib_not_in?: Maybe<Array<Scalars['String']>>;\n  prevVaultLib_contains?: Maybe<Scalars['String']>;\n  prevVaultLib_not_contains?: Maybe<Scalars['String']>;\n  prevVaultLib_starts_with?: Maybe<Scalars['String']>;\n  prevVaultLib_not_starts_with?: Maybe<Scalars['String']>;\n  prevVaultLib_ends_with?: Maybe<Scalars['String']>;\n  prevVaultLib_not_ends_with?: Maybe<Scalars['String']>;\n  nextVaultLib?: Maybe<Scalars['String']>;\n  nextVaultLib_not?: Maybe<Scalars['String']>;\n  nextVaultLib_gt?: Maybe<Scalars['String']>;\n  nextVaultLib_lt?: Maybe<Scalars['String']>;\n  nextVaultLib_gte?: Maybe<Scalars['String']>;\n  nextVaultLib_lte?: Maybe<Scalars['String']>;\n  nextVaultLib_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultLib_not_in?: Maybe<Array<Scalars['String']>>;\n  nextVaultLib_contains?: Maybe<Scalars['String']>;\n  nextVaultLib_not_contains?: Maybe<Scalars['String']>;\n  nextVaultLib_starts_with?: Maybe<Scalars['String']>;\n  nextVaultLib_not_starts_with?: Maybe<Scalars['String']>;\n  nextVaultLib_ends_with?: Maybe<Scalars['String']>;\n  nextVaultLib_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum VaultLibSetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  PrevVaultLib = 'prevVaultLib',\n  NextVaultLib = 'nextVaultLib'\n}\n\nexport type VaultProxyDeployedEvent = EventInterface & FundEventInterface & NetworkEventInterface & {\n  __typename?: 'VaultProxyDeployedEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  fundDeployer: Scalars['String'];\n  owner: Account;\n  vaultLib: Scalars['String'];\n  accessor: Scalars['String'];\n  fundName: Scalars['String'];\n};\n\nexport type VaultProxyDeployedEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  fundDeployer?: Maybe<Scalars['String']>;\n  fundDeployer_not?: Maybe<Scalars['String']>;\n  fundDeployer_gt?: Maybe<Scalars['String']>;\n  fundDeployer_lt?: Maybe<Scalars['String']>;\n  fundDeployer_gte?: Maybe<Scalars['String']>;\n  fundDeployer_lte?: Maybe<Scalars['String']>;\n  fundDeployer_in?: Maybe<Array<Scalars['String']>>;\n  fundDeployer_not_in?: Maybe<Array<Scalars['String']>>;\n  fundDeployer_contains?: Maybe<Scalars['String']>;\n  fundDeployer_not_contains?: Maybe<Scalars['String']>;\n  fundDeployer_starts_with?: Maybe<Scalars['String']>;\n  fundDeployer_not_starts_with?: Maybe<Scalars['String']>;\n  fundDeployer_ends_with?: Maybe<Scalars['String']>;\n  fundDeployer_not_ends_with?: Maybe<Scalars['String']>;\n  owner?: Maybe<Scalars['String']>;\n  owner_not?: Maybe<Scalars['String']>;\n  owner_gt?: Maybe<Scalars['String']>;\n  owner_lt?: Maybe<Scalars['String']>;\n  owner_gte?: Maybe<Scalars['String']>;\n  owner_lte?: Maybe<Scalars['String']>;\n  owner_in?: Maybe<Array<Scalars['String']>>;\n  owner_not_in?: Maybe<Array<Scalars['String']>>;\n  owner_contains?: Maybe<Scalars['String']>;\n  owner_not_contains?: Maybe<Scalars['String']>;\n  owner_starts_with?: Maybe<Scalars['String']>;\n  owner_not_starts_with?: Maybe<Scalars['String']>;\n  owner_ends_with?: Maybe<Scalars['String']>;\n  owner_not_ends_with?: Maybe<Scalars['String']>;\n  vaultLib?: Maybe<Scalars['String']>;\n  vaultLib_not?: Maybe<Scalars['String']>;\n  vaultLib_gt?: Maybe<Scalars['String']>;\n  vaultLib_lt?: Maybe<Scalars['String']>;\n  vaultLib_gte?: Maybe<Scalars['String']>;\n  vaultLib_lte?: Maybe<Scalars['String']>;\n  vaultLib_in?: Maybe<Array<Scalars['String']>>;\n  vaultLib_not_in?: Maybe<Array<Scalars['String']>>;\n  vaultLib_contains?: Maybe<Scalars['String']>;\n  vaultLib_not_contains?: Maybe<Scalars['String']>;\n  vaultLib_starts_with?: Maybe<Scalars['String']>;\n  vaultLib_not_starts_with?: Maybe<Scalars['String']>;\n  vaultLib_ends_with?: Maybe<Scalars['String']>;\n  vaultLib_not_ends_with?: Maybe<Scalars['String']>;\n  accessor?: Maybe<Scalars['String']>;\n  accessor_not?: Maybe<Scalars['String']>;\n  accessor_gt?: Maybe<Scalars['String']>;\n  accessor_lt?: Maybe<Scalars['String']>;\n  accessor_gte?: Maybe<Scalars['String']>;\n  accessor_lte?: Maybe<Scalars['String']>;\n  accessor_in?: Maybe<Array<Scalars['String']>>;\n  accessor_not_in?: Maybe<Array<Scalars['String']>>;\n  accessor_contains?: Maybe<Scalars['String']>;\n  accessor_not_contains?: Maybe<Scalars['String']>;\n  accessor_starts_with?: Maybe<Scalars['String']>;\n  accessor_not_starts_with?: Maybe<Scalars['String']>;\n  accessor_ends_with?: Maybe<Scalars['String']>;\n  accessor_not_ends_with?: Maybe<Scalars['String']>;\n  fundName?: Maybe<Scalars['String']>;\n  fundName_not?: Maybe<Scalars['String']>;\n  fundName_gt?: Maybe<Scalars['String']>;\n  fundName_lt?: Maybe<Scalars['String']>;\n  fundName_gte?: Maybe<Scalars['String']>;\n  fundName_lte?: Maybe<Scalars['String']>;\n  fundName_in?: Maybe<Array<Scalars['String']>>;\n  fundName_not_in?: Maybe<Array<Scalars['String']>>;\n  fundName_contains?: Maybe<Scalars['String']>;\n  fundName_not_contains?: Maybe<Scalars['String']>;\n  fundName_starts_with?: Maybe<Scalars['String']>;\n  fundName_not_starts_with?: Maybe<Scalars['String']>;\n  fundName_ends_with?: Maybe<Scalars['String']>;\n  fundName_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum VaultProxyDeployedEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  FundDeployer = 'fundDeployer',\n  Owner = 'owner',\n  VaultLib = 'vaultLib',\n  Accessor = 'accessor',\n  FundName = 'fundName'\n}\n\nexport type VaultProxySetEvent = EventInterface & FundEventInterface & {\n  __typename?: 'VaultProxySetEvent';\n  id: Scalars['ID'];\n  fund: Fund;\n  timestamp: Scalars['BigInt'];\n  transaction: Transaction;\n  vaultProxy: Scalars['String'];\n};\n\nexport type VaultProxySetEvent_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  fund?: Maybe<Scalars['String']>;\n  fund_not?: Maybe<Scalars['String']>;\n  fund_gt?: Maybe<Scalars['String']>;\n  fund_lt?: Maybe<Scalars['String']>;\n  fund_gte?: Maybe<Scalars['String']>;\n  fund_lte?: Maybe<Scalars['String']>;\n  fund_in?: Maybe<Array<Scalars['String']>>;\n  fund_not_in?: Maybe<Array<Scalars['String']>>;\n  fund_contains?: Maybe<Scalars['String']>;\n  fund_not_contains?: Maybe<Scalars['String']>;\n  fund_starts_with?: Maybe<Scalars['String']>;\n  fund_not_starts_with?: Maybe<Scalars['String']>;\n  fund_ends_with?: Maybe<Scalars['String']>;\n  fund_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy?: Maybe<Scalars['String']>;\n  vaultProxy_not?: Maybe<Scalars['String']>;\n  vaultProxy_gt?: Maybe<Scalars['String']>;\n  vaultProxy_lt?: Maybe<Scalars['String']>;\n  vaultProxy_gte?: Maybe<Scalars['String']>;\n  vaultProxy_lte?: Maybe<Scalars['String']>;\n  vaultProxy_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;\n  vaultProxy_contains?: Maybe<Scalars['String']>;\n  vaultProxy_not_contains?: Maybe<Scalars['String']>;\n  vaultProxy_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_starts_with?: Maybe<Scalars['String']>;\n  vaultProxy_ends_with?: Maybe<Scalars['String']>;\n  vaultProxy_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum VaultProxySetEvent_OrderBy {\n  Id = 'id',\n  Fund = 'fund',\n  Timestamp = 'timestamp',\n  Transaction = 'transaction',\n  VaultProxy = 'vaultProxy'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  Allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  Deny = 'deny'\n}\n\nexport type AssetsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AssetsQuery = (\n  { __typename?: 'Query' }\n  & { assets: Array<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id' | 'name' | 'symbol' | 'decimals' | 'type' | 'derivativeType'>\n    & { releases: Array<(\n      { __typename?: 'Release' }\n      & Pick<Release, 'id'>\n    )>, price?: Maybe<(\n      { __typename?: 'AssetPrice' }\n      & Pick<AssetPrice, 'price' | 'timestamp'>\n    )>, underlyingAsset?: Maybe<(\n      { __typename?: 'Asset' }\n      & Pick<Asset, 'id' | 'symbol' | 'name' | 'decimals'>\n    )>, uniswapV2PoolAssetDetails?: Maybe<(\n      { __typename?: 'UniswapV2PoolAssetDetail' }\n      & { token0: (\n        { __typename?: 'Asset' }\n        & Pick<Asset, 'id' | 'symbol' | 'decimals'>\n      ), token1: (\n        { __typename?: 'Asset' }\n        & Pick<Asset, 'id' | 'symbol' | 'decimals'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type CurrentReleaseContractsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentReleaseContractsQuery = (\n  { __typename?: 'Query' }\n  & { network?: Maybe<(\n    { __typename?: 'Network' }\n    & { currentRelease?: Maybe<(\n      { __typename?: 'Release' }\n      & Pick<Release, 'adapterBlacklist' | 'adapterWhitelist' | 'aggregatedDerivativePriceFeed' | 'assetBlacklist' | 'assetWhitelist' | 'buySharesCallerWhitelist' | 'chaiAdapter' | 'chaiIntegratee' | 'chainlinkPriceFeed' | 'compoundAdapter' | 'comptrollerLib' | 'dispatcher' | 'entranceRateBurnFee' | 'entranceRateDirectFee' | 'feeManager' | 'fundActionsWrapper' | 'fundDeployer' | 'guaranteedRedemption' | 'integrationManager' | 'investorWhitelist' | 'kyberAdapter' | 'kyberIntegratee' | 'managementFee' | 'maxConcentration' | 'minMaxInvestment' | 'paraSwapAdapter' | 'performanceFee' | 'policyManager' | 'synthetixAdapter' | 'synthetixAddressResolver' | 'synthetixDelegateApprovals' | 'synthetixIntegratee' | 'trackedAssetsAdapter' | 'uniswapV2Adapter' | 'uniswapV2Integratee' | 'valueInterpreter' | 'vaultLib' | 'wethToken' | 'zeroExV2Adapter'>\n    )> }\n  )> }\n);\n\nexport type FundsQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type FundsQuery = (\n  { __typename?: 'Query' }\n  & { funds: Array<(\n    { __typename?: 'Fund' }\n    & Pick<Fund, 'id' | 'name'>\n    & { accessor: (\n      { __typename?: 'ComptrollerProxy' }\n      & Pick<ComptrollerProxy, 'id'>\n    ) }\n  )> }\n);\n\nexport type VaultQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type VaultQuery = (\n  { __typename?: 'Query' }\n  & { fund?: Maybe<(\n    { __typename?: 'Fund' }\n    & { release: (\n      { __typename?: 'Release' }\n      & Pick<Release, 'id'>\n    ), accessor: (\n      { __typename?: 'ComptrollerProxy' }\n      & Pick<ComptrollerProxy, 'id'>\n    ) }\n  )> }\n);\n\n\nexport const AssetsDocument = gql`\n    query assets {\n  assets(first: 1000, orderBy: symbol, orderDirection: asc) {\n    id\n    name\n    symbol\n    decimals\n    type\n    derivativeType\n    releases {\n      id\n    }\n    price {\n      price\n      timestamp\n    }\n    underlyingAsset {\n      id\n      symbol\n      name\n      decimals\n    }\n    uniswapV2PoolAssetDetails {\n      token0 {\n        id\n        symbol\n        decimals\n      }\n      token1 {\n        id\n        symbol\n        decimals\n      }\n    }\n  }\n}\n    `;\nexport const CurrentReleaseContractsDocument = gql`\n    query currentReleaseContracts {\n  network(id: \"ENZYME\") {\n    currentRelease {\n      adapterBlacklist\n      adapterWhitelist\n      aggregatedDerivativePriceFeed\n      assetBlacklist\n      assetWhitelist\n      buySharesCallerWhitelist\n      chaiAdapter\n      chaiIntegratee\n      chainlinkPriceFeed\n      compoundAdapter\n      comptrollerLib\n      dispatcher\n      entranceRateBurnFee\n      entranceRateDirectFee\n      feeManager\n      fundActionsWrapper\n      fundDeployer\n      guaranteedRedemption\n      integrationManager\n      investorWhitelist\n      kyberAdapter\n      kyberIntegratee\n      managementFee\n      maxConcentration\n      minMaxInvestment\n      paraSwapAdapter\n      performanceFee\n      policyManager\n      synthetixAdapter\n      synthetixAddressResolver\n      synthetixDelegateApprovals\n      synthetixIntegratee\n      trackedAssetsAdapter\n      uniswapV2Adapter\n      uniswapV2Integratee\n      valueInterpreter\n      vaultLib\n      wethToken\n      zeroExV2Adapter\n    }\n  }\n}\n    `;\nexport const FundsDocument = gql`\n    query funds($id: String!) {\n  funds(where: {manager: $id}) {\n    id\n    name\n    accessor {\n      id\n    }\n  }\n}\n    `;\nexport const VaultDocument = gql`\n    query vault($id: ID!) {\n  fund(id: $id) {\n    release {\n      id\n    }\n    accessor {\n      id\n    }\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    assets(variables?: AssetsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<AssetsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AssetsQuery>(AssetsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'assets');\n    },\n    currentReleaseContracts(variables?: CurrentReleaseContractsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<CurrentReleaseContractsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<CurrentReleaseContractsQuery>(CurrentReleaseContractsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'currentReleaseContracts');\n    },\n    funds(variables: FundsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<FundsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FundsQuery>(FundsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'funds');\n    },\n    vault(variables: VaultQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<VaultQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<VaultQuery>(VaultDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'vault');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\nimport { getSdk, Sdk } from './subgraph';\n\nexport function gql(endpoint: string): Sdk {\n  return getSdk(new GraphQLClient(endpoint));\n}\n","// Quick hack: copied sdk.ts & subgraph.ts from provided bot repository https://github.com/avantgardefinance/enzyme-bot\nimport { gql } from './sdk';\nimport { AssetsQuery, FundsQuery, Release } from './subgraph';\n\nconst prodEndpoint = 'https://api.thegraph.com/subgraphs/name/enzymefinance/enzyme';\nconst kovanEndpoint = 'https://api.thegraph.com/subgraphs/name/enzymefinance/enzyme-kovan';\n\nconst endpoint = (prod: boolean) => (prod ? prodEndpoint : kovanEndpoint);\n\nexport async function getTokens(prod: boolean): Promise<AssetsQuery> {\n  const result = await gql(endpoint(prod)).assets();\n  return result;\n}\n\nexport async function getFunds(prod: boolean, account: string): Promise<FundsQuery> {\n  // address needs to be put in as lowercase\n  let address = account.toLowerCase();\n  if (address == '0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097'.toLowerCase()) {\n    // hardhat test address, return the vaults of the user that we impersonated\n    address = '0xb3f8d948b26c4805f945c01fab023c4c8a6efef2';\n  }\n  const result = await gql(endpoint(prod)).funds({ id: address });\n  return result;\n}\n\nexport async function getContracts(): Promise<Release> {\n  const result = await gql(endpoint(true)).currentReleaseContracts();\n  if (!result.network || !result.network.currentRelease) {\n    throw \"gql query didn't contain network\";\n  }\n  return result.network.currentRelease as Release;\n}\n","import { ExternalProvider } from '@ethersproject/providers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { reactive, readonly } from '@vue/reactivity';\nimport { ethers, utils, Signer } from 'ethers';\n\nexport type Provider = ethers.providers.Web3Provider;\n\nasync function getProvider(): Promise<ExternalProvider> {\n  const ethProvider = (await detectEthereumProvider({\n    timeout: 1000,\n  })) as ExternalProvider;\n  const ethereum = window.ethereum as ExternalProvider | undefined;\n\n  let provider = null;\n  if (ethProvider) {\n    if (ethProvider !== ethereum) {\n      console.error('Do you have multiple wallets installed?');\n    }\n    console.log('Returning web3 based on metamask detection');\n    provider = ethProvider;\n  }\n  if (ethereum) {\n    console.log('Returning web3 based on window.ethereum');\n    provider = ethereum;\n  }\n  if (!provider) {\n    throw Error('No ethereum accounts found, install metamask or brave crypto wallet');\n  }\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    await provider.request!({ method: 'eth_requestAccounts' });\n  } catch (err) {\n    console.log(err);\n    if (err.message && err.message.includes('rejected')) {\n      throw err;\n    }\n    // Try ethereum.enable as fallback\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      await (provider as unknown as any).enable();\n    } catch (err) {\n      console.log(\"enable also didn't work\", err);\n      throw err;\n    }\n  }\n  return provider;\n}\n\nexport interface Web3Status {\n  initializing: boolean;\n  connected?: boolean;\n  providerPresent: boolean;\n  lastErrorMessage?: string;\n  network?: string;\n  chainId?: number;\n  address?: string;\n  balance?: string;\n}\n\nclass Web3Service {\n  private externalProvider?: ExternalProvider;\n  private provider?: Provider;\n  private signer?: Signer;\n  private state: Web3Status = reactive({\n    initializing: true,\n    providerPresent: false,\n  }) as Web3Status;\n  private copy = readonly(this.state);\n  private intervalHandler?: number;\n\n  public getProvider(): Provider {\n    if (!this.provider) {\n      throw 'Provider not initialized';\n    }\n    return this.provider;\n  }\n  public getExternalProvider(): ExternalProvider {\n    if (!this.externalProvider) {\n      throw 'Provider not initialized';\n    }\n    return this.externalProvider;\n  }\n\n  public getSigner(): Signer {\n    if (!this.signer) {\n      throw 'Signer not initialized';\n    }\n    return this.signer;\n  }\n\n  public status(): Web3Status {\n    return this.copy;\n  }\n\n  public isMainnet(): boolean {\n    return this.state.network !== 'kovan';\n  }\n\n  private async updateData() {\n    if (this.provider !== undefined) {\n      this.state.providerPresent = true;\n      try {\n        await this.provider.getBlock('latest');\n      } catch (err) {\n        if (err instanceof Error) {\n          if (err.message.includes('underlying network changed')) {\n            // network changed, reconnect metamask\n            this.init();\n            return;\n          }\n        }\n        console.log(err);\n        return;\n      }\n      const network = await this.provider.getNetwork();\n      this.state.network = network.name;\n      this.state.chainId = network.chainId;\n      const accounts = await this.provider.listAccounts();\n      this.state.connected = accounts.length > 0;\n      if (accounts.length > 0) {\n        this.state.address = accounts[0];\n        this.state.balance = utils.formatEther(await this.provider.getBalance(accounts[0]));\n      }\n    } else {\n      this.state.providerPresent = false;\n      console.log('no web3');\n    }\n  }\n\n  public init(errorCallback?: (message: string) => void) {\n    if (!this.state.connected) {\n      this.state.initializing = true;\n    }\n    this.state.lastErrorMessage = undefined;\n    return getProvider()\n      .then(async (externalProvider) => {\n        this.externalProvider = externalProvider;\n        const provider = new ethers.providers.Web3Provider(externalProvider);\n        this.provider = provider;\n        this.signer = await this.provider.getSigner();\n        if (this.intervalHandler === undefined) {\n          this.intervalHandler = window.setInterval(() => this.updateData(), 2000);\n        }\n        await this.updateData();\n      })\n      .catch((error) => {\n        console.log(error);\n        this.state.lastErrorMessage = error.message;\n        if (errorCallback) {\n          errorCallback(error.message);\n        }\n      })\n      .finally(() => (this.state.initializing = false));\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function extractErrorMessage(error: any): string {\n  let message = error;\n  if (error['message']) {\n    message = error['message'];\n  }\n  if (message === 'Internal JSON-RPC error.') {\n    // Try to get more useful message from metamask object\n    const alternativeMessage = error.data?.message;\n    if (alternativeMessage) {\n      message = alternativeMessage;\n    }\n  }\n  return message;\n}\n\nconst web3Service = new Web3Service();\n\nexport { web3Service };\n","import { getContracts, getFunds } from '@/data/enzymegraph';\nimport { Release } from '@/data/subgraph';\nimport {\n  callOnIntegrationArgs,\n  ComptrollerLib,\n  IntegrationManagerActionId,\n  takeOrderSelector,\n  uniswapV2TakeOrderArgs,\n} from '@enzymefinance/protocol';\nimport { BigNumber } from 'ethers';\nimport { reactive, readonly, watch } from 'vue';\nimport { TransactionResult } from './uniswapService';\nimport { web3Service } from './web3Service';\n\nexport interface Fund {\n  id: string;\n  name: string;\n  comptrollerAddress: string;\n}\n\nexport interface EnzymeStatus {\n  funds: readonly Fund[];\n  selectedFund: Fund | null;\n  contracts: Promise<Release>;\n}\n\nclass EnzymeService {\n  private state: EnzymeStatus = reactive({\n    funds: [],\n    selectedFund: null,\n    contracts: getContracts(),\n  }) as EnzymeStatus;\n  private copy = readonly(this.state);\n\n  public status(): EnzymeStatus {\n    return this.copy as EnzymeStatus;\n  }\n\n  constructor() {\n    watch(\n      () => [web3Service.status().address, web3Service.status().network],\n      () => {\n        const addr = web3Service.status().address;\n        console.log(`Reinitializing enzyme vaults with ${addr}`);\n        if (addr) {\n          getFunds(web3Service.isMainnet(), addr).then((funds) => {\n            console.log(`Result from enzyme`, funds);\n            this.state.funds = funds.funds.map((fund) => ({\n              id: fund.id,\n              name: fund.name,\n              comptrollerAddress: fund.accessor.id,\n            }));\n            this.selectFundIfNeeded();\n          });\n        }\n      }\n    );\n  }\n\n  private selectFundIfNeeded() {\n    if (\n      this.state.selectedFund == null ||\n      this.state.funds.every((fund) => fund.id !== this.state.selectedFund?.id)\n    ) {\n      if (this.state.funds.length == 1) {\n        this.state.selectedFund = this.state.funds[0];\n      } else {\n        this.state.selectedFund = null;\n      }\n    }\n  }\n\n  public selectFund(fund: Fund) {\n    this.state.selectedFund = fund;\n  }\n\n  public getFunds(): Fund[] {\n    return [...this.state.funds];\n  }\n\n  public async executeUniswapV2Trade(\n    route: string[],\n    minIncomingAsset: BigNumber,\n    minOutgoinAsset: BigNumber\n  ): Promise<TransactionResult> {\n    const selectedFund = this.state.selectedFund;\n    if (!selectedFund) {\n      return { message: 'no enzyme fund selected', success: false };\n    }\n    const contracts = await this.state.contracts;\n    const adapterAddress = contracts.uniswapV2Adapter;\n    const integrationAddress = contracts.integrationManager;\n\n    const orderArgs = uniswapV2TakeOrderArgs({\n      path: route,\n      minIncomingAssetAmount: minIncomingAsset,\n      outgoingAssetAmount: minOutgoinAsset,\n    });\n    const callArgs = callOnIntegrationArgs({\n      adapter: adapterAddress,\n      selector: takeOrderSelector,\n      encodedCallArgs: orderArgs,\n    });\n\n    const contract = new ComptrollerLib(selectedFund.comptrollerAddress, web3Service.getSigner());\n    const transaction = contract.callOnExtension.args(\n      integrationAddress,\n      IntegrationManagerActionId.CallOnIntegration,\n      callArgs\n    );\n    const receipt = await transaction.send();\n    return { message: `Transaction sent with hash ${receipt.transactionHash}`, success: true };\n  }\n}\n\nconst enzymeService = new EnzymeService();\n\nexport { enzymeService };\n","\nimport { defineComponent, Ref, ref, watchEffect } from 'vue';\nimport { enzymeService } from './web3/enzymeService';\nimport { web3Service } from './web3/web3Service';\n\nexport default defineComponent({\n  setup() {\n    const state = web3Service.status();\n    // Weird, the menu only seems to work when items is a ref (not when it's a computed function)\n    const items: Ref<any[]> = ref([]);\n    watchEffect(() => {\n      let walletLabel = 'Wallet...';\n      const address = state.address;\n      if (address) {\n        walletLabel = `Wallet 0x${address.substr(0, 6)}...${address.substr(address.length - 6)}`;\n      }\n      const funds = enzymeService.getFunds();\n      let enzymeItems = [];\n      if (funds.length == 0) {\n        enzymeItems.push({ label: 'No enzyme funds' });\n      } else {\n        enzymeItems = funds.map((fund) => ({\n          label: fund.name,\n          icon: 'pi pi-money-bill',\n          to: { name: 'EnzymeAccount', params: { account: fund.id } },\n        }));\n      }\n\n      items.value = [\n        {\n          label: walletLabel,\n          icon: 'pi pi-wallet',\n          to: { name: 'WalletAccount' },\n        },\n        {\n          label: 'Enzyme vaults',\n          icon: 'pi pi-money-bill',\n          items: enzymeItems,\n        },\n      ];\n    });\n    return { state, items };\n  },\n});\n","import { render } from \"./App.vue?vue&type=template&id=637b801c&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=ts\"\nexport * from \"./App.vue?vue&type=script&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&id=637b801c&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-637b801c\"\n\nexport default script","<template>\n  <div v-if=\"fund\">\n    <h2>{{ fund.name }}</h2>\n    <div class=\"row\">\n      <!-- bit little space maybe to put these two panels next to eachother, \n        alternative may be TabView: https://www.primefaces.org/primevue/showcase/#/tabview -->\n      <div class=\"col\">\n        <EnzymeSliders />\n      </div>\n      <div class=\"col\" v-if=\"showFarming\">\n        <FarmingStrategy />\n      </div>\n    </div>\n  </div>\n  <div v-else>Loading...</div>\n</template>\n\n<script lang=\"ts\">\nimport { enzymeService } from '@/web3/enzymeService';\nimport { computed, defineComponent, watchEffect } from 'vue';\nimport EnzymeSliders from './EnzymeSliders.vue';\nimport FarmingStrategy from './FarmingStrategy.vue';\nimport { useRoute } from 'vue-router';\n\nexport default defineComponent({\n  props: {\n    account: String,\n  },\n  setup(props) {\n    watchEffect(() => {\n      const selectedFund = props.account;\n      const availableFunds = enzymeService.status().funds;\n      if (selectedFund) {\n        const fund = availableFunds.find(\n          (fund) => fund.id.toLowerCase() == selectedFund.toLowerCase()\n        );\n        if (fund) {\n          enzymeService.selectFund(fund);\n        }\n      }\n    });\n    return {\n      fund: computed(() => enzymeService.status().selectedFund),\n      showFarming: useRoute().query.farming ?? false,\n    };\n  },\n  components: { EnzymeSliders, FarmingStrategy },\n});\n</script>\n","<template>\n  <div>\n    <h3>Asset distribution</h3>\n    {{ distributionText }}\n    <button class=\"btn btn-primary float-end\" @click=\"plan\" v-if=\"orderVisible\">Execute</button>\n    <div>\n      <SliderPanel :tokenData=\"tokens\" v-model=\"distribution\" />\n    </div>\n    <OrderPlanDialog v-model:visible=\"displayPlan\" :orderPlan=\"orderPlan\" :isEnzyme=\"true\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport OrderPlanDialog from '@/components/OrderPlanDialog.vue';\nimport SliderPanel from '@/components/SliderPanel.vue';\nimport { getTokens } from '@/data/enzymegraph';\nimport { defaultOrderPlanner, PlannedOrder } from '@/orderplan/orderplan';\nimport { calcSliderChangeResult } from '@/util/sliderUtil';\nimport { fetchTokens } from '@/util/tokenlist';\nimport { calcPercentageMap, TokenData } from '@/util/tokens';\nimport { enzymeService, Fund } from '@/web3/enzymeService';\nimport { Provider, web3Service } from '@/web3/web3Service';\nimport { StandardToken, VaultLib } from '@enzymefinance/protocol';\nimport { asyncComputed } from '@vueuse/core';\nimport { BigNumber, FixedNumber } from 'ethers';\nimport { computed, defineComponent, Ref, ref, watchEffect } from 'vue';\n\nasync function trackAssets(\n  address: string,\n  provider: Provider\n): Promise<Record<string, BigNumber>> {\n  const lib = new VaultLib(address, web3Service.getProvider());\n  const holdings = await lib.getTrackedAssets();\n  const tokenMap: Record<string, BigNumber> = {};\n  await Promise.all(\n    holdings.map((token) => {\n      const tokenContract = new StandardToken(token, provider);\n      return tokenContract.balanceOf\n        .args(address)\n        .call()\n        .then((value) => (tokenMap[token.toLowerCase()] = value));\n    })\n  );\n  return tokenMap;\n}\n\nexport default defineComponent({\n  name: 'EnzymeSliders',\n  setup() {\n    // TODO: if we keep using this, add a filtering textbox to quickly filter on substring of names as\n    // there are very many tokens listed.\n    const partialTokens: Ref<TokenData[]> = asyncComputed(async () => {\n      const tokenRequestResult = await getTokens(web3Service.isMainnet());\n      const tokenInfoMap = new Map(\n        (await fetchTokens()).map((token) => [token.address.toLowerCase(), token])\n      );\n      const asTokenData: TokenData[] = tokenRequestResult.assets\n        // not sure why, the bot example code also filters for this\n        .filter((asset) => !asset.derivativeType)\n        .map((asset) => ({\n          id: asset.id.toLowerCase(),\n          name: asset.name,\n          symbol: asset.symbol,\n          value: parseFloat(asset.price?.price ?? '-1'),\n          ownedAmount: FixedNumber.from('0'),\n          decimals: asset.decimals,\n          logoUri:\n            tokenInfoMap.get(asset.id.toLowerCase())?.logoURI ??\n            `https://cryptoicon-api.vercel.app/api/icon/${asset.symbol.toLowerCase()}`,\n        }));\n      return asTokenData;\n    });\n\n    const tokens: Ref<TokenData[]> = ref([]);\n    const distribution: Ref<Record<string, number>> = ref({});\n    const startingDistribution: Ref<Record<string, number>> = ref({});\n\n    const funds = computed(() => enzymeService.getFunds());\n    const selectFund = (fund: Fund) => enzymeService.selectFund(fund);\n\n    watchEffect(async () => {\n      const fund = enzymeService.status().selectedFund;\n      const tokenList = partialTokens.value;\n      if (tokenList) {\n        if (fund) {\n          const assetMap = await trackAssets(fund.id, web3Service.getProvider());\n          const daiValue = tokenList.find((token) => token.symbol == 'DAI')?.value ?? 1.0;\n          tokens.value = tokenList\n            .map((token) => {\n              let value = token.value / daiValue;\n              if (value < 0) {\n                // TODO: look up value on uniswap\n                value = 1.0;\n              }\n              let owned = token.ownedAmount;\n              const ownedBigNumber = assetMap[token.id];\n              if (ownedBigNumber) {\n                owned = FixedNumber.fromValue(ownedBigNumber, token.decimals);\n              }\n              return {\n                ...token,\n                ownedAmount: owned,\n                value: value,\n              };\n            })\n            .sort(\n              (a, b) =>\n                b.value * b.ownedAmount.toUnsafeFloat() - a.value * a.ownedAmount.toUnsafeFloat()\n            );\n          distribution.value = calcPercentageMap(tokens.value);\n          startingDistribution.value = Object.assign({}, distribution.value);\n        } else {\n          tokens.value = tokenList;\n        }\n      }\n    });\n\n    const orderVisible = ref(false);\n    const distributionText = ref('');\n    watchEffect(() => {\n      const result = calcSliderChangeResult(distribution.value, startingDistribution.value);\n      orderVisible.value = result.hasChanges;\n      distributionText.value = result.message;\n    });\n\n    const displayPlan = ref(false);\n    const orderPlan: Ref<PlannedOrder[]> = ref([]);\n\n    const plan = () => {\n      orderPlan.value = defaultOrderPlanner.createPlan(tokens.value, distribution.value);\n      displayPlan.value = true;\n    };\n    return {\n      tokens,\n      distribution,\n      funds,\n      state: web3Service.status(),\n      selectFund,\n      enzymeState: enzymeService.status(),\n      distributionText,\n      plan,\n      displayPlan,\n      orderPlan,\n      orderVisible,\n    };\n  },\n  components: { SliderPanel, OrderPlanDialog },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.selected {\n  color: #333;\n  text-decoration: none;\n}\n</style>\n","<template>\n  <Dialog\n    header=\"Order plan\"\n    :visible=\"visible\"\n    @update:visible=\"$emit('update:visible', $event)\"\n    class=\"order-dialog\"\n  >\n    <table class=\"table table-sm\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Amount</th>\n          <th scope=\"col\">From</th>\n          <th scope=\"col\"></th>\n          <th scope=\"col\">To</th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody>\n        <template v-for=\"order in orderList\" v-bind:key=\"order.sendAmount + order.fromToken.name\">\n          <tr class=\"align-middle\" :class=\"{ 'table-success': order.success }\">\n            <td>{{ formatMaxDigits(order.sendAmount.toUnsafeFloat()) }}</td>\n            <td>\n              <img\n                v-if=\"order.fromToken.logoUri\"\n                :src=\"order.fromToken.logoUri\"\n                class=\"token-img me-2\"\n              />\n              {{ fromName(order) }}\n            </td>\n            <td>➜</td>\n            <td>\n              <img\n                v-if=\"order.toToken.logoUri\"\n                :src=\"order.toToken.logoUri\"\n                class=\"token-img me-2\"\n              />\n              {{ toName(order) }}\n            </td>\n            <td class=\"text-center\">\n              <img\n                v-if=\"order.chosenPlatform\"\n                :src=\"platformLogo(order.chosenPlatform)\"\n                class=\"platform-img me-2\"\n              />\n              <i class=\"pi pi-spin pi-spinner\" v-if=\"order.inProgress\" />\n              <i v-else-if=\"order.success\" class=\"pi pi-check\" style=\"fontsize: 2rem\" />\n              <span v-else>\n                <button\n                  v-if=\"!isEnzyme && !order.options && isSwap(order)\"\n                  class=\"btn btn-primary me-2\"\n                  @click=\"calculateBest(order)\"\n                >\n                  Options <i class=\"pi pi-angle-double-down\" />\n                </button>\n                <button class=\"btn btn-primary\" @click=\"execute(order)\">\n                  {{ executeButtonText(order) }}\n                </button>\n              </span>\n            </td>\n          </tr>\n          <tr v-if=\"order.options && !order.success\">\n            <td colspan=\"5\">\n              <div v-for=\"option in order.options\" v-bind:key=\"option.platform\" class=\"row\">\n                <div class=\"col-3 my-auto\">\n                  <img :src=\"platformLogo(option.platform)\" class=\"platform-img\" />\n                  {{ option.platform }}\n                </div>\n                <div v-if=\"option.inProgress\" class=\"col-9 text-center my-auto\">\n                  <i class=\"pi pi-spin pi-spinner\" />\n                </div>\n                <template v-else>\n                  <div class=\"col-6 my-auto\">{{ formatResult(order, option) }}</div>\n                  <div class=\"col-3 my-auto\">\n                    <button\n                      v-if=\"option.plan\"\n                      class=\"btn btn-primary m-1\"\n                      @click=\"execute(order, option.platform, option.plan)\"\n                    >\n                      Execute\n                    </button>\n                  </div>\n                </template>\n              </div>\n            </td>\n          </tr>\n          <tr v-if=\"!order.success && order.message\" class=\"table-danger\">\n            <td colspan=\"5\" class=\"text-end\">\n              {{ order.message }}\n            </td>\n          </tr>\n        </template>\n      </tbody>\n    </table>\n  </Dialog>\n</template>\n\n<script lang=\"ts\">\nimport { PlannedOrder, OrderType } from '@/orderplan/orderplan';\nimport {\n  bigNumberToFixed,\n  compareBignumber,\n  fixedToBigNumber,\n  formatMaxDigits,\n  numberMixin,\n  toleranceMin,\n} from '@/util/numbers';\nimport { getTokenBalance } from '@/util/tokens';\nimport { idleService } from '@/web3/idleService';\nimport { ParaSwapPredictedOutput, paraswapService, PredictedOutput } from '@/web3/paraswapService';\nimport { TransactionResult, uniswapService } from '@/web3/uniswapService';\nimport { extractErrorMessage, web3Service } from '@/web3/web3Service';\nimport { defineComponent, PropType, reactive, ref, Ref, watchEffect } from 'vue';\n\ninterface TransactionInProgress {\n  inProgress?: boolean;\n}\ninterface Option {\n  platform: string;\n  inProgress: boolean;\n  message?: string;\n  plan?: PredictedOutput;\n}\ninterface OrderOptions {\n  options?: Option[];\n  chosenPlatform?: string;\n}\ntype OrderWithResult = PlannedOrder &\n  Partial<TransactionResult> &\n  TransactionInProgress &\n  OrderOptions;\n\nexport default defineComponent({\n  name: 'OrderPlanDialog',\n  props: {\n    visible: Boolean,\n    orderPlan: { type: Object as PropType<PlannedOrder[]>, required: true },\n    isEnzyme: Boolean,\n  },\n  emits: ['update:visible'],\n  setup(props) {\n    const orderList: Ref<OrderWithResult[]> = ref([]);\n    watchEffect(() => {\n      orderList.value = props.orderPlan.map((order) => ({\n        ...order,\n        chosenPlatform: order.ordertype == OrderType.SWAP ? undefined : 'idle',\n      }));\n      console.log(props.orderPlan, orderList.value);\n    });\n    return { orderList };\n  },\n  methods: {\n    async calculateBest(order: OrderWithResult) {\n      const address = web3Service.status().address;\n      if (!address) {\n        throw new Error('web3 not initialized yet');\n      }\n      const uniswapOption: Option = reactive({\n        platform: 'Uniswap',\n        inProgress: true,\n      });\n      const paraswapOption: Option = reactive({\n        platform: 'Paraswap',\n        inProgress: true,\n      });\n      order.options = [uniswapOption, paraswapOption];\n      await this.prepareOrder(order, address);\n      const uniswapOutput = uniswapService.getPredictedOutput(order).then((output) => {\n        console.log('output uniswap: ', output);\n        uniswapOption.inProgress = false;\n        uniswapOption.plan = output;\n      });\n      const paraswapOutput = paraswapService.getPredictedOutput(order).then((output) => {\n        console.log('output paraswap: ', output);\n        paraswapOption.inProgress = false;\n        paraswapOption.plan = output;\n      });\n      await Promise.all([uniswapOutput, paraswapOutput]);\n      order.options.sort((a, b) => {\n        if (a.plan !== undefined && b.plan !== undefined) {\n          return -compareBignumber(a.plan.predictedOutput, b.plan.predictedOutput);\n        } else if (a.plan === undefined) {\n          if (b.plan === undefined) {\n            return 0;\n          } else {\n            return 1;\n          }\n        } else {\n          return -1;\n        }\n      });\n    },\n    async execute(order: OrderWithResult, platform?: string, plan?: PredictedOutput) {\n      order.inProgress = true;\n      order.message = undefined;\n      try {\n        const address = web3Service.status().address;\n        if (!address) {\n          throw new Error('connect wallet first');\n        }\n\n        let executeFunction: (arg: PlannedOrder) => Promise<TransactionResult>;\n        if (this.$props.isEnzyme) {\n          executeFunction = (order) => uniswapService.executeForEnzyme(order);\n        } else if (order.ordertype == OrderType.DEPOSIT) {\n          executeFunction = (order) =>\n            idleService.depositToken(order.fromToken, address, order.sendAmount);\n        } else if (order.ordertype == OrderType.REDEEM) {\n          executeFunction = (order) =>\n            idleService.redeemToken(order.fromToken, address, order.sendAmount);\n        } else {\n          await this.prepareOrder(order, address);\n          if (platform === undefined) {\n            // work on a copy so we keep the UI clean\n            const copy = { ...order };\n            await this.calculateBest(copy);\n            if (!copy.options || !copy.options[0]?.plan) {\n              throw new Error('No suitable option');\n            }\n            platform = copy.options[0].platform;\n            plan = copy.options[0].plan;\n            console.log(`${platform} selected as best: ${plan.predictedOutput.toString()}`);\n          }\n          switch (platform) {\n            case 'Uniswap':\n              executeFunction = (order) => uniswapService.execute(order);\n              break;\n            case 'Paraswap':\n              executeFunction = (order) =>\n                paraswapService.execute(order, plan as ParaSwapPredictedOutput);\n              break;\n            default:\n              throw new Error('Unknown platform: ' + platform);\n          }\n          order.chosenPlatform = platform;\n        }\n        const result = await executeFunction(order);\n        Object.assign(order, result);\n      } catch (error) {\n        console.log(error);\n        let message = extractErrorMessage(error);\n        order.success = false;\n        order.message = message;\n      } finally {\n        order.inProgress = false;\n      }\n    },\n    platformLogo(platform: string): string {\n      return require('@/assets/' + platform.toLowerCase() + '.png');\n    },\n    formatResult(order: PlannedOrder, option: Option): string {\n      const result = option.plan?.predictedOutput;\n      if (result === undefined) {\n        return '---';\n      }\n      const fixed = bigNumberToFixed(result, order.toToken.decimals);\n      return order.toToken.symbol + ' ' + formatMaxDigits(fixed.toUnsafeFloat());\n    },\n    isSwap(order: PlannedOrder): boolean {\n      return order.ordertype == OrderType.SWAP;\n    },\n    executeButtonText(order: PlannedOrder): string {\n      if (order.ordertype == OrderType.SWAP && !this.isEnzyme) {\n        return 'Execute best';\n      } else {\n        return 'Execute';\n      }\n    },\n    fromName(order: PlannedOrder): string {\n      const name = order.fromToken.name;\n      if (order.ordertype == OrderType.REDEEM) {\n        return 'Idle' + order.fromToken.symbol;\n      } else {\n        return name;\n      }\n    },\n    toName(order: PlannedOrder): string {\n      const name = order.toToken.name;\n      if (order.ordertype == OrderType.DEPOSIT) {\n        return 'Idle' + order.fromToken.symbol;\n      } else {\n        return name;\n      }\n    },\n    async prepareOrder(order: PlannedOrder, address: string) {\n      // Make sure that the amount wanted is not higher than our balance\n      const balance = await getTokenBalance(order.fromToken.id, address);\n      const amountBn = fixedToBigNumber(order.sendAmount, order.fromToken.decimals);\n      const newAmount = toleranceMin(amountBn, balance);\n      order.sendAmount = bigNumberToFixed(newAmount, order.fromToken.decimals);\n    },\n  },\n  mixins: [numberMixin],\n});\n</script>\n\n<style lang=\"scss\">\n.order-dialog {\n  min-width: 30vw;\n}\n</style>\n","// Utilities to work with FixedNumber, because it seems hard to do it directly.\nimport { utils, FixedNumber, BigNumber } from 'ethers';\n\nexport function fixedNum(n: number): FixedNumber {\n  // This is the best way I could find, passing in number directly seems to always gives \"underflow\" error\n  return FixedNumber.from(reduceDecimalString(n.toString(), 18));\n}\n\nfunction reduceDecimalString(value: string, decimals: number): string {\n  const parts = value.split('.');\n  if (parts.length === 1 || parts[1].length <= decimals) {\n    return value;\n  }\n  return parts[0] + '.' + parts[1].substr(0, decimals);\n}\n\n/**\n * Make sure amount is lower than balance, as long as it's maximum tolerance x higher.\n * We frequently try to e.g. sell all tokens and this amount may be dependent on an earlier trade\n * that may have executed at a less favorable rate than expected.\n * This will then cause trades to fail because the requested amount is a tiny bit too high, this fixes that.\n *\n * The tolerance is there to not just reduce some crazy high amount back to balance, but that we still\n * get an error then, because probably there's some bug or other problem happening.\n */\nexport function toleranceMin(amount: BigNumber, balance: BigNumber, tolerance = 0.1): BigNumber {\n  if (amount.lte(balance)) {\n    return amount;\n  }\n  // Check if amount is within tolerance\n  const toleranceAmount = fixedToBigNumber(\n    bigNumberToFixed(balance, 18).mulUnsafe(fixedNum(1 + tolerance)),\n    18\n  );\n  if (amount.gt(toleranceAmount)) {\n    throw new Error(`Amount ${amount.toString()} much bigger than balance ${balance.toString()}`);\n  }\n  console.log(\n    `Downwards adjusting number from ${bigNumberToFixed(amount, 18)} to ${bigNumberToFixed(\n      balance,\n      18\n    )}`\n  );\n  return balance;\n}\n\nexport function compareFixed(a: FixedNumber, b: FixedNumber): number {\n  const bn1 = fixedToBigNumber(a, 18);\n  const bn2 = fixedToBigNumber(b, 18);\n  return compareBignumber(bn1, bn2);\n}\n\nexport function compareBignumber(bn1: BigNumber, bn2: BigNumber): number {\n  if (bn1.gt(bn2)) {\n    return 1;\n  } else if (bn1.eq(bn2)) {\n    return 0;\n  } else {\n    return -1;\n  }\n}\n\nexport function reduceDecimals(n: FixedNumber, decimals: number): FixedNumber {\n  const stringRep = n.toString();\n  return FixedNumber.fromString(reduceDecimalString(stringRep, decimals), decimals);\n}\n\nexport function fixedToBigNumber(n: FixedNumber, decimals: number): BigNumber {\n  return utils.parseUnits(n.toString(), decimals);\n}\nexport function bigNumberToFixed(n: BigNumber, decimals: number): FixedNumber {\n  return FixedNumber.from(utils.formatUnits(n, decimals), decimals);\n}\n\nexport function formatMaxDigits(n: number, digits = 2): string {\n  if (n === undefined) {\n    return '---';\n  }\n  return reduceDecimalString(n.toString(), digits);\n}\n\nexport const numberMixin = {\n  methods: {\n    formatMaxDigits(n: number, digits = 2): string {\n      return formatMaxDigits(n, digits);\n    },\n    formatDollars(n: number, maxDigits = 2): string {\n      return '$ ' + formatMaxDigits(n, maxDigits);\n    },\n    formatDollarPrice(n: number): string {\n      if (n === undefined) {\n        return '---';\n      }\n      if (n >= 10) {\n        return this.formatDollars(n);\n      } else if (n >= 1) {\n        return this.formatDollars(n, 3);\n      } else if (n < 1e-8) {\n        return '<< 0.001';\n      } else {\n        let k = 1,\n          digits = 0;\n        while (k > n) {\n          k /= 10;\n          digits++;\n        }\n        return '$ ' + formatMaxDigits(n, digits + 2);\n      }\n    },\n  },\n};\n","import { TokenData } from '@/util/tokens';\nimport { FixedNumber } from 'ethers';\nimport { fixedNum } from '@/util/numbers';\n\nexport enum OrderType {\n  SWAP,\n  DEPOSIT,\n  REDEEM,\n}\n\nexport interface PlannedOrder {\n  fromToken: TokenData;\n  toToken: TokenData;\n  sendAmount: FixedNumber;\n  ordertype: OrderType;\n}\n\nexport interface OrderPlanCreator {\n  createPlan(\n    currentPortfolio: TokenData[],\n    desiredDistribution: Record<string, number>\n  ): PlannedOrder[];\n}\n\n/**\n * Very simple order plan: reduced tokens are sold to give inbetweenCurrency (typically WETH),\n * increased tokens are bought using the in between currency.\n */\nclass SimpleOrderPlanCreator implements OrderPlanCreator {\n  private inbetweenCurrency: string;\n\n  constructor(inbetweenCurrency: string) {\n    this.inbetweenCurrency = inbetweenCurrency;\n  }\n\n  createPlan(\n    currentPortfolio: TokenData[],\n    desiredDistribution: Record<string, number>\n  ): PlannedOrder[] {\n    const orders: PlannedOrder[] = [];\n\n    // Find the inbetweenCurrency\n    const switchTokenData = currentPortfolio.find(\n      (token) => token.id == this.inbetweenCurrency || token.name == this.inbetweenCurrency\n    );\n    if (!switchTokenData) {\n      throw 'currentPortfolio must contain inbetweenCurrency data';\n    }\n\n    // Generate orders for all differences > 0.2%\n    const DIFFERENCE_THRESHOLD = 0.2 / 100;\n\n    let totalValue = 0.0;\n    currentPortfolio.forEach((token) => {\n      totalValue += token.ownedAmount.toUnsafeFloat() * token.value;\n    });\n\n    let valueSold = 0.0;\n\n    const buyOrders: PlannedOrder[] = [];\n    let valueBought = 0.0;\n    // Check what we can sell\n    currentPortfolio.forEach((token) => {\n      const currentFraction = (token.ownedAmount.toUnsafeFloat() * token.value) / totalValue;\n      const desiredFraction = (desiredDistribution[token.id] ?? 0.0) / 100;\n      if (currentFraction - desiredFraction > DIFFERENCE_THRESHOLD) {\n        const sellFraction = currentFraction - desiredFraction;\n        valueSold += sellFraction * totalValue;\n        let amount = fixedNum((sellFraction * totalValue) / token.value);\n        if (desiredFraction < 1e-6) {\n          amount = token.ownedAmount;\n        }\n        if (token.id != switchTokenData.id) {\n          orders.push({\n            fromToken: token,\n            toToken: switchTokenData,\n            sendAmount: amount,\n            ordertype: OrderType.SWAP,\n          });\n        }\n      } else if (currentFraction - desiredFraction < -DIFFERENCE_THRESHOLD) {\n        const buyFraction = desiredFraction - currentFraction;\n        valueBought += buyFraction * totalValue;\n        if (token.id != switchTokenData.id) {\n          buyOrders.push({\n            fromToken: switchTokenData,\n            toToken: token,\n            sendAmount: fixedNum((buyFraction * totalValue) / switchTokenData.value),\n            ordertype: OrderType.SWAP,\n          });\n        }\n      }\n    });\n\n    if (\n      valueBought >=\n      valueSold + switchTokenData.ownedAmount.toUnsafeFloat() * switchTokenData.value\n    ) {\n      // We're trying to buy more than that we're selling (could be that some sell orders\n      // don't happen because of the threshold)\n      // Adjust the buys down so we can execute them all\n      const adjustMultiplier =\n        ((valueSold + switchTokenData.ownedAmount.toUnsafeFloat() * switchTokenData.value) * 0.99) /\n        valueBought;\n      buyOrders.forEach((order) => {\n        orders.push({\n          ...order,\n          sendAmount: order.sendAmount.mulUnsafe(fixedNum(adjustMultiplier)),\n        });\n      });\n    } else {\n      orders.push(...buyOrders);\n    }\n\n    return orders;\n  }\n}\n\nexport const defaultOrderPlanner: OrderPlanCreator = new SimpleOrderPlanCreator('Wrapped Ether');\n","import { web3Service } from '@/web3/web3Service';\nimport { BigNumber, Contract, FixedNumber, ethers } from 'ethers';\n\nexport interface TokenData {\n  id: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  ownedAmount: FixedNumber;\n  value: number;\n  logoUri?: string;\n}\n\nexport function calcPercentageMap(tokenData: TokenData[]): Record<string, number> {\n  const percentageMap: Record<string, number> = {};\n  let totalValue = 0.0;\n  for (const token of tokenData) {\n    totalValue += token.ownedAmount.toUnsafeFloat() * token.value;\n  }\n  if (totalValue > 0) {\n    for (const token of tokenData) {\n      if (token.ownedAmount.toUnsafeFloat() > 0) {\n        const valuePart = (token.ownedAmount.toUnsafeFloat() * token.value) / totalValue;\n        percentageMap[token.id] = Math.round(valuePart * 100.0 * 10) / 10;\n      }\n    }\n  }\n  return percentageMap;\n}\n\nexport async function getTokenBalance(\n  contractAddress: string,\n  address: string\n): Promise<BigNumber> {\n  const provider = web3Service.getProvider();\n  const abi = ['function balanceOf(address owner) view returns (uint256)'];\n  const contract = new Contract(contractAddress, abi, provider);\n  return contract.balanceOf(address);\n}\n\nexport async function getTokenAllowance(\n  tokenAddress: string,\n  accountAddress: string,\n  spenderAddress: string\n): Promise<BigNumber> {\n  const provider = web3Service.getProvider();\n  const abi = [\n    'function allowance(address owner, address spender) external view returns (uint256)',\n  ];\n  const contract = new Contract(tokenAddress, abi, provider);\n  return contract.allowance(accountAddress, spenderAddress);\n}\n\nexport async function tokenApprove(\n  tokenAddress: string,\n  spenderAddress: string,\n  amount: BigNumber\n): Promise<ethers.ContractTransaction> {\n  const signer = web3Service.getSigner();\n  const abi = ['function approve(address spender, uint256 amount) external returns (bool)'];\n  const contract = new Contract(tokenAddress, abi, signer);\n  return contract.approve(spenderAddress, amount);\n}\n","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: any;\n  BigInt: any;\n  Bytes: any;\n};\n\n\n\n\n\n\nexport type Block_Height = {\n  hash?: Maybe<Scalars['Bytes']>;\n  number?: Maybe<Scalars['Int']>;\n};\n\nexport type Bundle = {\n  __typename?: 'Bundle';\n  id: Scalars['ID'];\n  ethPriceUSD: Scalars['BigDecimal'];\n};\n\nexport type Bundle_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  ethPriceUSD?: Maybe<Scalars['BigDecimal']>;\n  ethPriceUSD_not?: Maybe<Scalars['BigDecimal']>;\n  ethPriceUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  ethPriceUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  ethPriceUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  ethPriceUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  ethPriceUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  ethPriceUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Bundle_OrderBy {\n  Id = 'id',\n  EthPriceUsd = 'ethPriceUSD'\n}\n\nexport type Burn = {\n  __typename?: 'Burn';\n  id: Scalars['ID'];\n  transaction: Transaction;\n  pool: Pool;\n  token0: Token;\n  token1: Token;\n  timestamp: Scalars['BigInt'];\n  owner?: Maybe<Scalars['Bytes']>;\n  origin: Scalars['Bytes'];\n  amount: Scalars['BigInt'];\n  amount0: Scalars['BigDecimal'];\n  amount1: Scalars['BigDecimal'];\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  tickLower: Scalars['BigInt'];\n  tickUpper: Scalars['BigInt'];\n  logIndex?: Maybe<Scalars['BigInt']>;\n};\n\nexport type Burn_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  token0?: Maybe<Scalars['String']>;\n  token0_not?: Maybe<Scalars['String']>;\n  token0_gt?: Maybe<Scalars['String']>;\n  token0_lt?: Maybe<Scalars['String']>;\n  token0_gte?: Maybe<Scalars['String']>;\n  token0_lte?: Maybe<Scalars['String']>;\n  token0_in?: Maybe<Array<Scalars['String']>>;\n  token0_not_in?: Maybe<Array<Scalars['String']>>;\n  token0_contains?: Maybe<Scalars['String']>;\n  token0_not_contains?: Maybe<Scalars['String']>;\n  token0_starts_with?: Maybe<Scalars['String']>;\n  token0_not_starts_with?: Maybe<Scalars['String']>;\n  token0_ends_with?: Maybe<Scalars['String']>;\n  token0_not_ends_with?: Maybe<Scalars['String']>;\n  token1?: Maybe<Scalars['String']>;\n  token1_not?: Maybe<Scalars['String']>;\n  token1_gt?: Maybe<Scalars['String']>;\n  token1_lt?: Maybe<Scalars['String']>;\n  token1_gte?: Maybe<Scalars['String']>;\n  token1_lte?: Maybe<Scalars['String']>;\n  token1_in?: Maybe<Array<Scalars['String']>>;\n  token1_not_in?: Maybe<Array<Scalars['String']>>;\n  token1_contains?: Maybe<Scalars['String']>;\n  token1_not_contains?: Maybe<Scalars['String']>;\n  token1_starts_with?: Maybe<Scalars['String']>;\n  token1_not_starts_with?: Maybe<Scalars['String']>;\n  token1_ends_with?: Maybe<Scalars['String']>;\n  token1_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  owner?: Maybe<Scalars['Bytes']>;\n  owner_not?: Maybe<Scalars['Bytes']>;\n  owner_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_contains?: Maybe<Scalars['Bytes']>;\n  owner_not_contains?: Maybe<Scalars['Bytes']>;\n  origin?: Maybe<Scalars['Bytes']>;\n  origin_not?: Maybe<Scalars['Bytes']>;\n  origin_in?: Maybe<Array<Scalars['Bytes']>>;\n  origin_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  origin_contains?: Maybe<Scalars['Bytes']>;\n  origin_not_contains?: Maybe<Scalars['Bytes']>;\n  amount?: Maybe<Scalars['BigInt']>;\n  amount_not?: Maybe<Scalars['BigInt']>;\n  amount_gt?: Maybe<Scalars['BigInt']>;\n  amount_lt?: Maybe<Scalars['BigInt']>;\n  amount_gte?: Maybe<Scalars['BigInt']>;\n  amount_lte?: Maybe<Scalars['BigInt']>;\n  amount_in?: Maybe<Array<Scalars['BigInt']>>;\n  amount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  amount0?: Maybe<Scalars['BigDecimal']>;\n  amount0_not?: Maybe<Scalars['BigDecimal']>;\n  amount0_gt?: Maybe<Scalars['BigDecimal']>;\n  amount0_lt?: Maybe<Scalars['BigDecimal']>;\n  amount0_gte?: Maybe<Scalars['BigDecimal']>;\n  amount0_lte?: Maybe<Scalars['BigDecimal']>;\n  amount0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1?: Maybe<Scalars['BigDecimal']>;\n  amount1_not?: Maybe<Scalars['BigDecimal']>;\n  amount1_gt?: Maybe<Scalars['BigDecimal']>;\n  amount1_lt?: Maybe<Scalars['BigDecimal']>;\n  amount1_gte?: Maybe<Scalars['BigDecimal']>;\n  amount1_lte?: Maybe<Scalars['BigDecimal']>;\n  amount1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_not?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tickLower?: Maybe<Scalars['BigInt']>;\n  tickLower_not?: Maybe<Scalars['BigInt']>;\n  tickLower_gt?: Maybe<Scalars['BigInt']>;\n  tickLower_lt?: Maybe<Scalars['BigInt']>;\n  tickLower_gte?: Maybe<Scalars['BigInt']>;\n  tickLower_lte?: Maybe<Scalars['BigInt']>;\n  tickLower_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickLower_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper?: Maybe<Scalars['BigInt']>;\n  tickUpper_not?: Maybe<Scalars['BigInt']>;\n  tickUpper_gt?: Maybe<Scalars['BigInt']>;\n  tickUpper_lt?: Maybe<Scalars['BigInt']>;\n  tickUpper_gte?: Maybe<Scalars['BigInt']>;\n  tickUpper_lte?: Maybe<Scalars['BigInt']>;\n  tickUpper_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex?: Maybe<Scalars['BigInt']>;\n  logIndex_not?: Maybe<Scalars['BigInt']>;\n  logIndex_gt?: Maybe<Scalars['BigInt']>;\n  logIndex_lt?: Maybe<Scalars['BigInt']>;\n  logIndex_gte?: Maybe<Scalars['BigInt']>;\n  logIndex_lte?: Maybe<Scalars['BigInt']>;\n  logIndex_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Burn_OrderBy {\n  Id = 'id',\n  Transaction = 'transaction',\n  Pool = 'pool',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  Timestamp = 'timestamp',\n  Owner = 'owner',\n  Origin = 'origin',\n  Amount = 'amount',\n  Amount0 = 'amount0',\n  Amount1 = 'amount1',\n  AmountUsd = 'amountUSD',\n  TickLower = 'tickLower',\n  TickUpper = 'tickUpper',\n  LogIndex = 'logIndex'\n}\n\n\nexport type Collect = {\n  __typename?: 'Collect';\n  id: Scalars['ID'];\n  transaction: Transaction;\n  timestamp: Scalars['BigInt'];\n  pool: Pool;\n  owner?: Maybe<Scalars['Bytes']>;\n  amount0: Scalars['BigDecimal'];\n  amount1: Scalars['BigDecimal'];\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  tickLower: Scalars['BigInt'];\n  tickUpper: Scalars['BigInt'];\n  logIndex?: Maybe<Scalars['BigInt']>;\n};\n\nexport type Collect_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  owner?: Maybe<Scalars['Bytes']>;\n  owner_not?: Maybe<Scalars['Bytes']>;\n  owner_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_contains?: Maybe<Scalars['Bytes']>;\n  owner_not_contains?: Maybe<Scalars['Bytes']>;\n  amount0?: Maybe<Scalars['BigDecimal']>;\n  amount0_not?: Maybe<Scalars['BigDecimal']>;\n  amount0_gt?: Maybe<Scalars['BigDecimal']>;\n  amount0_lt?: Maybe<Scalars['BigDecimal']>;\n  amount0_gte?: Maybe<Scalars['BigDecimal']>;\n  amount0_lte?: Maybe<Scalars['BigDecimal']>;\n  amount0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1?: Maybe<Scalars['BigDecimal']>;\n  amount1_not?: Maybe<Scalars['BigDecimal']>;\n  amount1_gt?: Maybe<Scalars['BigDecimal']>;\n  amount1_lt?: Maybe<Scalars['BigDecimal']>;\n  amount1_gte?: Maybe<Scalars['BigDecimal']>;\n  amount1_lte?: Maybe<Scalars['BigDecimal']>;\n  amount1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_not?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tickLower?: Maybe<Scalars['BigInt']>;\n  tickLower_not?: Maybe<Scalars['BigInt']>;\n  tickLower_gt?: Maybe<Scalars['BigInt']>;\n  tickLower_lt?: Maybe<Scalars['BigInt']>;\n  tickLower_gte?: Maybe<Scalars['BigInt']>;\n  tickLower_lte?: Maybe<Scalars['BigInt']>;\n  tickLower_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickLower_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper?: Maybe<Scalars['BigInt']>;\n  tickUpper_not?: Maybe<Scalars['BigInt']>;\n  tickUpper_gt?: Maybe<Scalars['BigInt']>;\n  tickUpper_lt?: Maybe<Scalars['BigInt']>;\n  tickUpper_gte?: Maybe<Scalars['BigInt']>;\n  tickUpper_lte?: Maybe<Scalars['BigInt']>;\n  tickUpper_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex?: Maybe<Scalars['BigInt']>;\n  logIndex_not?: Maybe<Scalars['BigInt']>;\n  logIndex_gt?: Maybe<Scalars['BigInt']>;\n  logIndex_lt?: Maybe<Scalars['BigInt']>;\n  logIndex_gte?: Maybe<Scalars['BigInt']>;\n  logIndex_lte?: Maybe<Scalars['BigInt']>;\n  logIndex_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Collect_OrderBy {\n  Id = 'id',\n  Transaction = 'transaction',\n  Timestamp = 'timestamp',\n  Pool = 'pool',\n  Owner = 'owner',\n  Amount0 = 'amount0',\n  Amount1 = 'amount1',\n  AmountUsd = 'amountUSD',\n  TickLower = 'tickLower',\n  TickUpper = 'tickUpper',\n  LogIndex = 'logIndex'\n}\n\nexport type Factory = {\n  __typename?: 'Factory';\n  id: Scalars['ID'];\n  poolCount: Scalars['BigInt'];\n  txCount: Scalars['BigInt'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n  totalVolumeETH: Scalars['BigDecimal'];\n  totalFeesUSD: Scalars['BigDecimal'];\n  totalFeesETH: Scalars['BigDecimal'];\n  untrackedVolumeUSD: Scalars['BigDecimal'];\n  totalValueLockedUSD: Scalars['BigDecimal'];\n  totalValueLockedETH: Scalars['BigDecimal'];\n  totalValueLockedUSDUntracked: Scalars['BigDecimal'];\n  totalValueLockedETHUntracked: Scalars['BigDecimal'];\n  owner: Scalars['ID'];\n};\n\nexport type Factory_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  poolCount?: Maybe<Scalars['BigInt']>;\n  poolCount_not?: Maybe<Scalars['BigInt']>;\n  poolCount_gt?: Maybe<Scalars['BigInt']>;\n  poolCount_lt?: Maybe<Scalars['BigInt']>;\n  poolCount_gte?: Maybe<Scalars['BigInt']>;\n  poolCount_lte?: Maybe<Scalars['BigInt']>;\n  poolCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  poolCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  txCount?: Maybe<Scalars['BigInt']>;\n  txCount_not?: Maybe<Scalars['BigInt']>;\n  txCount_gt?: Maybe<Scalars['BigInt']>;\n  txCount_lt?: Maybe<Scalars['BigInt']>;\n  txCount_gte?: Maybe<Scalars['BigInt']>;\n  txCount_lte?: Maybe<Scalars['BigInt']>;\n  txCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  txCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  totalVolumeUSD?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeETH?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeETH_not?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeETH_gt?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeETH_lt?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeETH_gte?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeETH_lte?: Maybe<Scalars['BigDecimal']>;\n  totalVolumeETH_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeETH_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalFeesUSD?: Maybe<Scalars['BigDecimal']>;\n  totalFeesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  totalFeesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  totalFeesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  totalFeesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  totalFeesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  totalFeesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalFeesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalFeesETH?: Maybe<Scalars['BigDecimal']>;\n  totalFeesETH_not?: Maybe<Scalars['BigDecimal']>;\n  totalFeesETH_gt?: Maybe<Scalars['BigDecimal']>;\n  totalFeesETH_lt?: Maybe<Scalars['BigDecimal']>;\n  totalFeesETH_gte?: Maybe<Scalars['BigDecimal']>;\n  totalFeesETH_lte?: Maybe<Scalars['BigDecimal']>;\n  totalFeesETH_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalFeesETH_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedETH?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedETH_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSDUntracked?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSDUntracked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedETHUntracked?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETHUntracked_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETHUntracked_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETHUntracked_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETHUntracked_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETHUntracked_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETHUntracked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedETHUntracked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  owner?: Maybe<Scalars['ID']>;\n  owner_not?: Maybe<Scalars['ID']>;\n  owner_gt?: Maybe<Scalars['ID']>;\n  owner_lt?: Maybe<Scalars['ID']>;\n  owner_gte?: Maybe<Scalars['ID']>;\n  owner_lte?: Maybe<Scalars['ID']>;\n  owner_in?: Maybe<Array<Scalars['ID']>>;\n  owner_not_in?: Maybe<Array<Scalars['ID']>>;\n};\n\nexport enum Factory_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  TxCount = 'txCount',\n  TotalVolumeUsd = 'totalVolumeUSD',\n  TotalVolumeEth = 'totalVolumeETH',\n  TotalFeesUsd = 'totalFeesUSD',\n  TotalFeesEth = 'totalFeesETH',\n  UntrackedVolumeUsd = 'untrackedVolumeUSD',\n  TotalValueLockedUsd = 'totalValueLockedUSD',\n  TotalValueLockedEth = 'totalValueLockedETH',\n  TotalValueLockedUsdUntracked = 'totalValueLockedUSDUntracked',\n  TotalValueLockedEthUntracked = 'totalValueLockedETHUntracked',\n  Owner = 'owner'\n}\n\nexport type Flash = {\n  __typename?: 'Flash';\n  id: Scalars['ID'];\n  transaction: Transaction;\n  timestamp: Scalars['BigInt'];\n  pool: Pool;\n  sender: Scalars['Bytes'];\n  recipient: Scalars['Bytes'];\n  amount0: Scalars['BigDecimal'];\n  amount1: Scalars['BigDecimal'];\n  amountUSD: Scalars['BigDecimal'];\n  amount0Paid: Scalars['BigDecimal'];\n  amount1Paid: Scalars['BigDecimal'];\n  logIndex?: Maybe<Scalars['BigInt']>;\n};\n\nexport type Flash_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  sender?: Maybe<Scalars['Bytes']>;\n  sender_not?: Maybe<Scalars['Bytes']>;\n  sender_in?: Maybe<Array<Scalars['Bytes']>>;\n  sender_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  sender_contains?: Maybe<Scalars['Bytes']>;\n  sender_not_contains?: Maybe<Scalars['Bytes']>;\n  recipient?: Maybe<Scalars['Bytes']>;\n  recipient_not?: Maybe<Scalars['Bytes']>;\n  recipient_in?: Maybe<Array<Scalars['Bytes']>>;\n  recipient_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  recipient_contains?: Maybe<Scalars['Bytes']>;\n  recipient_not_contains?: Maybe<Scalars['Bytes']>;\n  amount0?: Maybe<Scalars['BigDecimal']>;\n  amount0_not?: Maybe<Scalars['BigDecimal']>;\n  amount0_gt?: Maybe<Scalars['BigDecimal']>;\n  amount0_lt?: Maybe<Scalars['BigDecimal']>;\n  amount0_gte?: Maybe<Scalars['BigDecimal']>;\n  amount0_lte?: Maybe<Scalars['BigDecimal']>;\n  amount0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1?: Maybe<Scalars['BigDecimal']>;\n  amount1_not?: Maybe<Scalars['BigDecimal']>;\n  amount1_gt?: Maybe<Scalars['BigDecimal']>;\n  amount1_lt?: Maybe<Scalars['BigDecimal']>;\n  amount1_gte?: Maybe<Scalars['BigDecimal']>;\n  amount1_lte?: Maybe<Scalars['BigDecimal']>;\n  amount1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_not?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount0Paid?: Maybe<Scalars['BigDecimal']>;\n  amount0Paid_not?: Maybe<Scalars['BigDecimal']>;\n  amount0Paid_gt?: Maybe<Scalars['BigDecimal']>;\n  amount0Paid_lt?: Maybe<Scalars['BigDecimal']>;\n  amount0Paid_gte?: Maybe<Scalars['BigDecimal']>;\n  amount0Paid_lte?: Maybe<Scalars['BigDecimal']>;\n  amount0Paid_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount0Paid_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1Paid?: Maybe<Scalars['BigDecimal']>;\n  amount1Paid_not?: Maybe<Scalars['BigDecimal']>;\n  amount1Paid_gt?: Maybe<Scalars['BigDecimal']>;\n  amount1Paid_lt?: Maybe<Scalars['BigDecimal']>;\n  amount1Paid_gte?: Maybe<Scalars['BigDecimal']>;\n  amount1Paid_lte?: Maybe<Scalars['BigDecimal']>;\n  amount1Paid_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1Paid_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  logIndex?: Maybe<Scalars['BigInt']>;\n  logIndex_not?: Maybe<Scalars['BigInt']>;\n  logIndex_gt?: Maybe<Scalars['BigInt']>;\n  logIndex_lt?: Maybe<Scalars['BigInt']>;\n  logIndex_gte?: Maybe<Scalars['BigInt']>;\n  logIndex_lte?: Maybe<Scalars['BigInt']>;\n  logIndex_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Flash_OrderBy {\n  Id = 'id',\n  Transaction = 'transaction',\n  Timestamp = 'timestamp',\n  Pool = 'pool',\n  Sender = 'sender',\n  Recipient = 'recipient',\n  Amount0 = 'amount0',\n  Amount1 = 'amount1',\n  AmountUsd = 'amountUSD',\n  Amount0Paid = 'amount0Paid',\n  Amount1Paid = 'amount1Paid',\n  LogIndex = 'logIndex'\n}\n\nexport type Mint = {\n  __typename?: 'Mint';\n  id: Scalars['ID'];\n  transaction: Transaction;\n  timestamp: Scalars['BigInt'];\n  pool: Pool;\n  token0: Token;\n  token1: Token;\n  owner: Scalars['Bytes'];\n  sender?: Maybe<Scalars['Bytes']>;\n  origin: Scalars['Bytes'];\n  amount: Scalars['BigInt'];\n  amount0: Scalars['BigDecimal'];\n  amount1: Scalars['BigDecimal'];\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  tickLower: Scalars['BigInt'];\n  tickUpper: Scalars['BigInt'];\n  logIndex?: Maybe<Scalars['BigInt']>;\n};\n\nexport type Mint_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  token0?: Maybe<Scalars['String']>;\n  token0_not?: Maybe<Scalars['String']>;\n  token0_gt?: Maybe<Scalars['String']>;\n  token0_lt?: Maybe<Scalars['String']>;\n  token0_gte?: Maybe<Scalars['String']>;\n  token0_lte?: Maybe<Scalars['String']>;\n  token0_in?: Maybe<Array<Scalars['String']>>;\n  token0_not_in?: Maybe<Array<Scalars['String']>>;\n  token0_contains?: Maybe<Scalars['String']>;\n  token0_not_contains?: Maybe<Scalars['String']>;\n  token0_starts_with?: Maybe<Scalars['String']>;\n  token0_not_starts_with?: Maybe<Scalars['String']>;\n  token0_ends_with?: Maybe<Scalars['String']>;\n  token0_not_ends_with?: Maybe<Scalars['String']>;\n  token1?: Maybe<Scalars['String']>;\n  token1_not?: Maybe<Scalars['String']>;\n  token1_gt?: Maybe<Scalars['String']>;\n  token1_lt?: Maybe<Scalars['String']>;\n  token1_gte?: Maybe<Scalars['String']>;\n  token1_lte?: Maybe<Scalars['String']>;\n  token1_in?: Maybe<Array<Scalars['String']>>;\n  token1_not_in?: Maybe<Array<Scalars['String']>>;\n  token1_contains?: Maybe<Scalars['String']>;\n  token1_not_contains?: Maybe<Scalars['String']>;\n  token1_starts_with?: Maybe<Scalars['String']>;\n  token1_not_starts_with?: Maybe<Scalars['String']>;\n  token1_ends_with?: Maybe<Scalars['String']>;\n  token1_not_ends_with?: Maybe<Scalars['String']>;\n  owner?: Maybe<Scalars['Bytes']>;\n  owner_not?: Maybe<Scalars['Bytes']>;\n  owner_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_contains?: Maybe<Scalars['Bytes']>;\n  owner_not_contains?: Maybe<Scalars['Bytes']>;\n  sender?: Maybe<Scalars['Bytes']>;\n  sender_not?: Maybe<Scalars['Bytes']>;\n  sender_in?: Maybe<Array<Scalars['Bytes']>>;\n  sender_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  sender_contains?: Maybe<Scalars['Bytes']>;\n  sender_not_contains?: Maybe<Scalars['Bytes']>;\n  origin?: Maybe<Scalars['Bytes']>;\n  origin_not?: Maybe<Scalars['Bytes']>;\n  origin_in?: Maybe<Array<Scalars['Bytes']>>;\n  origin_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  origin_contains?: Maybe<Scalars['Bytes']>;\n  origin_not_contains?: Maybe<Scalars['Bytes']>;\n  amount?: Maybe<Scalars['BigInt']>;\n  amount_not?: Maybe<Scalars['BigInt']>;\n  amount_gt?: Maybe<Scalars['BigInt']>;\n  amount_lt?: Maybe<Scalars['BigInt']>;\n  amount_gte?: Maybe<Scalars['BigInt']>;\n  amount_lte?: Maybe<Scalars['BigInt']>;\n  amount_in?: Maybe<Array<Scalars['BigInt']>>;\n  amount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  amount0?: Maybe<Scalars['BigDecimal']>;\n  amount0_not?: Maybe<Scalars['BigDecimal']>;\n  amount0_gt?: Maybe<Scalars['BigDecimal']>;\n  amount0_lt?: Maybe<Scalars['BigDecimal']>;\n  amount0_gte?: Maybe<Scalars['BigDecimal']>;\n  amount0_lte?: Maybe<Scalars['BigDecimal']>;\n  amount0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1?: Maybe<Scalars['BigDecimal']>;\n  amount1_not?: Maybe<Scalars['BigDecimal']>;\n  amount1_gt?: Maybe<Scalars['BigDecimal']>;\n  amount1_lt?: Maybe<Scalars['BigDecimal']>;\n  amount1_gte?: Maybe<Scalars['BigDecimal']>;\n  amount1_lte?: Maybe<Scalars['BigDecimal']>;\n  amount1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_not?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tickLower?: Maybe<Scalars['BigInt']>;\n  tickLower_not?: Maybe<Scalars['BigInt']>;\n  tickLower_gt?: Maybe<Scalars['BigInt']>;\n  tickLower_lt?: Maybe<Scalars['BigInt']>;\n  tickLower_gte?: Maybe<Scalars['BigInt']>;\n  tickLower_lte?: Maybe<Scalars['BigInt']>;\n  tickLower_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickLower_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper?: Maybe<Scalars['BigInt']>;\n  tickUpper_not?: Maybe<Scalars['BigInt']>;\n  tickUpper_gt?: Maybe<Scalars['BigInt']>;\n  tickUpper_lt?: Maybe<Scalars['BigInt']>;\n  tickUpper_gte?: Maybe<Scalars['BigInt']>;\n  tickUpper_lte?: Maybe<Scalars['BigInt']>;\n  tickUpper_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex?: Maybe<Scalars['BigInt']>;\n  logIndex_not?: Maybe<Scalars['BigInt']>;\n  logIndex_gt?: Maybe<Scalars['BigInt']>;\n  logIndex_lt?: Maybe<Scalars['BigInt']>;\n  logIndex_gte?: Maybe<Scalars['BigInt']>;\n  logIndex_lte?: Maybe<Scalars['BigInt']>;\n  logIndex_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Mint_OrderBy {\n  Id = 'id',\n  Transaction = 'transaction',\n  Timestamp = 'timestamp',\n  Pool = 'pool',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  Owner = 'owner',\n  Sender = 'sender',\n  Origin = 'origin',\n  Amount = 'amount',\n  Amount0 = 'amount0',\n  Amount1 = 'amount1',\n  AmountUsd = 'amountUSD',\n  TickLower = 'tickLower',\n  TickUpper = 'tickUpper',\n  LogIndex = 'logIndex'\n}\n\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Pool = {\n  __typename?: 'Pool';\n  id: Scalars['ID'];\n  createdAtTimestamp: Scalars['BigInt'];\n  createdAtBlockNumber: Scalars['BigInt'];\n  token0: Token;\n  token1: Token;\n  feeTier: Scalars['BigInt'];\n  liquidity: Scalars['BigInt'];\n  sqrtPrice: Scalars['BigInt'];\n  feeGrowthGlobal0X128: Scalars['BigInt'];\n  feeGrowthGlobal1X128: Scalars['BigInt'];\n  token0Price: Scalars['BigDecimal'];\n  token1Price: Scalars['BigDecimal'];\n  tick?: Maybe<Scalars['BigInt']>;\n  observationIndex: Scalars['BigInt'];\n  volumeToken0: Scalars['BigDecimal'];\n  volumeToken1: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  untrackedVolumeUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  txCount: Scalars['BigInt'];\n  collectedFeesToken0: Scalars['BigDecimal'];\n  collectedFeesToken1: Scalars['BigDecimal'];\n  collectedFeesUSD: Scalars['BigDecimal'];\n  totalValueLockedToken0: Scalars['BigDecimal'];\n  totalValueLockedToken1: Scalars['BigDecimal'];\n  totalValueLockedETH: Scalars['BigDecimal'];\n  totalValueLockedUSD: Scalars['BigDecimal'];\n  totalValueLockedUSDUntracked: Scalars['BigDecimal'];\n  liquidityProviderCount: Scalars['BigInt'];\n  poolHourData: Array<PoolHourData>;\n  poolDayData: Array<PoolDayData>;\n  mints: Array<Mint>;\n  burns: Array<Burn>;\n  swaps: Array<Swap>;\n  collects: Array<Collect>;\n  ticks: Array<Tick>;\n};\n\n\nexport type PoolPoolHourDataArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PoolHourData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PoolHourData_Filter>;\n};\n\n\nexport type PoolPoolDayDataArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PoolDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PoolDayData_Filter>;\n};\n\n\nexport type PoolMintsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Mint_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Mint_Filter>;\n};\n\n\nexport type PoolBurnsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Burn_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Burn_Filter>;\n};\n\n\nexport type PoolSwapsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Swap_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Swap_Filter>;\n};\n\n\nexport type PoolCollectsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Collect_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Collect_Filter>;\n};\n\n\nexport type PoolTicksArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Tick_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Tick_Filter>;\n};\n\nexport type PoolDayData = {\n  __typename?: 'PoolDayData';\n  id: Scalars['ID'];\n  date: Scalars['Int'];\n  pool: Pool;\n  liquidity: Scalars['BigInt'];\n  sqrtPrice: Scalars['BigInt'];\n  token0Price: Scalars['BigDecimal'];\n  token1Price: Scalars['BigDecimal'];\n  tick?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128: Scalars['BigInt'];\n  feeGrowthGlobal1X128: Scalars['BigInt'];\n  tvlUSD: Scalars['BigDecimal'];\n  volumeToken0: Scalars['BigDecimal'];\n  volumeToken1: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  txCount: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  high: Scalars['BigDecimal'];\n  low: Scalars['BigDecimal'];\n  close: Scalars['BigDecimal'];\n};\n\nexport type PoolDayData_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  date?: Maybe<Scalars['Int']>;\n  date_not?: Maybe<Scalars['Int']>;\n  date_gt?: Maybe<Scalars['Int']>;\n  date_lt?: Maybe<Scalars['Int']>;\n  date_gte?: Maybe<Scalars['Int']>;\n  date_lte?: Maybe<Scalars['Int']>;\n  date_in?: Maybe<Array<Scalars['Int']>>;\n  date_not_in?: Maybe<Array<Scalars['Int']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  liquidity?: Maybe<Scalars['BigInt']>;\n  liquidity_not?: Maybe<Scalars['BigInt']>;\n  liquidity_gt?: Maybe<Scalars['BigInt']>;\n  liquidity_lt?: Maybe<Scalars['BigInt']>;\n  liquidity_gte?: Maybe<Scalars['BigInt']>;\n  liquidity_lte?: Maybe<Scalars['BigInt']>;\n  liquidity_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidity_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sqrtPrice?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_not?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_gt?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_lt?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_gte?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_lte?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_in?: Maybe<Array<Scalars['BigInt']>>;\n  sqrtPrice_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  token0Price?: Maybe<Scalars['BigDecimal']>;\n  token0Price_not?: Maybe<Scalars['BigDecimal']>;\n  token0Price_gt?: Maybe<Scalars['BigDecimal']>;\n  token0Price_lt?: Maybe<Scalars['BigDecimal']>;\n  token0Price_gte?: Maybe<Scalars['BigDecimal']>;\n  token0Price_lte?: Maybe<Scalars['BigDecimal']>;\n  token0Price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token0Price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token1Price?: Maybe<Scalars['BigDecimal']>;\n  token1Price_not?: Maybe<Scalars['BigDecimal']>;\n  token1Price_gt?: Maybe<Scalars['BigDecimal']>;\n  token1Price_lt?: Maybe<Scalars['BigDecimal']>;\n  token1Price_gte?: Maybe<Scalars['BigDecimal']>;\n  token1Price_lte?: Maybe<Scalars['BigDecimal']>;\n  token1Price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token1Price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tick?: Maybe<Scalars['BigInt']>;\n  tick_not?: Maybe<Scalars['BigInt']>;\n  tick_gt?: Maybe<Scalars['BigInt']>;\n  tick_lt?: Maybe<Scalars['BigInt']>;\n  tick_gte?: Maybe<Scalars['BigInt']>;\n  tick_lte?: Maybe<Scalars['BigInt']>;\n  tick_in?: Maybe<Array<Scalars['BigInt']>>;\n  tick_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal0X128?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_not?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_gt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_lt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_gte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_lte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal0X128_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal1X128?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_not?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_gt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_lt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_gte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_lte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal1X128_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tvlUSD?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_not?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tvlUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  txCount?: Maybe<Scalars['BigInt']>;\n  txCount_not?: Maybe<Scalars['BigInt']>;\n  txCount_gt?: Maybe<Scalars['BigInt']>;\n  txCount_lt?: Maybe<Scalars['BigInt']>;\n  txCount_gte?: Maybe<Scalars['BigInt']>;\n  txCount_lte?: Maybe<Scalars['BigInt']>;\n  txCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  txCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolDayData_OrderBy {\n  Id = 'id',\n  Date = 'date',\n  Pool = 'pool',\n  Liquidity = 'liquidity',\n  SqrtPrice = 'sqrtPrice',\n  Token0Price = 'token0Price',\n  Token1Price = 'token1Price',\n  Tick = 'tick',\n  FeeGrowthGlobal0X128 = 'feeGrowthGlobal0X128',\n  FeeGrowthGlobal1X128 = 'feeGrowthGlobal1X128',\n  TvlUsd = 'tvlUSD',\n  VolumeToken0 = 'volumeToken0',\n  VolumeToken1 = 'volumeToken1',\n  VolumeUsd = 'volumeUSD',\n  FeesUsd = 'feesUSD',\n  TxCount = 'txCount',\n  Open = 'open',\n  High = 'high',\n  Low = 'low',\n  Close = 'close'\n}\n\nexport type PoolHourData = {\n  __typename?: 'PoolHourData';\n  id: Scalars['ID'];\n  periodStartUnix: Scalars['Int'];\n  pool: Pool;\n  liquidity: Scalars['BigInt'];\n  sqrtPrice: Scalars['BigInt'];\n  token0Price: Scalars['BigDecimal'];\n  token1Price: Scalars['BigDecimal'];\n  tick?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128: Scalars['BigInt'];\n  feeGrowthGlobal1X128: Scalars['BigInt'];\n  tvlUSD: Scalars['BigDecimal'];\n  volumeToken0: Scalars['BigDecimal'];\n  volumeToken1: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  txCount: Scalars['BigInt'];\n  open: Scalars['BigDecimal'];\n  high: Scalars['BigDecimal'];\n  low: Scalars['BigDecimal'];\n  close: Scalars['BigDecimal'];\n};\n\nexport type PoolHourData_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  periodStartUnix?: Maybe<Scalars['Int']>;\n  periodStartUnix_not?: Maybe<Scalars['Int']>;\n  periodStartUnix_gt?: Maybe<Scalars['Int']>;\n  periodStartUnix_lt?: Maybe<Scalars['Int']>;\n  periodStartUnix_gte?: Maybe<Scalars['Int']>;\n  periodStartUnix_lte?: Maybe<Scalars['Int']>;\n  periodStartUnix_in?: Maybe<Array<Scalars['Int']>>;\n  periodStartUnix_not_in?: Maybe<Array<Scalars['Int']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  liquidity?: Maybe<Scalars['BigInt']>;\n  liquidity_not?: Maybe<Scalars['BigInt']>;\n  liquidity_gt?: Maybe<Scalars['BigInt']>;\n  liquidity_lt?: Maybe<Scalars['BigInt']>;\n  liquidity_gte?: Maybe<Scalars['BigInt']>;\n  liquidity_lte?: Maybe<Scalars['BigInt']>;\n  liquidity_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidity_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sqrtPrice?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_not?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_gt?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_lt?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_gte?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_lte?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_in?: Maybe<Array<Scalars['BigInt']>>;\n  sqrtPrice_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  token0Price?: Maybe<Scalars['BigDecimal']>;\n  token0Price_not?: Maybe<Scalars['BigDecimal']>;\n  token0Price_gt?: Maybe<Scalars['BigDecimal']>;\n  token0Price_lt?: Maybe<Scalars['BigDecimal']>;\n  token0Price_gte?: Maybe<Scalars['BigDecimal']>;\n  token0Price_lte?: Maybe<Scalars['BigDecimal']>;\n  token0Price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token0Price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token1Price?: Maybe<Scalars['BigDecimal']>;\n  token1Price_not?: Maybe<Scalars['BigDecimal']>;\n  token1Price_gt?: Maybe<Scalars['BigDecimal']>;\n  token1Price_lt?: Maybe<Scalars['BigDecimal']>;\n  token1Price_gte?: Maybe<Scalars['BigDecimal']>;\n  token1Price_lte?: Maybe<Scalars['BigDecimal']>;\n  token1Price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token1Price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tick?: Maybe<Scalars['BigInt']>;\n  tick_not?: Maybe<Scalars['BigInt']>;\n  tick_gt?: Maybe<Scalars['BigInt']>;\n  tick_lt?: Maybe<Scalars['BigInt']>;\n  tick_gte?: Maybe<Scalars['BigInt']>;\n  tick_lte?: Maybe<Scalars['BigInt']>;\n  tick_in?: Maybe<Array<Scalars['BigInt']>>;\n  tick_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal0X128?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_not?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_gt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_lt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_gte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_lte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal0X128_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal1X128?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_not?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_gt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_lt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_gte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_lte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal1X128_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tvlUSD?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_not?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tvlUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  txCount?: Maybe<Scalars['BigInt']>;\n  txCount_not?: Maybe<Scalars['BigInt']>;\n  txCount_gt?: Maybe<Scalars['BigInt']>;\n  txCount_lt?: Maybe<Scalars['BigInt']>;\n  txCount_gte?: Maybe<Scalars['BigInt']>;\n  txCount_lte?: Maybe<Scalars['BigInt']>;\n  txCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  txCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolHourData_OrderBy {\n  Id = 'id',\n  PeriodStartUnix = 'periodStartUnix',\n  Pool = 'pool',\n  Liquidity = 'liquidity',\n  SqrtPrice = 'sqrtPrice',\n  Token0Price = 'token0Price',\n  Token1Price = 'token1Price',\n  Tick = 'tick',\n  FeeGrowthGlobal0X128 = 'feeGrowthGlobal0X128',\n  FeeGrowthGlobal1X128 = 'feeGrowthGlobal1X128',\n  TvlUsd = 'tvlUSD',\n  VolumeToken0 = 'volumeToken0',\n  VolumeToken1 = 'volumeToken1',\n  VolumeUsd = 'volumeUSD',\n  FeesUsd = 'feesUSD',\n  TxCount = 'txCount',\n  Open = 'open',\n  High = 'high',\n  Low = 'low',\n  Close = 'close'\n}\n\nexport type Pool_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  createdAtTimestamp?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_not?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_gt?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_lt?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_gte?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_lte?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  createdAtTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  createdAtBlockNumber?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_not?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_gt?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_lt?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_gte?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_lte?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_in?: Maybe<Array<Scalars['BigInt']>>;\n  createdAtBlockNumber_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  token0?: Maybe<Scalars['String']>;\n  token0_not?: Maybe<Scalars['String']>;\n  token0_gt?: Maybe<Scalars['String']>;\n  token0_lt?: Maybe<Scalars['String']>;\n  token0_gte?: Maybe<Scalars['String']>;\n  token0_lte?: Maybe<Scalars['String']>;\n  token0_in?: Maybe<Array<Scalars['String']>>;\n  token0_not_in?: Maybe<Array<Scalars['String']>>;\n  token0_contains?: Maybe<Scalars['String']>;\n  token0_not_contains?: Maybe<Scalars['String']>;\n  token0_starts_with?: Maybe<Scalars['String']>;\n  token0_not_starts_with?: Maybe<Scalars['String']>;\n  token0_ends_with?: Maybe<Scalars['String']>;\n  token0_not_ends_with?: Maybe<Scalars['String']>;\n  token1?: Maybe<Scalars['String']>;\n  token1_not?: Maybe<Scalars['String']>;\n  token1_gt?: Maybe<Scalars['String']>;\n  token1_lt?: Maybe<Scalars['String']>;\n  token1_gte?: Maybe<Scalars['String']>;\n  token1_lte?: Maybe<Scalars['String']>;\n  token1_in?: Maybe<Array<Scalars['String']>>;\n  token1_not_in?: Maybe<Array<Scalars['String']>>;\n  token1_contains?: Maybe<Scalars['String']>;\n  token1_not_contains?: Maybe<Scalars['String']>;\n  token1_starts_with?: Maybe<Scalars['String']>;\n  token1_not_starts_with?: Maybe<Scalars['String']>;\n  token1_ends_with?: Maybe<Scalars['String']>;\n  token1_not_ends_with?: Maybe<Scalars['String']>;\n  feeTier?: Maybe<Scalars['BigInt']>;\n  feeTier_not?: Maybe<Scalars['BigInt']>;\n  feeTier_gt?: Maybe<Scalars['BigInt']>;\n  feeTier_lt?: Maybe<Scalars['BigInt']>;\n  feeTier_gte?: Maybe<Scalars['BigInt']>;\n  feeTier_lte?: Maybe<Scalars['BigInt']>;\n  feeTier_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeTier_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidity?: Maybe<Scalars['BigInt']>;\n  liquidity_not?: Maybe<Scalars['BigInt']>;\n  liquidity_gt?: Maybe<Scalars['BigInt']>;\n  liquidity_lt?: Maybe<Scalars['BigInt']>;\n  liquidity_gte?: Maybe<Scalars['BigInt']>;\n  liquidity_lte?: Maybe<Scalars['BigInt']>;\n  liquidity_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidity_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  sqrtPrice?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_not?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_gt?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_lt?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_gte?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_lte?: Maybe<Scalars['BigInt']>;\n  sqrtPrice_in?: Maybe<Array<Scalars['BigInt']>>;\n  sqrtPrice_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal0X128?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_not?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_gt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_lt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_gte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_lte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal0X128_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal0X128_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal1X128?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_not?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_gt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_lt?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_gte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_lte?: Maybe<Scalars['BigInt']>;\n  feeGrowthGlobal1X128_in?: Maybe<Array<Scalars['BigInt']>>;\n  feeGrowthGlobal1X128_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  token0Price?: Maybe<Scalars['BigDecimal']>;\n  token0Price_not?: Maybe<Scalars['BigDecimal']>;\n  token0Price_gt?: Maybe<Scalars['BigDecimal']>;\n  token0Price_lt?: Maybe<Scalars['BigDecimal']>;\n  token0Price_gte?: Maybe<Scalars['BigDecimal']>;\n  token0Price_lte?: Maybe<Scalars['BigDecimal']>;\n  token0Price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token0Price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token1Price?: Maybe<Scalars['BigDecimal']>;\n  token1Price_not?: Maybe<Scalars['BigDecimal']>;\n  token1Price_gt?: Maybe<Scalars['BigDecimal']>;\n  token1Price_lt?: Maybe<Scalars['BigDecimal']>;\n  token1Price_gte?: Maybe<Scalars['BigDecimal']>;\n  token1Price_lte?: Maybe<Scalars['BigDecimal']>;\n  token1Price_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  token1Price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tick?: Maybe<Scalars['BigInt']>;\n  tick_not?: Maybe<Scalars['BigInt']>;\n  tick_gt?: Maybe<Scalars['BigInt']>;\n  tick_lt?: Maybe<Scalars['BigInt']>;\n  tick_gte?: Maybe<Scalars['BigInt']>;\n  tick_lte?: Maybe<Scalars['BigInt']>;\n  tick_in?: Maybe<Array<Scalars['BigInt']>>;\n  tick_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  observationIndex?: Maybe<Scalars['BigInt']>;\n  observationIndex_not?: Maybe<Scalars['BigInt']>;\n  observationIndex_gt?: Maybe<Scalars['BigInt']>;\n  observationIndex_lt?: Maybe<Scalars['BigInt']>;\n  observationIndex_gte?: Maybe<Scalars['BigInt']>;\n  observationIndex_lte?: Maybe<Scalars['BigInt']>;\n  observationIndex_in?: Maybe<Array<Scalars['BigInt']>>;\n  observationIndex_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  volumeToken0?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  txCount?: Maybe<Scalars['BigInt']>;\n  txCount_not?: Maybe<Scalars['BigInt']>;\n  txCount_gt?: Maybe<Scalars['BigInt']>;\n  txCount_lt?: Maybe<Scalars['BigInt']>;\n  txCount_gte?: Maybe<Scalars['BigInt']>;\n  txCount_lte?: Maybe<Scalars['BigInt']>;\n  txCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  txCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  collectedFeesToken0?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken1?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesUSD?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedToken0?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken0_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedToken1?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken1_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedETH?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedETH_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedETH_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSDUntracked?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSDUntracked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  liquidityProviderCount?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_not?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_gt?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_lt?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_gte?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_lte?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidityProviderCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Pool_OrderBy {\n  Id = 'id',\n  CreatedAtTimestamp = 'createdAtTimestamp',\n  CreatedAtBlockNumber = 'createdAtBlockNumber',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  FeeTier = 'feeTier',\n  Liquidity = 'liquidity',\n  SqrtPrice = 'sqrtPrice',\n  FeeGrowthGlobal0X128 = 'feeGrowthGlobal0X128',\n  FeeGrowthGlobal1X128 = 'feeGrowthGlobal1X128',\n  Token0Price = 'token0Price',\n  Token1Price = 'token1Price',\n  Tick = 'tick',\n  ObservationIndex = 'observationIndex',\n  VolumeToken0 = 'volumeToken0',\n  VolumeToken1 = 'volumeToken1',\n  VolumeUsd = 'volumeUSD',\n  UntrackedVolumeUsd = 'untrackedVolumeUSD',\n  FeesUsd = 'feesUSD',\n  TxCount = 'txCount',\n  CollectedFeesToken0 = 'collectedFeesToken0',\n  CollectedFeesToken1 = 'collectedFeesToken1',\n  CollectedFeesUsd = 'collectedFeesUSD',\n  TotalValueLockedToken0 = 'totalValueLockedToken0',\n  TotalValueLockedToken1 = 'totalValueLockedToken1',\n  TotalValueLockedEth = 'totalValueLockedETH',\n  TotalValueLockedUsd = 'totalValueLockedUSD',\n  TotalValueLockedUsdUntracked = 'totalValueLockedUSDUntracked',\n  LiquidityProviderCount = 'liquidityProviderCount',\n  PoolHourData = 'poolHourData',\n  PoolDayData = 'poolDayData',\n  Mints = 'mints',\n  Burns = 'burns',\n  Swaps = 'swaps',\n  Collects = 'collects',\n  Ticks = 'ticks'\n}\n\nexport type Position = {\n  __typename?: 'Position';\n  id: Scalars['ID'];\n  owner: Scalars['Bytes'];\n  pool: Pool;\n  token0: Token;\n  token1: Token;\n  tickLower: Scalars['BigInt'];\n  tickUpper: Scalars['BigInt'];\n  liquidity: Scalars['BigInt'];\n  depositedToken0: Scalars['BigDecimal'];\n  depositedToken1: Scalars['BigDecimal'];\n  withdrawnToken0: Scalars['BigDecimal'];\n  withdrawnToken1: Scalars['BigDecimal'];\n  collectedFeesToken0: Scalars['BigDecimal'];\n  collectedFeesToken1: Scalars['BigDecimal'];\n  transaction: Transaction;\n};\n\nexport type Position_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  owner?: Maybe<Scalars['Bytes']>;\n  owner_not?: Maybe<Scalars['Bytes']>;\n  owner_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  owner_contains?: Maybe<Scalars['Bytes']>;\n  owner_not_contains?: Maybe<Scalars['Bytes']>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  token0?: Maybe<Scalars['String']>;\n  token0_not?: Maybe<Scalars['String']>;\n  token0_gt?: Maybe<Scalars['String']>;\n  token0_lt?: Maybe<Scalars['String']>;\n  token0_gte?: Maybe<Scalars['String']>;\n  token0_lte?: Maybe<Scalars['String']>;\n  token0_in?: Maybe<Array<Scalars['String']>>;\n  token0_not_in?: Maybe<Array<Scalars['String']>>;\n  token0_contains?: Maybe<Scalars['String']>;\n  token0_not_contains?: Maybe<Scalars['String']>;\n  token0_starts_with?: Maybe<Scalars['String']>;\n  token0_not_starts_with?: Maybe<Scalars['String']>;\n  token0_ends_with?: Maybe<Scalars['String']>;\n  token0_not_ends_with?: Maybe<Scalars['String']>;\n  token1?: Maybe<Scalars['String']>;\n  token1_not?: Maybe<Scalars['String']>;\n  token1_gt?: Maybe<Scalars['String']>;\n  token1_lt?: Maybe<Scalars['String']>;\n  token1_gte?: Maybe<Scalars['String']>;\n  token1_lte?: Maybe<Scalars['String']>;\n  token1_in?: Maybe<Array<Scalars['String']>>;\n  token1_not_in?: Maybe<Array<Scalars['String']>>;\n  token1_contains?: Maybe<Scalars['String']>;\n  token1_not_contains?: Maybe<Scalars['String']>;\n  token1_starts_with?: Maybe<Scalars['String']>;\n  token1_not_starts_with?: Maybe<Scalars['String']>;\n  token1_ends_with?: Maybe<Scalars['String']>;\n  token1_not_ends_with?: Maybe<Scalars['String']>;\n  tickLower?: Maybe<Scalars['BigInt']>;\n  tickLower_not?: Maybe<Scalars['BigInt']>;\n  tickLower_gt?: Maybe<Scalars['BigInt']>;\n  tickLower_lt?: Maybe<Scalars['BigInt']>;\n  tickLower_gte?: Maybe<Scalars['BigInt']>;\n  tickLower_lte?: Maybe<Scalars['BigInt']>;\n  tickLower_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickLower_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper?: Maybe<Scalars['BigInt']>;\n  tickUpper_not?: Maybe<Scalars['BigInt']>;\n  tickUpper_gt?: Maybe<Scalars['BigInt']>;\n  tickUpper_lt?: Maybe<Scalars['BigInt']>;\n  tickUpper_gte?: Maybe<Scalars['BigInt']>;\n  tickUpper_lte?: Maybe<Scalars['BigInt']>;\n  tickUpper_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickUpper_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidity?: Maybe<Scalars['BigInt']>;\n  liquidity_not?: Maybe<Scalars['BigInt']>;\n  liquidity_gt?: Maybe<Scalars['BigInt']>;\n  liquidity_lt?: Maybe<Scalars['BigInt']>;\n  liquidity_gte?: Maybe<Scalars['BigInt']>;\n  liquidity_lte?: Maybe<Scalars['BigInt']>;\n  liquidity_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidity_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  depositedToken0?: Maybe<Scalars['BigDecimal']>;\n  depositedToken0_not?: Maybe<Scalars['BigDecimal']>;\n  depositedToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  depositedToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  depositedToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  depositedToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  depositedToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  depositedToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  depositedToken1?: Maybe<Scalars['BigDecimal']>;\n  depositedToken1_not?: Maybe<Scalars['BigDecimal']>;\n  depositedToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  depositedToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  depositedToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  depositedToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  depositedToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  depositedToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  withdrawnToken0?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken0_not?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  withdrawnToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  withdrawnToken1?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken1_not?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  withdrawnToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  withdrawnToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken0?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken1?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n};\n\nexport enum Position_OrderBy {\n  Id = 'id',\n  Owner = 'owner',\n  Pool = 'pool',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  TickLower = 'tickLower',\n  TickUpper = 'tickUpper',\n  Liquidity = 'liquidity',\n  DepositedToken0 = 'depositedToken0',\n  DepositedToken1 = 'depositedToken1',\n  WithdrawnToken0 = 'withdrawnToken0',\n  WithdrawnToken1 = 'withdrawnToken1',\n  CollectedFeesToken0 = 'collectedFeesToken0',\n  CollectedFeesToken1 = 'collectedFeesToken1',\n  Transaction = 'transaction'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  factory?: Maybe<Factory>;\n  factories: Array<Factory>;\n  bundle?: Maybe<Bundle>;\n  bundles: Array<Bundle>;\n  token?: Maybe<Token>;\n  tokens: Array<Token>;\n  pool?: Maybe<Pool>;\n  pools: Array<Pool>;\n  tick?: Maybe<Tick>;\n  ticks: Array<Tick>;\n  position?: Maybe<Position>;\n  positions: Array<Position>;\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n  mint?: Maybe<Mint>;\n  mints: Array<Mint>;\n  burn?: Maybe<Burn>;\n  burns: Array<Burn>;\n  swap?: Maybe<Swap>;\n  swaps: Array<Swap>;\n  collect?: Maybe<Collect>;\n  collects: Array<Collect>;\n  flash?: Maybe<Flash>;\n  flashes: Array<Flash>;\n  uniswapDayData?: Maybe<UniswapDayData>;\n  uniswapDayDatas: Array<UniswapDayData>;\n  poolDayData?: Maybe<PoolDayData>;\n  poolDayDatas: Array<PoolDayData>;\n  poolHourData?: Maybe<PoolHourData>;\n  poolHourDatas: Array<PoolHourData>;\n  tickHourData?: Maybe<TickHourData>;\n  tickHourDatas: Array<TickHourData>;\n  tickDayData?: Maybe<TickDayData>;\n  tickDayDatas: Array<TickDayData>;\n  tokenDayData?: Maybe<TokenDayData>;\n  tokenDayDatas: Array<TokenDayData>;\n  tokenHourData?: Maybe<TokenHourData>;\n  tokenHourDatas: Array<TokenHourData>;\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n};\n\n\nexport type QueryFactoryArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFactoriesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Factory_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Factory_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBundleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBundlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Bundle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Bundle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokenArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokensArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Token_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Token_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPoolArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPoolsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Pool_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Pool_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTickArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTicksArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Tick_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Tick_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPositionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPositionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Position_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Position_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTransactionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTransactionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Transaction_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Transaction_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMintArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryMintsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Mint_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Mint_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBurnArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryBurnsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Burn_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Burn_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySwapArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QuerySwapsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Swap_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Swap_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCollectArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryCollectsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Collect_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Collect_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFlashArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryFlashesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Flash_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Flash_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUniswapDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryUniswapDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UniswapDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UniswapDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPoolDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPoolDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PoolDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PoolDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPoolHourDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryPoolHourDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PoolHourData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PoolHourData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTickHourDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTickHourDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TickHourData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TickHourData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTickDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTickDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TickDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TickDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokenDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokenDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TokenDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TokenDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokenHourDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type QueryTokenHourDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TokenHourData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TokenHourData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: Maybe<Block_Height>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  factory?: Maybe<Factory>;\n  factories: Array<Factory>;\n  bundle?: Maybe<Bundle>;\n  bundles: Array<Bundle>;\n  token?: Maybe<Token>;\n  tokens: Array<Token>;\n  pool?: Maybe<Pool>;\n  pools: Array<Pool>;\n  tick?: Maybe<Tick>;\n  ticks: Array<Tick>;\n  position?: Maybe<Position>;\n  positions: Array<Position>;\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n  mint?: Maybe<Mint>;\n  mints: Array<Mint>;\n  burn?: Maybe<Burn>;\n  burns: Array<Burn>;\n  swap?: Maybe<Swap>;\n  swaps: Array<Swap>;\n  collect?: Maybe<Collect>;\n  collects: Array<Collect>;\n  flash?: Maybe<Flash>;\n  flashes: Array<Flash>;\n  uniswapDayData?: Maybe<UniswapDayData>;\n  uniswapDayDatas: Array<UniswapDayData>;\n  poolDayData?: Maybe<PoolDayData>;\n  poolDayDatas: Array<PoolDayData>;\n  poolHourData?: Maybe<PoolHourData>;\n  poolHourDatas: Array<PoolHourData>;\n  tickHourData?: Maybe<TickHourData>;\n  tickHourDatas: Array<TickHourData>;\n  tickDayData?: Maybe<TickDayData>;\n  tickDayDatas: Array<TickDayData>;\n  tokenDayData?: Maybe<TokenDayData>;\n  tokenDayDatas: Array<TokenDayData>;\n  tokenHourData?: Maybe<TokenHourData>;\n  tokenHourDatas: Array<TokenHourData>;\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n};\n\n\nexport type SubscriptionFactoryArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFactoriesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Factory_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Factory_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBundleArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBundlesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Bundle_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Bundle_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokenArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokensArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Token_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Token_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPoolArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPoolsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Pool_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Pool_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTickArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTicksArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Tick_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Tick_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPositionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPositionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Position_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Position_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTransactionArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTransactionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Transaction_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Transaction_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMintArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionMintsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Mint_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Mint_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBurnArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionBurnsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Burn_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Burn_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSwapArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionSwapsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Swap_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Swap_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCollectArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionCollectsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Collect_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Collect_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFlashArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionFlashesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Flash_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Flash_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUniswapDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionUniswapDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<UniswapDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<UniswapDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPoolDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPoolDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PoolDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PoolDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPoolHourDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionPoolHourDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<PoolHourData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<PoolHourData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTickHourDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTickHourDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TickHourData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TickHourData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTickDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTickDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TickDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TickDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokenDayDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokenDayDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TokenDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TokenDayData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokenHourDataArgs = {\n  id: Scalars['ID'];\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type SubscriptionTokenHourDatasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TokenHourData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TokenHourData_Filter>;\n  block?: Maybe<Block_Height>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: Maybe<Block_Height>;\n};\n\nexport type Swap = {\n  __typename?: 'Swap';\n  id: Scalars['ID'];\n  transaction: Transaction;\n  timestamp: Scalars['BigInt'];\n  pool: Pool;\n  token0: Token;\n  token1: Token;\n  sender: Scalars['Bytes'];\n  recipient: Scalars['Bytes'];\n  origin: Scalars['Bytes'];\n  amount0: Scalars['BigDecimal'];\n  amount1: Scalars['BigDecimal'];\n  amountUSD: Scalars['BigDecimal'];\n  sqrtPriceX96: Scalars['BigInt'];\n  tick: Scalars['BigInt'];\n  logIndex?: Maybe<Scalars['BigInt']>;\n};\n\nexport type Swap_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  transaction?: Maybe<Scalars['String']>;\n  transaction_not?: Maybe<Scalars['String']>;\n  transaction_gt?: Maybe<Scalars['String']>;\n  transaction_lt?: Maybe<Scalars['String']>;\n  transaction_gte?: Maybe<Scalars['String']>;\n  transaction_lte?: Maybe<Scalars['String']>;\n  transaction_in?: Maybe<Array<Scalars['String']>>;\n  transaction_not_in?: Maybe<Array<Scalars['String']>>;\n  transaction_contains?: Maybe<Scalars['String']>;\n  transaction_not_contains?: Maybe<Scalars['String']>;\n  transaction_starts_with?: Maybe<Scalars['String']>;\n  transaction_not_starts_with?: Maybe<Scalars['String']>;\n  transaction_ends_with?: Maybe<Scalars['String']>;\n  transaction_not_ends_with?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  token0?: Maybe<Scalars['String']>;\n  token0_not?: Maybe<Scalars['String']>;\n  token0_gt?: Maybe<Scalars['String']>;\n  token0_lt?: Maybe<Scalars['String']>;\n  token0_gte?: Maybe<Scalars['String']>;\n  token0_lte?: Maybe<Scalars['String']>;\n  token0_in?: Maybe<Array<Scalars['String']>>;\n  token0_not_in?: Maybe<Array<Scalars['String']>>;\n  token0_contains?: Maybe<Scalars['String']>;\n  token0_not_contains?: Maybe<Scalars['String']>;\n  token0_starts_with?: Maybe<Scalars['String']>;\n  token0_not_starts_with?: Maybe<Scalars['String']>;\n  token0_ends_with?: Maybe<Scalars['String']>;\n  token0_not_ends_with?: Maybe<Scalars['String']>;\n  token1?: Maybe<Scalars['String']>;\n  token1_not?: Maybe<Scalars['String']>;\n  token1_gt?: Maybe<Scalars['String']>;\n  token1_lt?: Maybe<Scalars['String']>;\n  token1_gte?: Maybe<Scalars['String']>;\n  token1_lte?: Maybe<Scalars['String']>;\n  token1_in?: Maybe<Array<Scalars['String']>>;\n  token1_not_in?: Maybe<Array<Scalars['String']>>;\n  token1_contains?: Maybe<Scalars['String']>;\n  token1_not_contains?: Maybe<Scalars['String']>;\n  token1_starts_with?: Maybe<Scalars['String']>;\n  token1_not_starts_with?: Maybe<Scalars['String']>;\n  token1_ends_with?: Maybe<Scalars['String']>;\n  token1_not_ends_with?: Maybe<Scalars['String']>;\n  sender?: Maybe<Scalars['Bytes']>;\n  sender_not?: Maybe<Scalars['Bytes']>;\n  sender_in?: Maybe<Array<Scalars['Bytes']>>;\n  sender_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  sender_contains?: Maybe<Scalars['Bytes']>;\n  sender_not_contains?: Maybe<Scalars['Bytes']>;\n  recipient?: Maybe<Scalars['Bytes']>;\n  recipient_not?: Maybe<Scalars['Bytes']>;\n  recipient_in?: Maybe<Array<Scalars['Bytes']>>;\n  recipient_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  recipient_contains?: Maybe<Scalars['Bytes']>;\n  recipient_not_contains?: Maybe<Scalars['Bytes']>;\n  origin?: Maybe<Scalars['Bytes']>;\n  origin_not?: Maybe<Scalars['Bytes']>;\n  origin_in?: Maybe<Array<Scalars['Bytes']>>;\n  origin_not_in?: Maybe<Array<Scalars['Bytes']>>;\n  origin_contains?: Maybe<Scalars['Bytes']>;\n  origin_not_contains?: Maybe<Scalars['Bytes']>;\n  amount0?: Maybe<Scalars['BigDecimal']>;\n  amount0_not?: Maybe<Scalars['BigDecimal']>;\n  amount0_gt?: Maybe<Scalars['BigDecimal']>;\n  amount0_lt?: Maybe<Scalars['BigDecimal']>;\n  amount0_gte?: Maybe<Scalars['BigDecimal']>;\n  amount0_lte?: Maybe<Scalars['BigDecimal']>;\n  amount0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1?: Maybe<Scalars['BigDecimal']>;\n  amount1_not?: Maybe<Scalars['BigDecimal']>;\n  amount1_gt?: Maybe<Scalars['BigDecimal']>;\n  amount1_lt?: Maybe<Scalars['BigDecimal']>;\n  amount1_gte?: Maybe<Scalars['BigDecimal']>;\n  amount1_lte?: Maybe<Scalars['BigDecimal']>;\n  amount1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amount1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_not?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  amountUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  amountUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  sqrtPriceX96?: Maybe<Scalars['BigInt']>;\n  sqrtPriceX96_not?: Maybe<Scalars['BigInt']>;\n  sqrtPriceX96_gt?: Maybe<Scalars['BigInt']>;\n  sqrtPriceX96_lt?: Maybe<Scalars['BigInt']>;\n  sqrtPriceX96_gte?: Maybe<Scalars['BigInt']>;\n  sqrtPriceX96_lte?: Maybe<Scalars['BigInt']>;\n  sqrtPriceX96_in?: Maybe<Array<Scalars['BigInt']>>;\n  sqrtPriceX96_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tick?: Maybe<Scalars['BigInt']>;\n  tick_not?: Maybe<Scalars['BigInt']>;\n  tick_gt?: Maybe<Scalars['BigInt']>;\n  tick_lt?: Maybe<Scalars['BigInt']>;\n  tick_gte?: Maybe<Scalars['BigInt']>;\n  tick_lte?: Maybe<Scalars['BigInt']>;\n  tick_in?: Maybe<Array<Scalars['BigInt']>>;\n  tick_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex?: Maybe<Scalars['BigInt']>;\n  logIndex_not?: Maybe<Scalars['BigInt']>;\n  logIndex_gt?: Maybe<Scalars['BigInt']>;\n  logIndex_lt?: Maybe<Scalars['BigInt']>;\n  logIndex_gte?: Maybe<Scalars['BigInt']>;\n  logIndex_lte?: Maybe<Scalars['BigInt']>;\n  logIndex_in?: Maybe<Array<Scalars['BigInt']>>;\n  logIndex_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Swap_OrderBy {\n  Id = 'id',\n  Transaction = 'transaction',\n  Timestamp = 'timestamp',\n  Pool = 'pool',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  Sender = 'sender',\n  Recipient = 'recipient',\n  Origin = 'origin',\n  Amount0 = 'amount0',\n  Amount1 = 'amount1',\n  AmountUsd = 'amountUSD',\n  SqrtPriceX96 = 'sqrtPriceX96',\n  Tick = 'tick',\n  LogIndex = 'logIndex'\n}\n\nexport type Tick = {\n  __typename?: 'Tick';\n  id: Scalars['ID'];\n  poolAddress?: Maybe<Scalars['String']>;\n  tickIdx: Scalars['BigInt'];\n  pool: Pool;\n  liquidityGross: Scalars['BigInt'];\n  liquidityNet: Scalars['BigInt'];\n  price0: Scalars['BigDecimal'];\n  price1: Scalars['BigDecimal'];\n  volumeToken0: Scalars['BigDecimal'];\n  volumeToken1: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  untrackedVolumeUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  collectedFeesToken0: Scalars['BigDecimal'];\n  collectedFeesToken1: Scalars['BigDecimal'];\n  collectedFeesUSD: Scalars['BigDecimal'];\n  createdAtTimestamp: Scalars['BigInt'];\n  createdAtBlockNumber: Scalars['BigInt'];\n  liquidityProviderCount: Scalars['BigInt'];\n};\n\nexport type TickDayData = {\n  __typename?: 'TickDayData';\n  id: Scalars['ID'];\n  date: Scalars['Int'];\n  pool: Pool;\n  tick: Tick;\n  liquidityGross: Scalars['BigDecimal'];\n  liquidityNet: Scalars['BigDecimal'];\n  volumeToken0: Scalars['BigDecimal'];\n  volumeToken1: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n};\n\nexport type TickDayData_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  date?: Maybe<Scalars['Int']>;\n  date_not?: Maybe<Scalars['Int']>;\n  date_gt?: Maybe<Scalars['Int']>;\n  date_lt?: Maybe<Scalars['Int']>;\n  date_gte?: Maybe<Scalars['Int']>;\n  date_lte?: Maybe<Scalars['Int']>;\n  date_in?: Maybe<Array<Scalars['Int']>>;\n  date_not_in?: Maybe<Array<Scalars['Int']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  tick?: Maybe<Scalars['String']>;\n  tick_not?: Maybe<Scalars['String']>;\n  tick_gt?: Maybe<Scalars['String']>;\n  tick_lt?: Maybe<Scalars['String']>;\n  tick_gte?: Maybe<Scalars['String']>;\n  tick_lte?: Maybe<Scalars['String']>;\n  tick_in?: Maybe<Array<Scalars['String']>>;\n  tick_not_in?: Maybe<Array<Scalars['String']>>;\n  tick_contains?: Maybe<Scalars['String']>;\n  tick_not_contains?: Maybe<Scalars['String']>;\n  tick_starts_with?: Maybe<Scalars['String']>;\n  tick_not_starts_with?: Maybe<Scalars['String']>;\n  tick_ends_with?: Maybe<Scalars['String']>;\n  tick_not_ends_with?: Maybe<Scalars['String']>;\n  liquidityGross?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_not?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_gt?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_lt?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_gte?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_lte?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  liquidityGross_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  liquidityNet?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_not?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_gt?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_lt?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_gte?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_lte?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  liquidityNet_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TickDayData_OrderBy {\n  Id = 'id',\n  Date = 'date',\n  Pool = 'pool',\n  Tick = 'tick',\n  LiquidityGross = 'liquidityGross',\n  LiquidityNet = 'liquidityNet',\n  VolumeToken0 = 'volumeToken0',\n  VolumeToken1 = 'volumeToken1',\n  VolumeUsd = 'volumeUSD',\n  FeesUsd = 'feesUSD'\n}\n\nexport type TickHourData = {\n  __typename?: 'TickHourData';\n  id: Scalars['ID'];\n  periodStartUnix: Scalars['Int'];\n  pool: Pool;\n  tick: Tick;\n  liquidityGross: Scalars['BigDecimal'];\n  liquidityNet: Scalars['BigDecimal'];\n  volumeToken0: Scalars['BigDecimal'];\n  volumeToken1: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n};\n\nexport type TickHourData_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  periodStartUnix?: Maybe<Scalars['Int']>;\n  periodStartUnix_not?: Maybe<Scalars['Int']>;\n  periodStartUnix_gt?: Maybe<Scalars['Int']>;\n  periodStartUnix_lt?: Maybe<Scalars['Int']>;\n  periodStartUnix_gte?: Maybe<Scalars['Int']>;\n  periodStartUnix_lte?: Maybe<Scalars['Int']>;\n  periodStartUnix_in?: Maybe<Array<Scalars['Int']>>;\n  periodStartUnix_not_in?: Maybe<Array<Scalars['Int']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  tick?: Maybe<Scalars['String']>;\n  tick_not?: Maybe<Scalars['String']>;\n  tick_gt?: Maybe<Scalars['String']>;\n  tick_lt?: Maybe<Scalars['String']>;\n  tick_gte?: Maybe<Scalars['String']>;\n  tick_lte?: Maybe<Scalars['String']>;\n  tick_in?: Maybe<Array<Scalars['String']>>;\n  tick_not_in?: Maybe<Array<Scalars['String']>>;\n  tick_contains?: Maybe<Scalars['String']>;\n  tick_not_contains?: Maybe<Scalars['String']>;\n  tick_starts_with?: Maybe<Scalars['String']>;\n  tick_not_starts_with?: Maybe<Scalars['String']>;\n  tick_ends_with?: Maybe<Scalars['String']>;\n  tick_not_ends_with?: Maybe<Scalars['String']>;\n  liquidityGross?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_not?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_gt?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_lt?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_gte?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_lte?: Maybe<Scalars['BigDecimal']>;\n  liquidityGross_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  liquidityGross_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  liquidityNet?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_not?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_gt?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_lt?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_gte?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_lte?: Maybe<Scalars['BigDecimal']>;\n  liquidityNet_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  liquidityNet_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TickHourData_OrderBy {\n  Id = 'id',\n  PeriodStartUnix = 'periodStartUnix',\n  Pool = 'pool',\n  Tick = 'tick',\n  LiquidityGross = 'liquidityGross',\n  LiquidityNet = 'liquidityNet',\n  VolumeToken0 = 'volumeToken0',\n  VolumeToken1 = 'volumeToken1',\n  VolumeUsd = 'volumeUSD',\n  FeesUsd = 'feesUSD'\n}\n\nexport type Tick_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  poolAddress?: Maybe<Scalars['String']>;\n  poolAddress_not?: Maybe<Scalars['String']>;\n  poolAddress_gt?: Maybe<Scalars['String']>;\n  poolAddress_lt?: Maybe<Scalars['String']>;\n  poolAddress_gte?: Maybe<Scalars['String']>;\n  poolAddress_lte?: Maybe<Scalars['String']>;\n  poolAddress_in?: Maybe<Array<Scalars['String']>>;\n  poolAddress_not_in?: Maybe<Array<Scalars['String']>>;\n  poolAddress_contains?: Maybe<Scalars['String']>;\n  poolAddress_not_contains?: Maybe<Scalars['String']>;\n  poolAddress_starts_with?: Maybe<Scalars['String']>;\n  poolAddress_not_starts_with?: Maybe<Scalars['String']>;\n  poolAddress_ends_with?: Maybe<Scalars['String']>;\n  poolAddress_not_ends_with?: Maybe<Scalars['String']>;\n  tickIdx?: Maybe<Scalars['BigInt']>;\n  tickIdx_not?: Maybe<Scalars['BigInt']>;\n  tickIdx_gt?: Maybe<Scalars['BigInt']>;\n  tickIdx_lt?: Maybe<Scalars['BigInt']>;\n  tickIdx_gte?: Maybe<Scalars['BigInt']>;\n  tickIdx_lte?: Maybe<Scalars['BigInt']>;\n  tickIdx_in?: Maybe<Array<Scalars['BigInt']>>;\n  tickIdx_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  pool?: Maybe<Scalars['String']>;\n  pool_not?: Maybe<Scalars['String']>;\n  pool_gt?: Maybe<Scalars['String']>;\n  pool_lt?: Maybe<Scalars['String']>;\n  pool_gte?: Maybe<Scalars['String']>;\n  pool_lte?: Maybe<Scalars['String']>;\n  pool_in?: Maybe<Array<Scalars['String']>>;\n  pool_not_in?: Maybe<Array<Scalars['String']>>;\n  pool_contains?: Maybe<Scalars['String']>;\n  pool_not_contains?: Maybe<Scalars['String']>;\n  pool_starts_with?: Maybe<Scalars['String']>;\n  pool_not_starts_with?: Maybe<Scalars['String']>;\n  pool_ends_with?: Maybe<Scalars['String']>;\n  pool_not_ends_with?: Maybe<Scalars['String']>;\n  liquidityGross?: Maybe<Scalars['BigInt']>;\n  liquidityGross_not?: Maybe<Scalars['BigInt']>;\n  liquidityGross_gt?: Maybe<Scalars['BigInt']>;\n  liquidityGross_lt?: Maybe<Scalars['BigInt']>;\n  liquidityGross_gte?: Maybe<Scalars['BigInt']>;\n  liquidityGross_lte?: Maybe<Scalars['BigInt']>;\n  liquidityGross_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidityGross_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidityNet?: Maybe<Scalars['BigInt']>;\n  liquidityNet_not?: Maybe<Scalars['BigInt']>;\n  liquidityNet_gt?: Maybe<Scalars['BigInt']>;\n  liquidityNet_lt?: Maybe<Scalars['BigInt']>;\n  liquidityNet_gte?: Maybe<Scalars['BigInt']>;\n  liquidityNet_lte?: Maybe<Scalars['BigInt']>;\n  liquidityNet_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidityNet_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  price0?: Maybe<Scalars['BigDecimal']>;\n  price0_not?: Maybe<Scalars['BigDecimal']>;\n  price0_gt?: Maybe<Scalars['BigDecimal']>;\n  price0_lt?: Maybe<Scalars['BigDecimal']>;\n  price0_gte?: Maybe<Scalars['BigDecimal']>;\n  price0_lte?: Maybe<Scalars['BigDecimal']>;\n  price0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price1?: Maybe<Scalars['BigDecimal']>;\n  price1_not?: Maybe<Scalars['BigDecimal']>;\n  price1_gt?: Maybe<Scalars['BigDecimal']>;\n  price1_lt?: Maybe<Scalars['BigDecimal']>;\n  price1_gte?: Maybe<Scalars['BigDecimal']>;\n  price1_lte?: Maybe<Scalars['BigDecimal']>;\n  price1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  price1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_not?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken0?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken0_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken0_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken1?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesToken1_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesToken1_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesUSD?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  collectedFeesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  collectedFeesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  createdAtTimestamp?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_not?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_gt?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_lt?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_gte?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_lte?: Maybe<Scalars['BigInt']>;\n  createdAtTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  createdAtTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  createdAtBlockNumber?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_not?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_gt?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_lt?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_gte?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_lte?: Maybe<Scalars['BigInt']>;\n  createdAtBlockNumber_in?: Maybe<Array<Scalars['BigInt']>>;\n  createdAtBlockNumber_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidityProviderCount?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_not?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_gt?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_lt?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_gte?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_lte?: Maybe<Scalars['BigInt']>;\n  liquidityProviderCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  liquidityProviderCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Tick_OrderBy {\n  Id = 'id',\n  PoolAddress = 'poolAddress',\n  TickIdx = 'tickIdx',\n  Pool = 'pool',\n  LiquidityGross = 'liquidityGross',\n  LiquidityNet = 'liquidityNet',\n  Price0 = 'price0',\n  Price1 = 'price1',\n  VolumeToken0 = 'volumeToken0',\n  VolumeToken1 = 'volumeToken1',\n  VolumeUsd = 'volumeUSD',\n  UntrackedVolumeUsd = 'untrackedVolumeUSD',\n  FeesUsd = 'feesUSD',\n  CollectedFeesToken0 = 'collectedFeesToken0',\n  CollectedFeesToken1 = 'collectedFeesToken1',\n  CollectedFeesUsd = 'collectedFeesUSD',\n  CreatedAtTimestamp = 'createdAtTimestamp',\n  CreatedAtBlockNumber = 'createdAtBlockNumber',\n  LiquidityProviderCount = 'liquidityProviderCount'\n}\n\nexport type Token = {\n  __typename?: 'Token';\n  id: Scalars['ID'];\n  symbol: Scalars['String'];\n  name: Scalars['String'];\n  decimals: Scalars['BigInt'];\n  totalSupply: Scalars['BigInt'];\n  volume: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  untrackedVolumeUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  txCount: Scalars['BigInt'];\n  poolCount: Scalars['BigInt'];\n  totalValueLocked: Scalars['BigDecimal'];\n  totalValueLockedUSD: Scalars['BigDecimal'];\n  totalValueLockedUSDUntracked: Scalars['BigDecimal'];\n  derivedETH: Scalars['BigDecimal'];\n  whitelistPools: Array<Pool>;\n  tokenDayData: Array<TokenDayData>;\n};\n\n\nexport type TokenWhitelistPoolsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Pool_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Pool_Filter>;\n};\n\n\nexport type TokenTokenDayDataArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<TokenDayData_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<TokenDayData_Filter>;\n};\n\nexport type TokenDayData = {\n  __typename?: 'TokenDayData';\n  id: Scalars['ID'];\n  date: Scalars['Int'];\n  token: Token;\n  volume: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  untrackedVolumeUSD: Scalars['BigDecimal'];\n  totalValueLocked: Scalars['BigDecimal'];\n  totalValueLockedUSD: Scalars['BigDecimal'];\n  priceUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  open: Scalars['BigDecimal'];\n  high: Scalars['BigDecimal'];\n  low: Scalars['BigDecimal'];\n  close: Scalars['BigDecimal'];\n};\n\nexport type TokenDayData_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  date?: Maybe<Scalars['Int']>;\n  date_not?: Maybe<Scalars['Int']>;\n  date_gt?: Maybe<Scalars['Int']>;\n  date_lt?: Maybe<Scalars['Int']>;\n  date_gte?: Maybe<Scalars['Int']>;\n  date_lte?: Maybe<Scalars['Int']>;\n  date_in?: Maybe<Array<Scalars['Int']>>;\n  date_not_in?: Maybe<Array<Scalars['Int']>>;\n  token?: Maybe<Scalars['String']>;\n  token_not?: Maybe<Scalars['String']>;\n  token_gt?: Maybe<Scalars['String']>;\n  token_lt?: Maybe<Scalars['String']>;\n  token_gte?: Maybe<Scalars['String']>;\n  token_lte?: Maybe<Scalars['String']>;\n  token_in?: Maybe<Array<Scalars['String']>>;\n  token_not_in?: Maybe<Array<Scalars['String']>>;\n  token_contains?: Maybe<Scalars['String']>;\n  token_not_contains?: Maybe<Scalars['String']>;\n  token_starts_with?: Maybe<Scalars['String']>;\n  token_not_starts_with?: Maybe<Scalars['String']>;\n  token_ends_with?: Maybe<Scalars['String']>;\n  token_not_ends_with?: Maybe<Scalars['String']>;\n  volume?: Maybe<Scalars['BigDecimal']>;\n  volume_not?: Maybe<Scalars['BigDecimal']>;\n  volume_gt?: Maybe<Scalars['BigDecimal']>;\n  volume_lt?: Maybe<Scalars['BigDecimal']>;\n  volume_gte?: Maybe<Scalars['BigDecimal']>;\n  volume_lte?: Maybe<Scalars['BigDecimal']>;\n  volume_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volume_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLocked?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLocked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  priceUSD?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_not?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  priceUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TokenDayData_OrderBy {\n  Id = 'id',\n  Date = 'date',\n  Token = 'token',\n  Volume = 'volume',\n  VolumeUsd = 'volumeUSD',\n  UntrackedVolumeUsd = 'untrackedVolumeUSD',\n  TotalValueLocked = 'totalValueLocked',\n  TotalValueLockedUsd = 'totalValueLockedUSD',\n  PriceUsd = 'priceUSD',\n  FeesUsd = 'feesUSD',\n  Open = 'open',\n  High = 'high',\n  Low = 'low',\n  Close = 'close'\n}\n\nexport type TokenHourData = {\n  __typename?: 'TokenHourData';\n  id: Scalars['ID'];\n  periodStartUnix: Scalars['Int'];\n  token: Token;\n  volume: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  untrackedVolumeUSD: Scalars['BigDecimal'];\n  totalValueLocked: Scalars['BigDecimal'];\n  totalValueLockedUSD: Scalars['BigDecimal'];\n  priceUSD: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  open: Scalars['BigDecimal'];\n  high: Scalars['BigDecimal'];\n  low: Scalars['BigDecimal'];\n  close: Scalars['BigDecimal'];\n};\n\nexport type TokenHourData_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  periodStartUnix?: Maybe<Scalars['Int']>;\n  periodStartUnix_not?: Maybe<Scalars['Int']>;\n  periodStartUnix_gt?: Maybe<Scalars['Int']>;\n  periodStartUnix_lt?: Maybe<Scalars['Int']>;\n  periodStartUnix_gte?: Maybe<Scalars['Int']>;\n  periodStartUnix_lte?: Maybe<Scalars['Int']>;\n  periodStartUnix_in?: Maybe<Array<Scalars['Int']>>;\n  periodStartUnix_not_in?: Maybe<Array<Scalars['Int']>>;\n  token?: Maybe<Scalars['String']>;\n  token_not?: Maybe<Scalars['String']>;\n  token_gt?: Maybe<Scalars['String']>;\n  token_lt?: Maybe<Scalars['String']>;\n  token_gte?: Maybe<Scalars['String']>;\n  token_lte?: Maybe<Scalars['String']>;\n  token_in?: Maybe<Array<Scalars['String']>>;\n  token_not_in?: Maybe<Array<Scalars['String']>>;\n  token_contains?: Maybe<Scalars['String']>;\n  token_not_contains?: Maybe<Scalars['String']>;\n  token_starts_with?: Maybe<Scalars['String']>;\n  token_not_starts_with?: Maybe<Scalars['String']>;\n  token_ends_with?: Maybe<Scalars['String']>;\n  token_not_ends_with?: Maybe<Scalars['String']>;\n  volume?: Maybe<Scalars['BigDecimal']>;\n  volume_not?: Maybe<Scalars['BigDecimal']>;\n  volume_gt?: Maybe<Scalars['BigDecimal']>;\n  volume_lt?: Maybe<Scalars['BigDecimal']>;\n  volume_gte?: Maybe<Scalars['BigDecimal']>;\n  volume_lte?: Maybe<Scalars['BigDecimal']>;\n  volume_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volume_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLocked?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLocked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  priceUSD?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_not?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  priceUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  priceUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open?: Maybe<Scalars['BigDecimal']>;\n  open_not?: Maybe<Scalars['BigDecimal']>;\n  open_gt?: Maybe<Scalars['BigDecimal']>;\n  open_lt?: Maybe<Scalars['BigDecimal']>;\n  open_gte?: Maybe<Scalars['BigDecimal']>;\n  open_lte?: Maybe<Scalars['BigDecimal']>;\n  open_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high?: Maybe<Scalars['BigDecimal']>;\n  high_not?: Maybe<Scalars['BigDecimal']>;\n  high_gt?: Maybe<Scalars['BigDecimal']>;\n  high_lt?: Maybe<Scalars['BigDecimal']>;\n  high_gte?: Maybe<Scalars['BigDecimal']>;\n  high_lte?: Maybe<Scalars['BigDecimal']>;\n  high_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low?: Maybe<Scalars['BigDecimal']>;\n  low_not?: Maybe<Scalars['BigDecimal']>;\n  low_gt?: Maybe<Scalars['BigDecimal']>;\n  low_lt?: Maybe<Scalars['BigDecimal']>;\n  low_gte?: Maybe<Scalars['BigDecimal']>;\n  low_lte?: Maybe<Scalars['BigDecimal']>;\n  low_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close?: Maybe<Scalars['BigDecimal']>;\n  close_not?: Maybe<Scalars['BigDecimal']>;\n  close_gt?: Maybe<Scalars['BigDecimal']>;\n  close_lt?: Maybe<Scalars['BigDecimal']>;\n  close_gte?: Maybe<Scalars['BigDecimal']>;\n  close_lte?: Maybe<Scalars['BigDecimal']>;\n  close_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TokenHourData_OrderBy {\n  Id = 'id',\n  PeriodStartUnix = 'periodStartUnix',\n  Token = 'token',\n  Volume = 'volume',\n  VolumeUsd = 'volumeUSD',\n  UntrackedVolumeUsd = 'untrackedVolumeUSD',\n  TotalValueLocked = 'totalValueLocked',\n  TotalValueLockedUsd = 'totalValueLockedUSD',\n  PriceUsd = 'priceUSD',\n  FeesUsd = 'feesUSD',\n  Open = 'open',\n  High = 'high',\n  Low = 'low',\n  Close = 'close'\n}\n\nexport type Token_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  symbol?: Maybe<Scalars['String']>;\n  symbol_not?: Maybe<Scalars['String']>;\n  symbol_gt?: Maybe<Scalars['String']>;\n  symbol_lt?: Maybe<Scalars['String']>;\n  symbol_gte?: Maybe<Scalars['String']>;\n  symbol_lte?: Maybe<Scalars['String']>;\n  symbol_in?: Maybe<Array<Scalars['String']>>;\n  symbol_not_in?: Maybe<Array<Scalars['String']>>;\n  symbol_contains?: Maybe<Scalars['String']>;\n  symbol_not_contains?: Maybe<Scalars['String']>;\n  symbol_starts_with?: Maybe<Scalars['String']>;\n  symbol_not_starts_with?: Maybe<Scalars['String']>;\n  symbol_ends_with?: Maybe<Scalars['String']>;\n  symbol_not_ends_with?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  decimals?: Maybe<Scalars['BigInt']>;\n  decimals_not?: Maybe<Scalars['BigInt']>;\n  decimals_gt?: Maybe<Scalars['BigInt']>;\n  decimals_lt?: Maybe<Scalars['BigInt']>;\n  decimals_gte?: Maybe<Scalars['BigInt']>;\n  decimals_lte?: Maybe<Scalars['BigInt']>;\n  decimals_in?: Maybe<Array<Scalars['BigInt']>>;\n  decimals_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  totalSupply?: Maybe<Scalars['BigInt']>;\n  totalSupply_not?: Maybe<Scalars['BigInt']>;\n  totalSupply_gt?: Maybe<Scalars['BigInt']>;\n  totalSupply_lt?: Maybe<Scalars['BigInt']>;\n  totalSupply_gte?: Maybe<Scalars['BigInt']>;\n  totalSupply_lte?: Maybe<Scalars['BigInt']>;\n  totalSupply_in?: Maybe<Array<Scalars['BigInt']>>;\n  totalSupply_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  volume?: Maybe<Scalars['BigDecimal']>;\n  volume_not?: Maybe<Scalars['BigDecimal']>;\n  volume_gt?: Maybe<Scalars['BigDecimal']>;\n  volume_lt?: Maybe<Scalars['BigDecimal']>;\n  volume_gte?: Maybe<Scalars['BigDecimal']>;\n  volume_lte?: Maybe<Scalars['BigDecimal']>;\n  volume_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volume_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  untrackedVolumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  untrackedVolumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  txCount?: Maybe<Scalars['BigInt']>;\n  txCount_not?: Maybe<Scalars['BigInt']>;\n  txCount_gt?: Maybe<Scalars['BigInt']>;\n  txCount_lt?: Maybe<Scalars['BigInt']>;\n  txCount_gte?: Maybe<Scalars['BigInt']>;\n  txCount_lte?: Maybe<Scalars['BigInt']>;\n  txCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  txCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  poolCount?: Maybe<Scalars['BigInt']>;\n  poolCount_not?: Maybe<Scalars['BigInt']>;\n  poolCount_gt?: Maybe<Scalars['BigInt']>;\n  poolCount_lt?: Maybe<Scalars['BigInt']>;\n  poolCount_gte?: Maybe<Scalars['BigInt']>;\n  poolCount_lte?: Maybe<Scalars['BigInt']>;\n  poolCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  poolCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  totalValueLocked?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLocked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLocked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSDUntracked?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_not?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_gt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_lt?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_gte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_lte?: Maybe<Scalars['BigDecimal']>;\n  totalValueLockedUSDUntracked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  totalValueLockedUSDUntracked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  derivedETH?: Maybe<Scalars['BigDecimal']>;\n  derivedETH_not?: Maybe<Scalars['BigDecimal']>;\n  derivedETH_gt?: Maybe<Scalars['BigDecimal']>;\n  derivedETH_lt?: Maybe<Scalars['BigDecimal']>;\n  derivedETH_gte?: Maybe<Scalars['BigDecimal']>;\n  derivedETH_lte?: Maybe<Scalars['BigDecimal']>;\n  derivedETH_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  derivedETH_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  whitelistPools?: Maybe<Array<Scalars['String']>>;\n  whitelistPools_not?: Maybe<Array<Scalars['String']>>;\n  whitelistPools_contains?: Maybe<Array<Scalars['String']>>;\n  whitelistPools_not_contains?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum Token_OrderBy {\n  Id = 'id',\n  Symbol = 'symbol',\n  Name = 'name',\n  Decimals = 'decimals',\n  TotalSupply = 'totalSupply',\n  Volume = 'volume',\n  VolumeUsd = 'volumeUSD',\n  UntrackedVolumeUsd = 'untrackedVolumeUSD',\n  FeesUsd = 'feesUSD',\n  TxCount = 'txCount',\n  PoolCount = 'poolCount',\n  TotalValueLocked = 'totalValueLocked',\n  TotalValueLockedUsd = 'totalValueLockedUSD',\n  TotalValueLockedUsdUntracked = 'totalValueLockedUSDUntracked',\n  DerivedEth = 'derivedETH',\n  WhitelistPools = 'whitelistPools',\n  TokenDayData = 'tokenDayData'\n}\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  id: Scalars['ID'];\n  blockNumber: Scalars['BigInt'];\n  timestamp: Scalars['BigInt'];\n  gasUsed: Scalars['BigInt'];\n  gasPrice: Scalars['BigInt'];\n  mints: Array<Maybe<Mint>>;\n  burns: Array<Maybe<Burn>>;\n  swaps: Array<Maybe<Swap>>;\n  flashed: Array<Maybe<Flash>>;\n  collects: Array<Maybe<Collect>>;\n};\n\n\nexport type TransactionMintsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Mint_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Mint_Filter>;\n};\n\n\nexport type TransactionBurnsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Burn_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Burn_Filter>;\n};\n\n\nexport type TransactionSwapsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Swap_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Swap_Filter>;\n};\n\n\nexport type TransactionFlashedArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Flash_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Flash_Filter>;\n};\n\n\nexport type TransactionCollectsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<Collect_OrderBy>;\n  orderDirection?: Maybe<OrderDirection>;\n  where?: Maybe<Collect_Filter>;\n};\n\nexport type Transaction_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  blockNumber?: Maybe<Scalars['BigInt']>;\n  blockNumber_not?: Maybe<Scalars['BigInt']>;\n  blockNumber_gt?: Maybe<Scalars['BigInt']>;\n  blockNumber_lt?: Maybe<Scalars['BigInt']>;\n  blockNumber_gte?: Maybe<Scalars['BigInt']>;\n  blockNumber_lte?: Maybe<Scalars['BigInt']>;\n  blockNumber_in?: Maybe<Array<Scalars['BigInt']>>;\n  blockNumber_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp?: Maybe<Scalars['BigInt']>;\n  timestamp_not?: Maybe<Scalars['BigInt']>;\n  timestamp_gt?: Maybe<Scalars['BigInt']>;\n  timestamp_lt?: Maybe<Scalars['BigInt']>;\n  timestamp_gte?: Maybe<Scalars['BigInt']>;\n  timestamp_lte?: Maybe<Scalars['BigInt']>;\n  timestamp_in?: Maybe<Array<Scalars['BigInt']>>;\n  timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  gasUsed?: Maybe<Scalars['BigInt']>;\n  gasUsed_not?: Maybe<Scalars['BigInt']>;\n  gasUsed_gt?: Maybe<Scalars['BigInt']>;\n  gasUsed_lt?: Maybe<Scalars['BigInt']>;\n  gasUsed_gte?: Maybe<Scalars['BigInt']>;\n  gasUsed_lte?: Maybe<Scalars['BigInt']>;\n  gasUsed_in?: Maybe<Array<Scalars['BigInt']>>;\n  gasUsed_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  gasPrice?: Maybe<Scalars['BigInt']>;\n  gasPrice_not?: Maybe<Scalars['BigInt']>;\n  gasPrice_gt?: Maybe<Scalars['BigInt']>;\n  gasPrice_lt?: Maybe<Scalars['BigInt']>;\n  gasPrice_gte?: Maybe<Scalars['BigInt']>;\n  gasPrice_lte?: Maybe<Scalars['BigInt']>;\n  gasPrice_in?: Maybe<Array<Scalars['BigInt']>>;\n  gasPrice_not_in?: Maybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum Transaction_OrderBy {\n  Id = 'id',\n  BlockNumber = 'blockNumber',\n  Timestamp = 'timestamp',\n  GasUsed = 'gasUsed',\n  GasPrice = 'gasPrice',\n  Mints = 'mints',\n  Burns = 'burns',\n  Swaps = 'swaps',\n  Flashed = 'flashed',\n  Collects = 'collects'\n}\n\nexport type UniswapDayData = {\n  __typename?: 'UniswapDayData';\n  id: Scalars['ID'];\n  date: Scalars['Int'];\n  volumeETH: Scalars['BigDecimal'];\n  volumeUSD: Scalars['BigDecimal'];\n  volumeUSDUntracked: Scalars['BigDecimal'];\n  feesUSD: Scalars['BigDecimal'];\n  txCount: Scalars['BigInt'];\n  tvlUSD: Scalars['BigDecimal'];\n};\n\nexport type UniswapDayData_Filter = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  date?: Maybe<Scalars['Int']>;\n  date_not?: Maybe<Scalars['Int']>;\n  date_gt?: Maybe<Scalars['Int']>;\n  date_lt?: Maybe<Scalars['Int']>;\n  date_gte?: Maybe<Scalars['Int']>;\n  date_lte?: Maybe<Scalars['Int']>;\n  date_in?: Maybe<Array<Scalars['Int']>>;\n  date_not_in?: Maybe<Array<Scalars['Int']>>;\n  volumeETH?: Maybe<Scalars['BigDecimal']>;\n  volumeETH_not?: Maybe<Scalars['BigDecimal']>;\n  volumeETH_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeETH_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeETH_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeETH_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeETH_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeETH_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSDUntracked?: Maybe<Scalars['BigDecimal']>;\n  volumeUSDUntracked_not?: Maybe<Scalars['BigDecimal']>;\n  volumeUSDUntracked_gt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSDUntracked_lt?: Maybe<Scalars['BigDecimal']>;\n  volumeUSDUntracked_gte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSDUntracked_lte?: Maybe<Scalars['BigDecimal']>;\n  volumeUSDUntracked_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  volumeUSDUntracked_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_not?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  feesUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  feesUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  txCount?: Maybe<Scalars['BigInt']>;\n  txCount_not?: Maybe<Scalars['BigInt']>;\n  txCount_gt?: Maybe<Scalars['BigInt']>;\n  txCount_lt?: Maybe<Scalars['BigInt']>;\n  txCount_gte?: Maybe<Scalars['BigInt']>;\n  txCount_lte?: Maybe<Scalars['BigInt']>;\n  txCount_in?: Maybe<Array<Scalars['BigInt']>>;\n  txCount_not_in?: Maybe<Array<Scalars['BigInt']>>;\n  tvlUSD?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_not?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_gt?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_lt?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_gte?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_lte?: Maybe<Scalars['BigDecimal']>;\n  tvlUSD_in?: Maybe<Array<Scalars['BigDecimal']>>;\n  tvlUSD_not_in?: Maybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum UniswapDayData_OrderBy {\n  Id = 'id',\n  Date = 'date',\n  VolumeEth = 'volumeETH',\n  VolumeUsd = 'volumeUSD',\n  VolumeUsdUntracked = 'volumeUSDUntracked',\n  FeesUsd = 'feesUSD',\n  TxCount = 'txCount',\n  TvlUsd = 'tvlUSD'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  Allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  Deny = 'deny'\n}\n\nexport type TokenPriceQueryVariables = Exact<{\n  addressList?: Maybe<Array<Scalars['ID']> | Scalars['ID']>;\n}>;\n\n\nexport type TokenPriceQuery = (\n  { __typename?: 'Query' }\n  & { tokens: Array<(\n    { __typename?: 'Token' }\n    & Pick<Token, 'id' | 'symbol' | 'name' | 'derivedETH'>\n  )> }\n);\n\n\nexport const TokenPriceDocument = gql`\n    query tokenPrice($addressList: [ID!]) {\n  tokens(where: {id_in: $addressList}) {\n    id\n    symbol\n    name\n    derivedETH\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    tokenPrice(variables?: TokenPriceQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenPriceQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenPriceQuery>(TokenPriceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'tokenPrice');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { bigNumberToFixed, fixedToBigNumber, formatMaxDigits, toleranceMin } from '@/util/numbers';\nimport { StakedToken } from '@/util/stakedTokens';\nimport { getTokenAllowance, getTokenBalance, tokenApprove, TokenData } from '@/util/tokens';\nimport { BigNumber, Contract, FixedNumber, utils } from 'ethers';\nimport idleTokenAbi from './IdleToken.json';\nimport { TransactionResult } from './uniswapService';\nimport { web3Service } from './web3Service';\n\nconst idleAddresses = {\n  DAI: '0x3fE7940616e5Bc47b0775a0dccf6237893353bB4',\n  USDC: '0x5274891bEC421B39D23760c04A6755eCB444797C',\n  USDT: '0xF34842d05A1c888Ca02769A633DF37177415C2f8',\n  WBTC: '0x8C81121B15197fA0eEaEE1DC75533419DcfD3151',\n  WETH: '0xC8E6CA6E96a326dC448307A5fDE90a0b21fd7f80',\n};\nconst symbols = new Set<string>(Object.keys(idleAddresses));\n\n// Staking through idle.finance\nclass IdleService {\n  private getContract(symbol: string, withSigner: boolean): Contract {\n    const address = idleAddresses[symbol as keyof typeof idleAddresses];\n    // TODO: cache contract creation?\n    return new Contract(\n      address,\n      idleTokenAbi,\n      withSigner ? web3Service.getSigner() : web3Service.getProvider()\n    );\n  }\n\n  public async getTokenData(): Promise<StakedToken[]> {\n    const address = web3Service.status().address;\n    if (!address) {\n      return [];\n    }\n\n    // Enable this to test what things look like with 1 WETH staked:\n    const testContract = ''; // '0xC8E6CA6E96a326dC448307A5fDE90a0b21fd7f80'\n\n    const balanceMap = await Promise.all(\n      Object.values(idleAddresses).map((contractAddress) => {\n        if (contractAddress == testContract) return Promise.resolve(utils.parseEther('1'));\n        else return getTokenBalance(contractAddress, address);\n      })\n    );\n    let index = -1;\n    return Promise.all(\n      Object.entries(idleAddresses).map(async ([symbol, address]) => {\n        const decimals = 18; // 4-Jul-2021: the 5 addresses we use all have 18 as decimals.\n        // For future, better to look it up\n        index++;\n        const ownedBn = balanceMap[index];\n        const owned = bigNumberToFixed(ownedBn, decimals);\n        let value = FixedNumber.from(0.0);\n        if (ownedBn.gt(BigNumber.from(0))) {\n          const contract = this.getContract(symbol, false);\n          const tokenPrice: BigNumber = await contract.tokenPrice();\n          value = bigNumberToFixed(tokenPrice, decimals);\n          console.log(owned.toString(), value.toString());\n        }\n        const stakedValue = owned.mulUnsafe(value);\n        return {\n          id: address,\n          name: symbol,\n          symbol: symbol,\n          decimals: decimals,\n          ownedAmount: owned,\n          value: value.toUnsafeFloat(),\n          stakedUnderlyingValue: stakedValue,\n          description: `${formatMaxDigits(\n            stakedValue.toUnsafeFloat(),\n            3\n          )} deposited ${symbol} on idle.finance`,\n          hasStaked: true,\n        };\n      })\n    );\n  }\n\n  public supportedSymbols(): Set<string> {\n    return symbols;\n  }\n\n  public async depositToken(\n    token: TokenData,\n    accountAddress: string,\n    amount: FixedNumber\n  ): Promise<TransactionResult> {\n    const symbol = token.symbol;\n    if (!(symbol in idleAddresses)) {\n      throw new Error(`${symbol} not present in idle-supported symbols`);\n    }\n    const contractAddress = idleAddresses[symbol as keyof typeof idleAddresses];\n    const contract = this.getContract(symbol, true);\n    const amountBn = fixedToBigNumber(amount, token.decimals);\n\n    // Check if allowance is high enough\n    const allowance = await getTokenAllowance(token.id, accountAddress, contractAddress);\n    if (amountBn.gt(allowance)) {\n      // TODO: something smarter / better than unlimited approval\n      const unlimitedAllowance = BigNumber.from(2).pow(256).sub(1);\n      const ok = await tokenApprove(token.id, contractAddress, unlimitedAllowance);\n      console.log('token approve', ok);\n      const receipt = await ok.wait();\n      console.log('token approve receipt', receipt);\n    }\n\n    const balance = await getTokenBalance(token.id, accountAddress);\n    const finalAmount = toleranceMin(amountBn, balance);\n\n    const result = await contract.mintIdleToken(finalAmount, true, accountAddress);\n    console.log(result);\n    const receipt = await result.wait();\n    console.log(receipt);\n\n    return {\n      message: 'Success',\n      success: true,\n    };\n  }\n  public async redeemToken(\n    token: TokenData,\n    accountAddress: string,\n    amount: FixedNumber\n  ): Promise<TransactionResult> {\n    const symbol = token.symbol;\n    if (!(symbol in idleAddresses)) {\n      throw new Error(`${symbol} not present in idle-supported symbols`);\n    }\n    const contract = this.getContract(symbol, true);\n\n    // Calculate how much we need to redeem using tokenPriceWithFee\n    const priceWithFee: BigNumber = await contract.tokenPriceWithFee(accountAddress);\n    let redeemAmount = fixedToBigNumber(amount.divUnsafe(bigNumberToFixed(priceWithFee, 18)), 18);\n\n    const balance: BigNumber = await contract.balanceOf(accountAddress);\n    redeemAmount = toleranceMin(redeemAmount, balance);\n\n    const result = await contract.redeemIdleToken(redeemAmount);\n    console.log(result);\n    const receipt = await result.wait();\n    console.log(receipt);\n\n    return {\n      message: 'Success',\n      success: true,\n    };\n  }\n}\n\nconst idleService = new IdleService();\n\nexport { idleService };\n","import { PlannedOrder } from '@/orderplan/orderplan';\nimport { fixedToBigNumber } from '@/util/numbers';\nimport { BigNumber, ethers } from 'ethers';\nimport { OptimalRatesWithPartnerFees, ParaSwap, UNLIMITED_ALLOWANCE, Transaction } from 'paraswap';\nimport { TransactionResult } from './uniswapService';\nimport { web3Service } from './web3Service';\n\nconst paraSwap = new ParaSwap();\n\nexport interface PredictedOutput {\n  predictedOutput: BigNumber;\n}\n\ninterface ParaSwapPlan {\n  priceRoute: OptimalRatesWithPartnerFees;\n}\n\nexport type ParaSwapPredictedOutput = PredictedOutput & ParaSwapPlan;\n\nclass ParaswapService {\n  private referrer = 'TokenBlend';\n\n  public async getPredictedOutput(order: PlannedOrder): Promise<ParaSwapPredictedOutput> {\n    paraSwap.setWeb3Provider(web3Service.getExternalProvider());\n    const priceRoute = await paraSwap.getRate(\n      order.fromToken.id,\n      order.toToken.id,\n      fixedToBigNumber(order.sendAmount, order.fromToken.decimals).toString(),\n      undefined,\n      {\n        referrer: this.referrer,\n      }\n    );\n    console.log(priceRoute);\n    if ('message' in priceRoute) {\n      throw new Error(priceRoute.message);\n    } else {\n      return {\n        predictedOutput: BigNumber.from(priceRoute.destAmount),\n        priceRoute: priceRoute,\n      };\n    }\n  }\n\n  public async execute(\n    order: PlannedOrder,\n    plan: ParaSwapPredictedOutput\n  ): Promise<TransactionResult> {\n    const address = web3Service.status().address;\n    if (!address) {\n      throw new Error('web3 address not initialized');\n    }\n    paraSwap.setWeb3Provider(web3Service.getExternalProvider());\n\n    // Check if we have the allowance\n    const allowance = await paraSwap.getAllowance(address, order.fromToken.id);\n    if ('message' in allowance) {\n      throw new Error('error getting allowance for token: ' + allowance.message);\n    }\n    const allowanceBn = BigNumber.from(allowance.allowance);\n    const sendBn = fixedToBigNumber(order.sendAmount, order.fromToken.decimals);\n    if (allowanceBn.lt(sendBn)) {\n      const allowanceResult = await paraSwap.approveToken(\n        UNLIMITED_ALLOWANCE,\n        address,\n        order.fromToken.id\n      );\n      console.log(`allowance result: ${allowanceResult}`);\n      if (allowanceResult) {\n        // This is a transaction id, wait for it to complete.\n        const tx = await web3Service.getProvider().getTransaction(allowanceResult);\n        const receipt = await tx.wait();\n        console.log('allowance tx receipt', receipt);\n      }\n    }\n    // Reduce minimum output that we want by 0.5% for slippage\n    const minAmount = plan.predictedOutput.sub(plan.predictedOutput.div(200));\n\n    const tx = await paraSwap.buildTx(\n      order.fromToken.id,\n      order.toToken.id,\n      sendBn.toString(),\n      minAmount.toString(),\n      plan.priceRoute,\n      address,\n      this.referrer,\n      undefined,\n      undefined,\n      order.fromToken.decimals,\n      order.toToken.decimals\n    );\n    if ('message' in tx) {\n      throw new Error('error building tx: ' + tx.message);\n    }\n\n    console.log('paraswap transaction', tx);\n    const ethersTx = this.convertWeb3ToEthers(tx);\n\n    console.log('Converted to ethers', ethersTx);\n    const sentTx = await web3Service.getSigner().sendTransaction(ethersTx);\n    const receipt = await sentTx.wait();\n    console.log(receipt);\n\n    return {\n      message: 'Success',\n      success: true,\n    };\n  }\n\n  private convertWeb3ToEthers(\n    tx: Transaction & { gas?: string; gasPrice?: string }\n  ): ethers.providers.TransactionRequest {\n    let gasLimit: BigNumber | undefined = undefined;\n    let gasPrice: BigNumber | undefined = undefined;\n    if ('gas' in tx) {\n      gasLimit = BigNumber.from(tx['gas']);\n    }\n    if ('gasPrice' in tx) {\n      gasPrice = BigNumber.from(tx['gasPrice']);\n    }\n    return {\n      chainId: tx.chainId,\n      from: tx.from,\n      to: tx.to,\n      value: BigNumber.from(tx.value),\n      data: tx.data,\n      gasPrice,\n      gasLimit,\n    };\n  }\n}\n\nconst paraswapService = new ParaswapService();\n\nexport { paraswapService };\n","import { getSdk, Sdk, Token } from '@/data/uniswap_subgraph';\nimport { PlannedOrder } from '@/orderplan/orderplan';\nimport { fixedToBigNumber, reduceDecimals } from '@/util/numbers';\nimport { BigNumber, FixedNumber, utils } from 'ethers';\nimport { GraphQLClient } from 'graphql-request';\nimport {\n  TradeDirection,\n  UniswapPair,\n  UniswapPairFactory,\n  UniswapPairSettings,\n  UniswapVersion,\n} from 'simple-uniswap-sdk';\nimport { enzymeService } from './enzymeService';\nimport { PredictedOutput } from './paraswapService';\nimport { web3Service } from './web3Service';\n\nexport interface TransactionResult {\n  message: string;\n  success: boolean;\n}\n\ninterface UniswapPlanning {\n  fromAmount: BigNumber;\n  minimummToAmount: BigNumber;\n  estimatedToAmount: BigNumber;\n  path: string[];\n  pair: UniswapPairFactory;\n}\nfunction isTransactionResult(arg: UniswapPlanning | TransactionResult): arg is TransactionResult {\n  return 'success' in arg;\n}\n\nclass UniswapService {\n  public async getPredictedOutput(order: PlannedOrder): Promise<PredictedOutput> {\n    const plan = await this.planUniswap(order, [UniswapVersion.v2, UniswapVersion.v3]);\n    if (isTransactionResult(plan)) {\n      throw new Error(plan.message);\n    } else {\n      return { predictedOutput: plan.estimatedToAmount };\n    }\n  }\n\n  private async planUniswap(\n    plannedOrder: PlannedOrder,\n    versions: UniswapVersion[]\n  ): Promise<UniswapPlanning | TransactionResult> {\n    const address = web3Service.status().address;\n    if (address === undefined) {\n      return { message: 'web3 not initialized yet', success: false };\n    }\n\n    // Find best route\n    const uniswapPair = new UniswapPair({\n      fromTokenContractAddress: plannedOrder.fromToken.id,\n      toTokenContractAddress: plannedOrder.toToken.id,\n      ethereumAddress: address,\n      ethereumProvider: web3Service.getExternalProvider(),\n      settings: new UniswapPairSettings({\n        // if not supplied it will use `0.005` which is 0.5%\n        // please pass it in as a full number decimal so 0.7%\n        // would be 0.007\n        slippage: 0.005,\n        // if not supplied it will use 20 a deadline minutes\n        deadlineMinutes: 20,\n        // if not supplied it will try to use multihops\n        // if this is true it will require swaps to direct\n        // pairs\n        disableMultihops: false,\n        // for example if you only wanted to turn on quotes for v3 and not v3\n        // you can only support the v3 enum same works if you only want v2 quotes\n        // if you do not supply anything it query both v2 and v3\n        uniswapVersions: versions,\n      }),\n    });\n    const factory = await uniswapPair.createFactory();\n    const formattedInput = reduceDecimals(plannedOrder.sendAmount, plannedOrder.fromToken.decimals);\n    const currentBalance = await factory.getFromTokenBalance();\n    console.log(currentBalance);\n    if (\n      fixedToBigNumber(formattedInput, plannedOrder.fromToken.decimals).gt(\n        utils.parseUnits(currentBalance, plannedOrder.fromToken.decimals)\n      )\n    ) {\n      return { message: 'Trying to sell more than the portfolio has!', success: false };\n    }\n\n    const result = await factory.findBestRoute(formattedInput.toString(), TradeDirection.input);\n    console.log(result.bestRouteQuote);\n    const fromBn = utils.parseUnits(formattedInput.toString(), plannedOrder.fromToken.decimals);\n\n    const outputFixed = FixedNumber.fromString(result.bestRouteQuote.expectedConvertQuote);\n    // Allow a bit less tokens to come out of the swap, otherwise it fails too often\n    const minOutput = reduceDecimals(\n      outputFixed.mulUnsafe(FixedNumber.from('0.99')),\n      plannedOrder.toToken.decimals\n    );\n    const toBn = fixedToBigNumber(minOutput, plannedOrder.toToken.decimals);\n\n    return {\n      fromAmount: fromBn,\n      minimummToAmount: toBn,\n      estimatedToAmount: fixedToBigNumber(outputFixed, plannedOrder.toToken.decimals),\n      path: result.bestRouteQuote.routePathArray,\n      pair: factory,\n    };\n  }\n\n  public async execute(plannedOrder: PlannedOrder): Promise<TransactionResult> {\n    const plan = await this.planUniswap(plannedOrder, [UniswapVersion.v2, UniswapVersion.v3]);\n    if (isTransactionResult(plan)) {\n      return plan;\n    }\n    // This doesn't do anything with the plan generated before, can be made more efficient.\n    const tradeContext = await plan.pair.trade(\n      reduceDecimals(plannedOrder.sendAmount, plannedOrder.fromToken.decimals).toString(),\n      TradeDirection.input\n    );\n    try {\n      if (tradeContext.approvalTransaction) {\n        const approvedTx = await web3Service\n          .getSigner()\n          .sendTransaction(tradeContext.approvalTransaction);\n        const approvedReceipt = await approvedTx.wait();\n        console.log(approvedReceipt);\n      }\n      const tx = await web3Service.getSigner().sendTransaction(tradeContext.transaction);\n      const receipt = await tx.wait();\n      console.log(receipt);\n    } finally {\n      tradeContext.destroy();\n    }\n    return {\n      message: 'Success!',\n      success: true,\n    };\n  }\n\n  public async executeForEnzyme(plannedOrder: PlannedOrder): Promise<TransactionResult> {\n    // TODO: also support v3 for enzyme\n    const plan = await this.planUniswap(plannedOrder, [UniswapVersion.v2]);\n    if (isTransactionResult(plan)) {\n      return plan;\n    }\n    return enzymeService.executeUniswapV2Trade(plan.path, plan.minimummToAmount, plan.fromAmount);\n  }\n}\n\n// --- stuff for thegraph uniswap ---\n\nconst endpoint = 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3';\nfunction gql(endpoint: string): Sdk {\n  return getSdk(new GraphQLClient(endpoint));\n}\n\ntype TokenPriceData = Pick<Token, 'id' | 'symbol' | 'name' | 'derivedETH'>;\nexport async function getTokenPrices(addresses: string[]): Promise<Record<string, TokenPriceData>> {\n  // thegraph only returns results for lowercased addresses.\n  const queryResult = await gql(endpoint).tokenPrice({\n    addressList: addresses.map((addr) => addr.toLowerCase()),\n  });\n  const asMap = queryResult.tokens.reduce((map: Record<string, TokenPriceData>, token) => {\n    map[token.id] = token;\n    return map;\n  }, {});\n  // Make sure that the caller can retrieve items with the same cast IDs as he called us with\n  const result: Record<string, TokenPriceData> = {};\n  addresses.forEach((addr) => {\n    result[addr] = asMap[addr.toLowerCase()];\n  });\n  return result;\n}\n\nconst uniswapService = new UniswapService();\n\nexport { uniswapService };\n","\nimport { PlannedOrder, OrderType } from '@/orderplan/orderplan';\nimport {\n  bigNumberToFixed,\n  compareBignumber,\n  fixedToBigNumber,\n  formatMaxDigits,\n  numberMixin,\n  toleranceMin,\n} from '@/util/numbers';\nimport { getTokenBalance } from '@/util/tokens';\nimport { idleService } from '@/web3/idleService';\nimport { ParaSwapPredictedOutput, paraswapService, PredictedOutput } from '@/web3/paraswapService';\nimport { TransactionResult, uniswapService } from '@/web3/uniswapService';\nimport { extractErrorMessage, web3Service } from '@/web3/web3Service';\nimport { defineComponent, PropType, reactive, ref, Ref, watchEffect } from 'vue';\n\ninterface TransactionInProgress {\n  inProgress?: boolean;\n}\ninterface Option {\n  platform: string;\n  inProgress: boolean;\n  message?: string;\n  plan?: PredictedOutput;\n}\ninterface OrderOptions {\n  options?: Option[];\n  chosenPlatform?: string;\n}\ntype OrderWithResult = PlannedOrder &\n  Partial<TransactionResult> &\n  TransactionInProgress &\n  OrderOptions;\n\nexport default defineComponent({\n  name: 'OrderPlanDialog',\n  props: {\n    visible: Boolean,\n    orderPlan: { type: Object as PropType<PlannedOrder[]>, required: true },\n    isEnzyme: Boolean,\n  },\n  emits: ['update:visible'],\n  setup(props) {\n    const orderList: Ref<OrderWithResult[]> = ref([]);\n    watchEffect(() => {\n      orderList.value = props.orderPlan.map((order) => ({\n        ...order,\n        chosenPlatform: order.ordertype == OrderType.SWAP ? undefined : 'idle',\n      }));\n      console.log(props.orderPlan, orderList.value);\n    });\n    return { orderList };\n  },\n  methods: {\n    async calculateBest(order: OrderWithResult) {\n      const address = web3Service.status().address;\n      if (!address) {\n        throw new Error('web3 not initialized yet');\n      }\n      const uniswapOption: Option = reactive({\n        platform: 'Uniswap',\n        inProgress: true,\n      });\n      const paraswapOption: Option = reactive({\n        platform: 'Paraswap',\n        inProgress: true,\n      });\n      order.options = [uniswapOption, paraswapOption];\n      await this.prepareOrder(order, address);\n      const uniswapOutput = uniswapService.getPredictedOutput(order).then((output) => {\n        console.log('output uniswap: ', output);\n        uniswapOption.inProgress = false;\n        uniswapOption.plan = output;\n      });\n      const paraswapOutput = paraswapService.getPredictedOutput(order).then((output) => {\n        console.log('output paraswap: ', output);\n        paraswapOption.inProgress = false;\n        paraswapOption.plan = output;\n      });\n      await Promise.all([uniswapOutput, paraswapOutput]);\n      order.options.sort((a, b) => {\n        if (a.plan !== undefined && b.plan !== undefined) {\n          return -compareBignumber(a.plan.predictedOutput, b.plan.predictedOutput);\n        } else if (a.plan === undefined) {\n          if (b.plan === undefined) {\n            return 0;\n          } else {\n            return 1;\n          }\n        } else {\n          return -1;\n        }\n      });\n    },\n    async execute(order: OrderWithResult, platform?: string, plan?: PredictedOutput) {\n      order.inProgress = true;\n      order.message = undefined;\n      try {\n        const address = web3Service.status().address;\n        if (!address) {\n          throw new Error('connect wallet first');\n        }\n\n        let executeFunction: (arg: PlannedOrder) => Promise<TransactionResult>;\n        if (this.$props.isEnzyme) {\n          executeFunction = (order) => uniswapService.executeForEnzyme(order);\n        } else if (order.ordertype == OrderType.DEPOSIT) {\n          executeFunction = (order) =>\n            idleService.depositToken(order.fromToken, address, order.sendAmount);\n        } else if (order.ordertype == OrderType.REDEEM) {\n          executeFunction = (order) =>\n            idleService.redeemToken(order.fromToken, address, order.sendAmount);\n        } else {\n          await this.prepareOrder(order, address);\n          if (platform === undefined) {\n            // work on a copy so we keep the UI clean\n            const copy = { ...order };\n            await this.calculateBest(copy);\n            if (!copy.options || !copy.options[0]?.plan) {\n              throw new Error('No suitable option');\n            }\n            platform = copy.options[0].platform;\n            plan = copy.options[0].plan;\n            console.log(`${platform} selected as best: ${plan.predictedOutput.toString()}`);\n          }\n          switch (platform) {\n            case 'Uniswap':\n              executeFunction = (order) => uniswapService.execute(order);\n              break;\n            case 'Paraswap':\n              executeFunction = (order) =>\n                paraswapService.execute(order, plan as ParaSwapPredictedOutput);\n              break;\n            default:\n              throw new Error('Unknown platform: ' + platform);\n          }\n          order.chosenPlatform = platform;\n        }\n        const result = await executeFunction(order);\n        Object.assign(order, result);\n      } catch (error) {\n        console.log(error);\n        let message = extractErrorMessage(error);\n        order.success = false;\n        order.message = message;\n      } finally {\n        order.inProgress = false;\n      }\n    },\n    platformLogo(platform: string): string {\n      return require('@/assets/' + platform.toLowerCase() + '.png');\n    },\n    formatResult(order: PlannedOrder, option: Option): string {\n      const result = option.plan?.predictedOutput;\n      if (result === undefined) {\n        return '---';\n      }\n      const fixed = bigNumberToFixed(result, order.toToken.decimals);\n      return order.toToken.symbol + ' ' + formatMaxDigits(fixed.toUnsafeFloat());\n    },\n    isSwap(order: PlannedOrder): boolean {\n      return order.ordertype == OrderType.SWAP;\n    },\n    executeButtonText(order: PlannedOrder): string {\n      if (order.ordertype == OrderType.SWAP && !this.isEnzyme) {\n        return 'Execute best';\n      } else {\n        return 'Execute';\n      }\n    },\n    fromName(order: PlannedOrder): string {\n      const name = order.fromToken.name;\n      if (order.ordertype == OrderType.REDEEM) {\n        return 'Idle' + order.fromToken.symbol;\n      } else {\n        return name;\n      }\n    },\n    toName(order: PlannedOrder): string {\n      const name = order.toToken.name;\n      if (order.ordertype == OrderType.DEPOSIT) {\n        return 'Idle' + order.fromToken.symbol;\n      } else {\n        return name;\n      }\n    },\n    async prepareOrder(order: PlannedOrder, address: string) {\n      // Make sure that the amount wanted is not higher than our balance\n      const balance = await getTokenBalance(order.fromToken.id, address);\n      const amountBn = fixedToBigNumber(order.sendAmount, order.fromToken.decimals);\n      const newAmount = toleranceMin(amountBn, balance);\n      order.sendAmount = bigNumberToFixed(newAmount, order.fromToken.decimals);\n    },\n  },\n  mixins: [numberMixin],\n});\n","import { render } from \"./OrderPlanDialog.vue?vue&type=template&id=2b550cc3\"\nimport script from \"./OrderPlanDialog.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderPlanDialog.vue?vue&type=script&lang=ts\"\n\nimport \"./OrderPlanDialog.vue?vue&type=style&index=0&id=2b550cc3&lang=scss\"\nscript.render = render\n\nexport default script","<template>\n  <div>\n    <Dropdown\n      v-model=\"selectedDistribution\"\n      :options=\"distributions\"\n      optionLabel=\"name\"\n      placeholder=\"Select blend\"\n    />\n\n    <table class=\"table table-striped table-sm\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Token</th>\n          <th scope=\"col\" class=\"text-end\">Price</th>\n          <th scope=\"col\" class=\"text-end\">Current balance</th>\n          <th scope=\"col\" class=\"text-end\">Current value</th>\n          <th scope=\"col\" class=\"text-end\">Desired weight</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr class=\"align-middle\">\n          <td><b>Total</b></td>\n          <td colspan=\"2\"></td>\n          <td class=\"text-end\">{{ formatDollars(totalAmount) }}</td>\n          <td class=\"text-end\">\n            {{ totalPercentage.toFixed(1) }}\n          </td>\n        </tr>\n\n        <tr v-for=\"token in tokenData\" v-bind:key=\"token.name\" class=\"align-middle\">\n          <td class=\"d-flex align-items-center\">\n            <img v-if=\"token.logoUri\" :src=\"token.logoUri\" class=\"token-img me-2\" />\n            <div :title=\"token.id\">\n              <div>{{ token.name }}</div>\n              <pre class=\"mb-0\">{{ token.symbol }}</pre>\n            </div>\n          </td>\n          <td :title=\"formatPriceLong(token)\" class=\"text-end\">{{ formatPrice(token) }}</td>\n          <td class=\"text-end\" :title=\"tokenTitle(token)\">\n            {{ formatOwned(token) }}\n            <span v-if=\"withStaking\" class=\"staking\">\n              <span v-if=\"isStakedToken(token)\">\n                <svg viewBox=\"0 0 42 42\" class=\"staking-donut\">\n                  <circle\n                    class=\"donut-ring\"\n                    cx=\"21\"\n                    cy=\"21\"\n                    r=\"15.91549430918954\"\n                    fill=\"transparent\"\n                    stroke=\"#ffd76e\"\n                    stroke-width=\"5\"\n                  ></circle>\n                  <circle\n                    class=\"donut-segment\"\n                    cx=\"21\"\n                    cy=\"21\"\n                    r=\"15.91549430918954\"\n                    fill=\"transparent\"\n                    stroke=\"#0c58c2\"\n                    stroke-width=\"5\"\n                    :stroke-dasharray=\"getStroke(token)\"\n                    stroke-dashoffset=\"0\"\n                  ></circle></svg\n                ><img src=\"@/assets/idle.png\" class=\"staking-img\" />\n              </span>\n            </span>\n          </td>\n          <td class=\"text-end\">{{ formatValue(token) }}</td>\n          <td class=\"text-end\">\n            <div class=\"d-flex flex-column align-items-end\">\n              <InputText\n                :modelValue=\"formatMaxDigits(percentageMap[token.id])\"\n                @update:modelValue=\"percentageMap[token.id] = parseFloat($event)\"\n              />\n              <Slider v-model=\"percentageMap[token.id]\" />\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { calcPercentageMap, TokenData } from '@/util/tokens';\nimport { Distribution, getDistributions } from '@/util/tokenDistribution';\nimport { asyncComputed, debouncedWatch } from '@vueuse/core';\nimport { computed, defineComponent, PropType, reactive, Ref, ref, watch } from 'vue';\nimport Dropdown from 'primevue/dropdown';\nimport { numberMixin } from '@/util/numbers';\nimport { StakedToken } from '@/util/stakedTokens';\n\nfunction adjustRatios(\n  before: Record<string, number>,\n  after: Record<string, number>,\n  defaultKey: string\n) {\n  let N = 0;\n  while (N++ < 5) {\n    const totalAfter = Object.values(after).reduce((a, b) => a + b, 0.0);\n    if (totalAfter > 0.001 && Math.abs(totalAfter - 100) > 0.001) {\n      let adjustment = 100 - totalAfter;\n      const changedKeys = new Set(\n        Object.keys(before).filter((key) => Math.abs(before[key] - after[key]) > 0.0001)\n      );\n      // If the user didn't touch WETH, we can try to correct everything by adjusting that.\n      if (!changedKeys.has(defaultKey)) {\n        const newDefault = Math.max(0, after[defaultKey] + adjustment);\n        adjustment -= newDefault - after[defaultKey];\n        after[defaultKey] = newDefault;\n        changedKeys.add(defaultKey);\n      }\n\n      if (Math.abs(adjustment) > 0.001) {\n        // We need to apply the adjustment to other tokens, ideally ones that haven't been moved\n        const unmovedTotal = Object.keys(after)\n          .filter((key) => !changedKeys.has(key))\n          .map((key) => after[key])\n          .reduce((a, b) => a + b, 0.0);\n        if (unmovedTotal > 0.01) {\n          const adjustmentPerValue = adjustment / unmovedTotal;\n          Object.keys(after)\n            .filter((key) => !changedKeys.has(key))\n            .forEach((key) => {\n              const current = after[key];\n              const adjust = adjustmentPerValue * current;\n              after[key] += adjust;\n            });\n        } else {\n          // Just apply it to everything equally\n          const total = Object.values(after).reduce((a, b) => a + b, 0.0);\n          const adjustmentPerValue = adjustment / total;\n          Object.keys(after).forEach((key) => {\n            const current = after[key];\n            const adjust = adjustmentPerValue * current;\n            after[key] += adjust;\n          });\n        }\n      }\n      Object.keys(after).forEach((key) => {\n        let current = after[key];\n        if (isNaN(current)) {\n          current = 0;\n        }\n        after[key] = Math.max(0, Math.min(100, parseFloat(current.toFixed(3))));\n      });\n    } else {\n      break;\n    }\n  }\n}\n\nexport default defineComponent({\n  name: 'SliderPanel',\n  props: {\n    tokenData: {\n      type: Array as PropType<TokenData[] | StakedToken[]>,\n      required: true,\n    },\n    modelValue: Object as PropType<Record<string, number>>,\n    withStaking: Boolean,\n  },\n  components: { Dropdown },\n  setup(props, { emit }) {\n    const percentageMap: Record<string, number> = reactive({});\n    var wethContract = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\n    watch(\n      () => [props.tokenData, props.modelValue],\n      () => {\n        if (props.modelValue) {\n          for (let [id, value] of Object.entries(props.modelValue)) {\n            percentageMap[id] = value;\n          }\n        } else {\n          Object.assign(percentageMap, calcPercentageMap(props.tokenData));\n        }\n        if (\n          percentageMap[wethContract] === undefined &&\n          wethContract.toLowerCase() in percentageMap\n        ) {\n          wethContract = wethContract.toLowerCase();\n        }\n        for (let [, token] of Object.entries(props.tokenData)) {\n          if (!(token.id in percentageMap)) {\n            percentageMap[token.id] = 0.0;\n          }\n        }\n      }\n    );\n    const prevMap = {};\n    const normalize = () => {\n      adjustRatios(prevMap, percentageMap, wethContract);\n      Object.assign(prevMap, percentageMap);\n    };\n\n    debouncedWatch(\n      percentageMap,\n      () => {\n        normalize();\n      },\n      { debounce: 500 }\n    );\n\n    const totalPercentage = computed(() => {\n      var value = 0.0;\n      for (let [, itemValue] of Object.entries(percentageMap)) {\n        value += itemValue;\n      }\n      return value;\n    });\n\n    watch(percentageMap, () => {\n      emit('update:modelValue', percentageMap);\n    });\n\n    const totalAmount = computed(() => {\n      var value = 0.0;\n      for (let [, token] of Object.entries(props.tokenData)) {\n        value += token.ownedAmount.toUnsafeFloat() * token.value;\n      }\n      return value;\n    });\n\n    const selectedDistribution: Ref<Distribution | null> = ref(null);\n    const distributions = asyncComputed(async () => getDistributions(props.tokenData));\n    watch(selectedDistribution, () => {\n      const values = selectedDistribution.value?.map;\n      if (values) {\n        Object.keys(percentageMap).forEach((key) => {\n          percentageMap[key] = 0.0;\n        });\n        Object.assign(percentageMap, values);\n      }\n    });\n    return { percentageMap, totalPercentage, totalAmount, selectedDistribution, distributions };\n  },\n  methods: {\n    formatPrice(token: TokenData): string {\n      if (token.value === 0.0) {\n        return '---';\n      }\n      return this.formatDollarPrice(token.value);\n    },\n    formatPriceLong(token: TokenData): string {\n      return token.value.toString();\n    },\n    formatOwned(token: TokenData): string {\n      return this.formatMaxDigits(token.ownedAmount.toUnsafeFloat());\n    },\n    formatValue(token: TokenData): string {\n      return this.formatDollars(token.ownedAmount.toUnsafeFloat() * token.value);\n    },\n    tokenTitle(token: TokenData): string {\n      return 'description' in token ? (token as StakedToken).description : '';\n    },\n    isStakedToken(token: TokenData): boolean {\n      return (\n        'hasStaked' in token &&\n        (token as StakedToken).hasStaked &&\n        token.ownedAmount.toUnsafeFloat() > 0\n      );\n    },\n    getStroke(_token: TokenData): string {\n      const token = _token as StakedToken;\n      // Needs to be %, 100 - %\n      const stakedPercentage =\n        (token.stakedUnderlyingValue.toUnsafeFloat() / token.ownedAmount.toUnsafeFloat()) * 100;\n      return `${stakedPercentage.toFixed(3)} ${(100 - stakedPercentage).toFixed(3)}`;\n    },\n  },\n  mixins: [numberMixin],\n});\n</script>\n<style scoped>\n.p-inputtext {\n  width: 8rem;\n  padding: 0.2rem;\n  font-size: 0.8rem;\n}\n.p-slider-horizontal {\n  width: 8rem;\n  margin-bottom: 0.1rem;\n}\n.staking {\n  position: relative;\n  text-align: center;\n  width: 2rem;\n  display: inline-block;\n}\n.staking-donut {\n  width: 1.8rem;\n  height: 1.8rem;\n}\n.staking-img {\n  position: absolute;\n  margin: auto;\n  height: 0.8rem;\n  width: 0.8rem;\n  left: 0;\n  right: 0;\n  margin-top: 0.5rem;\n}\n</style>\n","import { TokenData } from './tokens';\n\nexport interface Distribution {\n  name: string;\n  map: Record<string, number>;\n}\ntype SymbolMap = { [key: string]: number };\n\nconst lending: SymbolMap = {\n  AAVE: 10.7,\n  MKR: 7,\n  COMP: 6.7,\n  UNI: 5.6,\n  YFI: 3,\n  SNX: 1,\n};\n\nconst dexes: SymbolMap = {\n  CRV: 8.3,\n  UNI: 5.6,\n  BNT: 1.2,\n  '1INCH': 0.035,\n  GNO: 0.021,\n};\n\nfunction convert(token: TokenData[], name: string, dist: SymbolMap): Distribution {\n  const map: Record<string, number> = {};\n  let sum = 0.0;\n  token.forEach((t) => {\n    const v = dist[t.symbol] ?? 0.0;\n    sum += v;\n    map[t.id] = v;\n  });\n  Object.keys(map).forEach((k) => {\n    map[k] = (map[k] * 100) / sum;\n  });\n  return { name, map };\n}\n/*\n TODO: add more interesting distributions eg market cap weighted\n */\nexport async function getDistributions(token: TokenData[]): Promise<Distribution[]> {\n  const map: Record<string, number> = {};\n  token.forEach((t) => {\n    map[t.id] = 100.0 / token.length;\n  });\n  const equalWeighted = {\n    name: 'All Equal',\n    map,\n  };\n\n  const filteredMap: Record<string, number> = {};\n  token\n    .filter((it) => it.symbol == 'WETH' || it.symbol == 'BAT')\n    .forEach((t) => {\n      filteredMap[t.id] = 50;\n    });\n  const filtered = {\n    name: 'Only ETH and BAT',\n    map: filteredMap,\n  };\n\n  return [\n    equalWeighted,\n    filtered,\n    convert(token, 'Lending', lending),\n    convert(token, 'Dexes', dexes),\n  ];\n}\n","\nimport { calcPercentageMap, TokenData } from '@/util/tokens';\nimport { Distribution, getDistributions } from '@/util/tokenDistribution';\nimport { asyncComputed, debouncedWatch } from '@vueuse/core';\nimport { computed, defineComponent, PropType, reactive, Ref, ref, watch } from 'vue';\nimport Dropdown from 'primevue/dropdown';\nimport { numberMixin } from '@/util/numbers';\nimport { StakedToken } from '@/util/stakedTokens';\n\nfunction adjustRatios(\n  before: Record<string, number>,\n  after: Record<string, number>,\n  defaultKey: string\n) {\n  let N = 0;\n  while (N++ < 5) {\n    const totalAfter = Object.values(after).reduce((a, b) => a + b, 0.0);\n    if (totalAfter > 0.001 && Math.abs(totalAfter - 100) > 0.001) {\n      let adjustment = 100 - totalAfter;\n      const changedKeys = new Set(\n        Object.keys(before).filter((key) => Math.abs(before[key] - after[key]) > 0.0001)\n      );\n      // If the user didn't touch WETH, we can try to correct everything by adjusting that.\n      if (!changedKeys.has(defaultKey)) {\n        const newDefault = Math.max(0, after[defaultKey] + adjustment);\n        adjustment -= newDefault - after[defaultKey];\n        after[defaultKey] = newDefault;\n        changedKeys.add(defaultKey);\n      }\n\n      if (Math.abs(adjustment) > 0.001) {\n        // We need to apply the adjustment to other tokens, ideally ones that haven't been moved\n        const unmovedTotal = Object.keys(after)\n          .filter((key) => !changedKeys.has(key))\n          .map((key) => after[key])\n          .reduce((a, b) => a + b, 0.0);\n        if (unmovedTotal > 0.01) {\n          const adjustmentPerValue = adjustment / unmovedTotal;\n          Object.keys(after)\n            .filter((key) => !changedKeys.has(key))\n            .forEach((key) => {\n              const current = after[key];\n              const adjust = adjustmentPerValue * current;\n              after[key] += adjust;\n            });\n        } else {\n          // Just apply it to everything equally\n          const total = Object.values(after).reduce((a, b) => a + b, 0.0);\n          const adjustmentPerValue = adjustment / total;\n          Object.keys(after).forEach((key) => {\n            const current = after[key];\n            const adjust = adjustmentPerValue * current;\n            after[key] += adjust;\n          });\n        }\n      }\n      Object.keys(after).forEach((key) => {\n        let current = after[key];\n        if (isNaN(current)) {\n          current = 0;\n        }\n        after[key] = Math.max(0, Math.min(100, parseFloat(current.toFixed(3))));\n      });\n    } else {\n      break;\n    }\n  }\n}\n\nexport default defineComponent({\n  name: 'SliderPanel',\n  props: {\n    tokenData: {\n      type: Array as PropType<TokenData[] | StakedToken[]>,\n      required: true,\n    },\n    modelValue: Object as PropType<Record<string, number>>,\n    withStaking: Boolean,\n  },\n  components: { Dropdown },\n  setup(props, { emit }) {\n    const percentageMap: Record<string, number> = reactive({});\n    var wethContract = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\n    watch(\n      () => [props.tokenData, props.modelValue],\n      () => {\n        if (props.modelValue) {\n          for (let [id, value] of Object.entries(props.modelValue)) {\n            percentageMap[id] = value;\n          }\n        } else {\n          Object.assign(percentageMap, calcPercentageMap(props.tokenData));\n        }\n        if (\n          percentageMap[wethContract] === undefined &&\n          wethContract.toLowerCase() in percentageMap\n        ) {\n          wethContract = wethContract.toLowerCase();\n        }\n        for (let [, token] of Object.entries(props.tokenData)) {\n          if (!(token.id in percentageMap)) {\n            percentageMap[token.id] = 0.0;\n          }\n        }\n      }\n    );\n    const prevMap = {};\n    const normalize = () => {\n      adjustRatios(prevMap, percentageMap, wethContract);\n      Object.assign(prevMap, percentageMap);\n    };\n\n    debouncedWatch(\n      percentageMap,\n      () => {\n        normalize();\n      },\n      { debounce: 500 }\n    );\n\n    const totalPercentage = computed(() => {\n      var value = 0.0;\n      for (let [, itemValue] of Object.entries(percentageMap)) {\n        value += itemValue;\n      }\n      return value;\n    });\n\n    watch(percentageMap, () => {\n      emit('update:modelValue', percentageMap);\n    });\n\n    const totalAmount = computed(() => {\n      var value = 0.0;\n      for (let [, token] of Object.entries(props.tokenData)) {\n        value += token.ownedAmount.toUnsafeFloat() * token.value;\n      }\n      return value;\n    });\n\n    const selectedDistribution: Ref<Distribution | null> = ref(null);\n    const distributions = asyncComputed(async () => getDistributions(props.tokenData));\n    watch(selectedDistribution, () => {\n      const values = selectedDistribution.value?.map;\n      if (values) {\n        Object.keys(percentageMap).forEach((key) => {\n          percentageMap[key] = 0.0;\n        });\n        Object.assign(percentageMap, values);\n      }\n    });\n    return { percentageMap, totalPercentage, totalAmount, selectedDistribution, distributions };\n  },\n  methods: {\n    formatPrice(token: TokenData): string {\n      if (token.value === 0.0) {\n        return '---';\n      }\n      return this.formatDollarPrice(token.value);\n    },\n    formatPriceLong(token: TokenData): string {\n      return token.value.toString();\n    },\n    formatOwned(token: TokenData): string {\n      return this.formatMaxDigits(token.ownedAmount.toUnsafeFloat());\n    },\n    formatValue(token: TokenData): string {\n      return this.formatDollars(token.ownedAmount.toUnsafeFloat() * token.value);\n    },\n    tokenTitle(token: TokenData): string {\n      return 'description' in token ? (token as StakedToken).description : '';\n    },\n    isStakedToken(token: TokenData): boolean {\n      return (\n        'hasStaked' in token &&\n        (token as StakedToken).hasStaked &&\n        token.ownedAmount.toUnsafeFloat() > 0\n      );\n    },\n    getStroke(_token: TokenData): string {\n      const token = _token as StakedToken;\n      // Needs to be %, 100 - %\n      const stakedPercentage =\n        (token.stakedUnderlyingValue.toUnsafeFloat() / token.ownedAmount.toUnsafeFloat()) * 100;\n      return `${stakedPercentage.toFixed(3)} ${(100 - stakedPercentage).toFixed(3)}`;\n    },\n  },\n  mixins: [numberMixin],\n});\n","import { render } from \"./SliderPanel.vue?vue&type=template&id=08653f40&scoped=true\"\nimport script from \"./SliderPanel.vue?vue&type=script&lang=ts\"\nexport * from \"./SliderPanel.vue?vue&type=script&lang=ts\"\n\nimport \"./SliderPanel.vue?vue&type=style&index=0&id=08653f40&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-08653f40\"\n\nexport default script","interface SliderChangeResult {\n  message: string;\n  hasChanges: boolean;\n}\n\ntype Distribution = Record<string, number>;\n\nexport function calcSliderChangeResult(\n  current: Distribution,\n  old: Distribution\n): SliderChangeResult {\n  let valueChange = 0.0;\n  let tokensChanged = 0;\n  let tokensTotal = 0;\n  Object.entries(current).forEach((entry) => {\n    const original = old[entry[0]] ?? 0.0;\n    if (entry[1] > 0 || original > 0) {\n      valueChange += Math.abs(entry[1] - original);\n      tokensTotal++;\n      if (entry[1] != original) {\n        tokensChanged++;\n      }\n    }\n  });\n  return {\n    hasChanges: tokensChanged > 0,\n    message: `${tokensChanged} / ${tokensTotal} changed, ${valueChange.toFixed(\n      1\n    )} % total portfolio adjustment.`,\n  };\n}\n","import { TokenList, TokenInfo } from '@uniswap/token-lists';\n\nconst tokenListUrls = [\n  'https://gateway.ipfs.io/ipns/tokens.uniswap.org',\n  'https://www.gemini.com/uniswap/manifest.json',\n];\n\n// The default uniswap list has a bunch of tokens that don't even exist on uniswap v3 and thegraph price\n// query then returns nothing. We therefore filter out coins that have data.\n// Generated with code like this:\n/*\n      const tokenPriceMap = getTokenPrices(tokens.map((token) => token.address));\n      const tokenPrices = await tokenPriceMap;\n      console.log(tokens.filter(token => tokenPrices[token.address] === undefined || tokenPrices[token.address].derivedETH <= 0)\n        .map(token => `'${token.address}', // ${token.symbol}\\n`).reduce((str, item) => str + item, \"\"));\n*/\nconst addressFilter = new Set(\n  [\n    '0xE41d2489571d322189246DaFA5ebDe1F4699F498', // ZRX\n    '0xfF20817765cB7f73d4bde2e66e067E58D11095C2', // AMP\n    '0x960b236A07cf122663c4303350609A66A7B288C0', // ANT\n    '0xba100000625a3754423978a60c9317c58a424e3D', // BAL\n    '0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55', // BAND\n    '0x41e5560054824eA6B0732E656E3Ad64E20e94E45', // CVC\n    '0x056fd409e1d7a124bd7017459dfea2f387b6d5cd', // GUSD\n    '0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC', // KEEP\n    '0xdd974D5C2e2928deA5F71b9825b8b646686BD200', // KNC\n    '0xA4e8C3Ec456107eA67d3075bF9e3DF3A75823DB0', // LOOM\n    '0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD', // LRC\n    '0xec67005c4E498Ec7f55E092bd1d35cbC47C91892', // MLN\n    '0x4fE83213D56308330EC302a8BD641f1d0113A4Cc', // NU\n    '0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671', // NMR\n    '0x45804880De22913dAFE09f4980848ECE6EcbAf78', // PAXG\n    '0x408e41876cCCDC0F92210600ef50372656052a38', // REN\n    '0x1985365e9f78359a9B6AD760e32412f4a445E862', // REP\n    '0x221657776846890989a759BA2973e427DfF5C9bB', // REPv2\n    '0x3845badAde8e6dFF049820680d1F14bD3903a5d0', // SAND\n    '0x00c83aecc790e8a4453e5dd3b0b4b3680501a7a7', // SKL\n    '0xB64ef51C888972c908CFacf59B47C1AfBC0Ab8aC', // STORJ\n    '0x0AbdAce70D3790235af448C88547603b945604ea', // DNT\n    '0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa', // TBTC]);\n  ].map((s) => s.toLowerCase())\n);\n\nexport async function fetchTokens(): Promise<TokenInfo[]> {\n  const results = [];\n  for (const url of tokenListUrls) {\n    results.push(fetch(url));\n  }\n\n  const tokens: TokenInfo[] = [];\n  const addedTokens = new Set<string>();\n  for (const result of results) {\n    const response = await result;\n    const tokenList: TokenList = await response.json();\n    tokens.push(\n      ...tokenList.tokens\n        .filter(\n          (token) =>\n            token.chainId == 1 &&\n            !addedTokens.has(token.address.toLowerCase()) &&\n            !addressFilter.has(token.address.toLowerCase())\n        )\n        .map((token) => {\n          addedTokens.add(token.address.toLowerCase());\n          if (token.logoURI && token.logoURI.includes('ipfs://')) {\n            return {\n              ...token,\n              logoURI: token.logoURI.replace('ipfs://', 'https://gateway.ipfs.io/ipfs/'),\n            };\n          } else {\n            return token;\n          }\n        })\n    );\n  }\n  tokens.sort((a, b) => {\n    const name1 = a.name;\n    const name2 = b.name;\n    if (name1 > name2) {\n      return 1;\n    }\n    if (name1 < name2) {\n      return -1;\n    }\n    return 0;\n  });\n  return tokens;\n}\n","\nimport OrderPlanDialog from '@/components/OrderPlanDialog.vue';\nimport SliderPanel from '@/components/SliderPanel.vue';\nimport { getTokens } from '@/data/enzymegraph';\nimport { defaultOrderPlanner, PlannedOrder } from '@/orderplan/orderplan';\nimport { calcSliderChangeResult } from '@/util/sliderUtil';\nimport { fetchTokens } from '@/util/tokenlist';\nimport { calcPercentageMap, TokenData } from '@/util/tokens';\nimport { enzymeService, Fund } from '@/web3/enzymeService';\nimport { Provider, web3Service } from '@/web3/web3Service';\nimport { StandardToken, VaultLib } from '@enzymefinance/protocol';\nimport { asyncComputed } from '@vueuse/core';\nimport { BigNumber, FixedNumber } from 'ethers';\nimport { computed, defineComponent, Ref, ref, watchEffect } from 'vue';\n\nasync function trackAssets(\n  address: string,\n  provider: Provider\n): Promise<Record<string, BigNumber>> {\n  const lib = new VaultLib(address, web3Service.getProvider());\n  const holdings = await lib.getTrackedAssets();\n  const tokenMap: Record<string, BigNumber> = {};\n  await Promise.all(\n    holdings.map((token) => {\n      const tokenContract = new StandardToken(token, provider);\n      return tokenContract.balanceOf\n        .args(address)\n        .call()\n        .then((value) => (tokenMap[token.toLowerCase()] = value));\n    })\n  );\n  return tokenMap;\n}\n\nexport default defineComponent({\n  name: 'EnzymeSliders',\n  setup() {\n    // TODO: if we keep using this, add a filtering textbox to quickly filter on substring of names as\n    // there are very many tokens listed.\n    const partialTokens: Ref<TokenData[]> = asyncComputed(async () => {\n      const tokenRequestResult = await getTokens(web3Service.isMainnet());\n      const tokenInfoMap = new Map(\n        (await fetchTokens()).map((token) => [token.address.toLowerCase(), token])\n      );\n      const asTokenData: TokenData[] = tokenRequestResult.assets\n        // not sure why, the bot example code also filters for this\n        .filter((asset) => !asset.derivativeType)\n        .map((asset) => ({\n          id: asset.id.toLowerCase(),\n          name: asset.name,\n          symbol: asset.symbol,\n          value: parseFloat(asset.price?.price ?? '-1'),\n          ownedAmount: FixedNumber.from('0'),\n          decimals: asset.decimals,\n          logoUri:\n            tokenInfoMap.get(asset.id.toLowerCase())?.logoURI ??\n            `https://cryptoicon-api.vercel.app/api/icon/${asset.symbol.toLowerCase()}`,\n        }));\n      return asTokenData;\n    });\n\n    const tokens: Ref<TokenData[]> = ref([]);\n    const distribution: Ref<Record<string, number>> = ref({});\n    const startingDistribution: Ref<Record<string, number>> = ref({});\n\n    const funds = computed(() => enzymeService.getFunds());\n    const selectFund = (fund: Fund) => enzymeService.selectFund(fund);\n\n    watchEffect(async () => {\n      const fund = enzymeService.status().selectedFund;\n      const tokenList = partialTokens.value;\n      if (tokenList) {\n        if (fund) {\n          const assetMap = await trackAssets(fund.id, web3Service.getProvider());\n          const daiValue = tokenList.find((token) => token.symbol == 'DAI')?.value ?? 1.0;\n          tokens.value = tokenList\n            .map((token) => {\n              let value = token.value / daiValue;\n              if (value < 0) {\n                // TODO: look up value on uniswap\n                value = 1.0;\n              }\n              let owned = token.ownedAmount;\n              const ownedBigNumber = assetMap[token.id];\n              if (ownedBigNumber) {\n                owned = FixedNumber.fromValue(ownedBigNumber, token.decimals);\n              }\n              return {\n                ...token,\n                ownedAmount: owned,\n                value: value,\n              };\n            })\n            .sort(\n              (a, b) =>\n                b.value * b.ownedAmount.toUnsafeFloat() - a.value * a.ownedAmount.toUnsafeFloat()\n            );\n          distribution.value = calcPercentageMap(tokens.value);\n          startingDistribution.value = Object.assign({}, distribution.value);\n        } else {\n          tokens.value = tokenList;\n        }\n      }\n    });\n\n    const orderVisible = ref(false);\n    const distributionText = ref('');\n    watchEffect(() => {\n      const result = calcSliderChangeResult(distribution.value, startingDistribution.value);\n      orderVisible.value = result.hasChanges;\n      distributionText.value = result.message;\n    });\n\n    const displayPlan = ref(false);\n    const orderPlan: Ref<PlannedOrder[]> = ref([]);\n\n    const plan = () => {\n      orderPlan.value = defaultOrderPlanner.createPlan(tokens.value, distribution.value);\n      displayPlan.value = true;\n    };\n    return {\n      tokens,\n      distribution,\n      funds,\n      state: web3Service.status(),\n      selectFund,\n      enzymeState: enzymeService.status(),\n      distributionText,\n      plan,\n      displayPlan,\n      orderPlan,\n      orderVisible,\n    };\n  },\n  components: { SliderPanel, OrderPlanDialog },\n});\n","import { render } from \"./EnzymeSliders.vue?vue&type=template&id=bf9846ee&scoped=true\"\nimport script from \"./EnzymeSliders.vue?vue&type=script&lang=ts\"\nexport * from \"./EnzymeSliders.vue?vue&type=script&lang=ts\"\n\nimport \"./EnzymeSliders.vue?vue&type=style&index=0&id=bf9846ee&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-bf9846ee\"\n\nexport default script","<template>\n  <div>\n    <h3>Curve farming status on Enzyme</h3>\n  </div>\n\n  <div>\n    <p>Your farming positions on Curve</p>\n    <table>\n      <tr>\n        <th>Pool</th>\n        <th>Owned</th>\n        <th>Rewards</th>\n        <th>Cost of claim and deposit</th>\n        <th>Suggested Action</th>\n      </tr>\n      <tr v-for=\"item in tokens\" :key=\"item.id\">\n        <th scope=\"row\">{{ item.name }}</th>\n        <td>{{ item.ownedAmount }}</td>\n        <td>0.3 crv</td>\n        <td>0.03 eth</td>\n        <td>-</td>\n      </tr>\n    </table>\n  </div>\n\n  <div>\n    <p>Gas Price: {{ gasPrice }} gwei</p>\n  </div>\n</template>\n\n<script lang=\"ts\">\n/* eslint-disable vue/no-unused-components */\nimport FarmingStrategy from '@/components/Farming.vue'; // @ is an alias to /src\nimport { web3Service, Provider } from '@/web3/web3Service';\nimport { BigNumber, FixedNumber } from 'ethers';\nimport { StandardToken, VaultLib } from '@enzymefinance/protocol';\nimport { computed, defineComponent, Ref, ref, watchEffect } from 'vue';\nimport { calcPercentageMap, TokenData } from '@/util/tokens';\nimport { getGasPrice } from '@/util/getGasPrice';\nimport { getTokens } from '@/data/enzymegraph';\nimport { asyncComputed } from '@vueuse/core';\nimport { enzymeService, Fund } from '@/web3/enzymeService';\n\nasync function trackAssets(\n  address: string,\n  provider: Provider\n): Promise<Record<string, BigNumber>> {\n  const lib = new VaultLib(address, web3Service.getProvider());\n  const holdings = await lib.getTrackedAssets();\n  const tokenMap: Record<string, BigNumber> = {};\n  await Promise.all(\n    holdings.map((token) => {\n      const tokenContract = new StandardToken(token, provider);\n      return tokenContract.balanceOf\n        .args(address)\n        .call()\n        .then((value) => (tokenMap[token.toLowerCase()] = value));\n    })\n  );\n  return tokenMap;\n}\n\nexport default defineComponent({\n  name: 'FarmingStrategy',\n\n  setup() {\n    const partialTokens: Ref<TokenData[]> = asyncComputed(async () => {\n      const tokenRequestResult = await getTokens(web3Service.isMainnet());\n      const namesOnly: TokenData[] = tokenRequestResult.assets\n        // not sure why, the bot example code also filters for this\n        .filter((asset) => asset.derivativeType && asset.name.includes('Curve.fi'))\n        .map((asset) => ({\n          id: asset.id.toLowerCase(),\n          name: asset.name,\n          symbol: asset.symbol,\n          value: asset.price?.price ?? -1,\n          ownedAmount: FixedNumber.from('0'),\n          decimals: asset.decimals,\n        }));\n      return namesOnly;\n    });\n\n    const tokens: Ref<TokenData[]> = ref([]);\n    const distribution: Ref<Record<string, number>> = ref({});\n    const startingDistribution: Ref<Record<string, number>> = ref({});\n\n    const funds = computed(() => enzymeService.getFunds());\n    const selectFund = (fund: Fund) => enzymeService.selectFund(fund);\n\n    watchEffect(async () => {\n      const fund = enzymeService.status().selectedFund;\n      const tokenList = partialTokens.value;\n\n      if (tokenList) {\n        if (fund) {\n          const assetMap = await trackAssets(fund.id, web3Service.getProvider());\n\n          tokens.value = tokenList.map((token) => {\n            let value = token.value;\n            if (value < 0) {\n              // TODO: look up value on uniswap\n              value = 1.0;\n            }\n            let owned = token.ownedAmount;\n            const ownedBigNumber = assetMap[token.id];\n            if (ownedBigNumber) {\n              owned = FixedNumber.fromValue(ownedBigNumber, token.decimals);\n            }\n            return {\n              ...token,\n              ownedAmount: owned,\n              value: value,\n            };\n          });\n          distribution.value = calcPercentageMap(tokens.value);\n          startingDistribution.value = Object.assign({}, distribution.value);\n        } else {\n          tokens.value = tokenList;\n        }\n      }\n    });\n    /*\n    watchEffect(async() => {\n      const gasPrice = await getGasPrice(30);\n      return{gasPrice}\n    })*/\n    const gasPrice = asyncComputed(() => getGasPrice(10));\n\n    const distributionText = computed(() => {\n      let msg = '';\n      Object.entries(distribution.value).forEach((entry) => {\n        const original = startingDistribution.value[entry[0]] ?? 0.0;\n        if (entry[1] != original) {\n          msg += `${entry[0]}: change ${entry[1] - original}\\n`;\n        }\n      });\n      return msg;\n    });\n\n    return {\n      tokens,\n      distribution,\n      funds,\n      state: web3Service.status(),\n      selectFund,\n      enzymeState: enzymeService.status(),\n      distributionText,\n      gasPrice,\n    };\n  },\n\n  components: { FarmingStrategy },\n});\n</script>\n","<template>\n  <div></div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'FarmingStrategy',\n  props: {\n    msg: String,\n  },\n});\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n","\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'FarmingStrategy',\n  props: {\n    msg: String,\n  },\n});\n","import { render } from \"./Farming.vue?vue&type=template&id=403560f2&scoped=true\"\nimport script from \"./Farming.vue?vue&type=script&lang=ts\"\nexport * from \"./Farming.vue?vue&type=script&lang=ts\"\n\nimport \"./Farming.vue?vue&type=style&index=0&id=403560f2&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-403560f2\"\n\nexport default script","import axios from 'axios';\n\nexport async function getGasPrice(maxWait: number): Promise<number> {\n  try {\n    const response = await axios.get('https://ethgasstation.info/json/ethgasAPI.json');\n    const data = response.data.gasPriceRange;\n    const price = Object.keys(data).find((price) => parseFloat(data[price]) <= maxWait);\n    return (price || response.data.fast) / 10;\n  } catch (error) {\n    throw new Error(`Failed to fetch gas price data: ${error}`);\n  }\n}\n","\n/* eslint-disable vue/no-unused-components */\nimport FarmingStrategy from '@/components/Farming.vue'; // @ is an alias to /src\nimport { web3Service, Provider } from '@/web3/web3Service';\nimport { BigNumber, FixedNumber } from 'ethers';\nimport { StandardToken, VaultLib } from '@enzymefinance/protocol';\nimport { computed, defineComponent, Ref, ref, watchEffect } from 'vue';\nimport { calcPercentageMap, TokenData } from '@/util/tokens';\nimport { getGasPrice } from '@/util/getGasPrice';\nimport { getTokens } from '@/data/enzymegraph';\nimport { asyncComputed } from '@vueuse/core';\nimport { enzymeService, Fund } from '@/web3/enzymeService';\n\nasync function trackAssets(\n  address: string,\n  provider: Provider\n): Promise<Record<string, BigNumber>> {\n  const lib = new VaultLib(address, web3Service.getProvider());\n  const holdings = await lib.getTrackedAssets();\n  const tokenMap: Record<string, BigNumber> = {};\n  await Promise.all(\n    holdings.map((token) => {\n      const tokenContract = new StandardToken(token, provider);\n      return tokenContract.balanceOf\n        .args(address)\n        .call()\n        .then((value) => (tokenMap[token.toLowerCase()] = value));\n    })\n  );\n  return tokenMap;\n}\n\nexport default defineComponent({\n  name: 'FarmingStrategy',\n\n  setup() {\n    const partialTokens: Ref<TokenData[]> = asyncComputed(async () => {\n      const tokenRequestResult = await getTokens(web3Service.isMainnet());\n      const namesOnly: TokenData[] = tokenRequestResult.assets\n        // not sure why, the bot example code also filters for this\n        .filter((asset) => asset.derivativeType && asset.name.includes('Curve.fi'))\n        .map((asset) => ({\n          id: asset.id.toLowerCase(),\n          name: asset.name,\n          symbol: asset.symbol,\n          value: asset.price?.price ?? -1,\n          ownedAmount: FixedNumber.from('0'),\n          decimals: asset.decimals,\n        }));\n      return namesOnly;\n    });\n\n    const tokens: Ref<TokenData[]> = ref([]);\n    const distribution: Ref<Record<string, number>> = ref({});\n    const startingDistribution: Ref<Record<string, number>> = ref({});\n\n    const funds = computed(() => enzymeService.getFunds());\n    const selectFund = (fund: Fund) => enzymeService.selectFund(fund);\n\n    watchEffect(async () => {\n      const fund = enzymeService.status().selectedFund;\n      const tokenList = partialTokens.value;\n\n      if (tokenList) {\n        if (fund) {\n          const assetMap = await trackAssets(fund.id, web3Service.getProvider());\n\n          tokens.value = tokenList.map((token) => {\n            let value = token.value;\n            if (value < 0) {\n              // TODO: look up value on uniswap\n              value = 1.0;\n            }\n            let owned = token.ownedAmount;\n            const ownedBigNumber = assetMap[token.id];\n            if (ownedBigNumber) {\n              owned = FixedNumber.fromValue(ownedBigNumber, token.decimals);\n            }\n            return {\n              ...token,\n              ownedAmount: owned,\n              value: value,\n            };\n          });\n          distribution.value = calcPercentageMap(tokens.value);\n          startingDistribution.value = Object.assign({}, distribution.value);\n        } else {\n          tokens.value = tokenList;\n        }\n      }\n    });\n    /*\n    watchEffect(async() => {\n      const gasPrice = await getGasPrice(30);\n      return{gasPrice}\n    })*/\n    const gasPrice = asyncComputed(() => getGasPrice(10));\n\n    const distributionText = computed(() => {\n      let msg = '';\n      Object.entries(distribution.value).forEach((entry) => {\n        const original = startingDistribution.value[entry[0]] ?? 0.0;\n        if (entry[1] != original) {\n          msg += `${entry[0]}: change ${entry[1] - original}\\n`;\n        }\n      });\n      return msg;\n    });\n\n    return {\n      tokens,\n      distribution,\n      funds,\n      state: web3Service.status(),\n      selectFund,\n      enzymeState: enzymeService.status(),\n      distributionText,\n      gasPrice,\n    };\n  },\n\n  components: { FarmingStrategy },\n});\n","import { render } from \"./FarmingStrategy.vue?vue&type=template&id=5e9966a2\"\nimport script from \"./FarmingStrategy.vue?vue&type=script&lang=ts\"\nexport * from \"./FarmingStrategy.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { enzymeService } from '@/web3/enzymeService';\nimport { computed, defineComponent, watchEffect } from 'vue';\nimport EnzymeSliders from './EnzymeSliders.vue';\nimport FarmingStrategy from './FarmingStrategy.vue';\nimport { useRoute } from 'vue-router';\n\nexport default defineComponent({\n  props: {\n    account: String,\n  },\n  setup(props) {\n    watchEffect(() => {\n      const selectedFund = props.account;\n      const availableFunds = enzymeService.status().funds;\n      if (selectedFund) {\n        const fund = availableFunds.find(\n          (fund) => fund.id.toLowerCase() == selectedFund.toLowerCase()\n        );\n        if (fund) {\n          enzymeService.selectFund(fund);\n        }\n      }\n    });\n    return {\n      fund: computed(() => enzymeService.status().selectedFund),\n      showFarming: useRoute().query.farming ?? false,\n    };\n  },\n  components: { EnzymeSliders, FarmingStrategy },\n});\n","import { render } from \"./EnzymeAccount.vue?vue&type=template&id=8b49ace4\"\nimport script from \"./EnzymeAccount.vue?vue&type=script&lang=ts\"\nexport * from \"./EnzymeAccount.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"home\">\n    <div class=\"hero position-relative text-center p-2\">\n      <h1 class=\"display-1\"><img src=\"@/assets/logo.png\" /> TokenBlend</h1>\n      <h2 class=\"h2\">Asset allocation for your Enzyme funds and Ethereum wallet</h2>\n    </div>\n    <div v-html=\"content\" class=\"py-2\"></div>\n    <router-link :to=\"{ name: 'WalletAccount' }\" class=\"btn btn-primary my-2\"\n      >Open your account</router-link\n    >\n    <div class=\"footer py-4\">\n      <!-- nothing yet -->\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport marked from 'marked';\nimport contentMd from '!raw-loader!./homecontent.txt';\n\nexport default defineComponent({\n  name: 'Home',\n  setup() {\n    return {\n      content: marked(contentMd),\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.hero::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url(https://images.unsplash.com/photo-1529517986296-847580704921?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1650&q=80);\n  background-size: cover;\n  filter: brightness(50%);\n  z-index: -1;\n}\n.hero {\n  margin-top: -0.5rem;\n  color: white;\n}\n.display-1 {\n  padding-top: 10rem;\n  padding-bottom: 4rem;\n}\n.h2 {\n  padding-bottom: 8rem;\n}\n</style>\n","export default \"Use this dApp to perform token asset allocation on either a native Ethereum wallet or an Enzyme vault.\\n\\nCurrent features implemented:\\n\\n* Adjust/rebalance token \\\"blends\\\" with sliders\\n* Deposit supported tokens in yield-generating Idle tokens (and withdraw when necessary for rebalancing), native wallet only.\\n* Generate a simple trading plan to reach the desired blend through token swaps.\\n* Token swaps using Paraswap (native wallet only) or Uniswap.\\n\\n[ETHGlobal showcase page for TokenBlend](https://showcase.ethglobal.co/hackmoney2021/tokenblend)\\n\\n## Demo video\\n\\n[![Demo video](https://img.youtube.com/vi/qcvPBpOk3f0/0.jpg)](https://www.youtube.com/watch?v=qcvPBpOk3f0)\\n\";","\nimport { defineComponent } from 'vue';\nimport marked from 'marked';\nimport contentMd from '!raw-loader!./homecontent.txt';\n\nexport default defineComponent({\n  name: 'Home',\n  setup() {\n    return {\n      content: marked(contentMd),\n    };\n  },\n});\n","import { render } from \"./Home.vue?vue&type=template&id=6d3d355a&scoped=true\"\nimport script from \"./Home.vue?vue&type=script&lang=ts\"\nexport * from \"./Home.vue?vue&type=script&lang=ts\"\n\nimport \"./Home.vue?vue&type=style&index=0&id=6d3d355a&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-6d3d355a\"\n\nexport default script","<template>\n  <div v-if=\"state.connected\">\n    <div v-if=\"noFunds\" class=\"alert alert-warning\">\n      You have no balance in ERC-20 tokens (ETH needs to be converted to WETH first).\n      <a\n        href=\"https://app.uniswap.org/#/swap?outputCurrency=0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2&inputCurrency=ETH\"\n        target=\"_new\"\n        >Get WETH</a\n      >\n    </div>\n    <a\n      v-else\n      class=\"float-end\"\n      href=\"https://app.uniswap.org/#/swap?outputCurrency=0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2&inputCurrency=ETH\"\n      target=\"_new\"\n      >Get WETH</a\n    >\n    <h2>{{ state.address }}</h2>\n    <div class=\"row\">\n      <div>\n        {{ distributionText }}\n        <button class=\"btn btn-primary float-end\" @click=\"execute\" v-if=\"orderVisible\">\n          Execute\n        </button>\n      </div>\n      <div class=\"col\">\n        <SliderPanel :tokenData=\"tokenData\" v-model=\"distribution\" :withStaking=\"true\" />\n      </div>\n    </div>\n    <OrderPlanDialog v-model:visible=\"orderDialogVisible\" :orderPlan=\"orderPlan\" />\n  </div>\n  <Web3Info v-else />\n</template>\n\n<script lang=\"ts\">\nimport OrderPlanDialog from '@/components/OrderPlanDialog.vue';\nimport SliderPanel from '@/components/SliderPanel.vue';\nimport Web3Info from '@/components/Web3Info.vue';\nimport { defaultOrderPlanner, PlannedOrder } from '@/orderplan/orderplan';\nimport { calcSliderChangeResult } from '@/util/sliderUtil';\nimport { fetchTokens } from '@/util/tokenlist';\nimport { calcPercentageMap, getTokenBalance, TokenData } from '@/util/tokens';\nimport { getTokenPrices } from '@/web3/uniswapService';\nimport { idleService } from '@/web3/idleService';\nimport { web3Service } from '@/web3/web3Service';\nimport { asyncComputed } from '@vueuse/core';\nimport { BigNumber, FixedNumber } from 'ethers';\nimport { computed, defineComponent, ref, Ref, watchEffect } from 'vue';\nimport { reduceTokens, wrapDeposits } from '@/util/stakedTokens';\n\nexport default defineComponent({\n  setup() {\n    const tokenList = asyncComputed(() => fetchTokens(), []);\n    const tokenData: Ref<TokenData[]> = ref([]);\n    const distribution: Ref<Record<string, number>> = ref({});\n    const startingDistribution: Ref<Record<string, number>> = ref({});\n    const idleTokenList = asyncComputed(() => idleService.getTokenData());\n\n    // TODO: native ETH is not shown now (only WETH)\n\n    watchEffect(async () => {\n      const account = web3Service.status().address;\n      const tokens = tokenList.value;\n      const idleTokens = idleTokenList.value;\n      // Look up all balances and create TokenData\n      const balances = tokens.map((token) => {\n        if (account) {\n          return getTokenBalance(token.address, account);\n        } else {\n          return Promise.resolve(BigNumber.from('0'));\n        }\n      });\n      const usdAddress = '0x6B175474E89094C44Da98b954EedeAC495271d0F'; // DAI stablecoin\n      const tokenPriceMap = getTokenPrices(tokens.map((token) => token.address));\n      const tokenPrices = await tokenPriceMap;\n      const multiplier = 1.0 / (tokenPrices[usdAddress]?.derivedETH ?? 1.0);\n\n      let index = -1;\n      let basicTokens = await Promise.all(\n        tokens.map(async (tokenInfo) => {\n          index++;\n          let value =\n            parseFloat(tokenPrices[tokenInfo.address]?.derivedETH ?? '0.0001') * multiplier;\n          if (value == 0.0) {\n            value = 0.0001 * multiplier;\n          }\n          return {\n            id: tokenInfo.address,\n            name: tokenInfo.name,\n            symbol: tokenInfo.symbol,\n            decimals: tokenInfo.decimals,\n            ownedAmount: FixedNumber.fromValue(await balances[index], tokenInfo.decimals),\n            value: value,\n            logoUri: tokenInfo.logoURI,\n          } as TokenData;\n        })\n      );\n      if (basicTokens.length > 0 && idleTokens) {\n        basicTokens.push(...idleTokens);\n        basicTokens = reduceTokens(basicTokens);\n      }\n      tokenData.value = basicTokens.sort(\n        (a, b) => b.value * b.ownedAmount.toUnsafeFloat() - a.value * a.ownedAmount.toUnsafeFloat()\n      );\n      distribution.value = calcPercentageMap(tokenData.value);\n      startingDistribution.value = Object.assign({}, distribution.value);\n    });\n    const noFunds = computed(() => {\n      let value = 0.0;\n      tokenData.value.forEach((token) => (value += token.ownedAmount.toUnsafeFloat()));\n      return value < 1e-6;\n    });\n\n    const orderVisible = ref(false);\n    const distributionText = ref('');\n    watchEffect(() => {\n      const result = calcSliderChangeResult(distribution.value, startingDistribution.value);\n      orderVisible.value = result.hasChanges;\n      distributionText.value = result.message;\n    });\n    const orderDialogVisible = ref(false);\n    const orderPlan: Ref<PlannedOrder[]> = ref([]);\n    const execute = () => {\n      console.log(tokenData.value);\n      console.log('stakedUnderlyingValue' in tokenData.value[0]);\n      const plan = defaultOrderPlanner.createPlan(tokenData.value, distribution.value);\n      const withStakingPlan = wrapDeposits(tokenData.value, plan, idleService.supportedSymbols());\n      orderPlan.value = withStakingPlan;\n      orderDialogVisible.value = true;\n    };\n\n    const state = web3Service.status();\n    return {\n      state,\n      tokenData,\n      distribution,\n      orderVisible,\n      distributionText,\n      execute,\n      orderDialogVisible,\n      orderPlan,\n      noFunds,\n    };\n  },\n  components: { SliderPanel, OrderPlanDialog, Web3Info },\n  methods: {},\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.logo-img {\n  width: 2rem;\n  height: 2rem;\n}\n</style>\n","<template>\n  <div>\n    <div v-if=\"status.initializing\" class=\"text-center\">Connecting...</div>\n    <div v-else-if=\"!status.connected\" class=\"d-flex flex-column align-items-center\">\n      <img :src=\"publicPath + 'mm-logo.svg'\" class=\"p-2\" />\n      <p class=\"pt-2 mb-0\">You need to connect your Metamask wallet to continue.</p>\n      <a class=\"btn btn-link mb-5\" target=\"_blank\" href=\"https://metamask.io/download.html\"\n        >Get metamask</a\n      >\n\n      <button type=\"button\" class=\"btn btn-primary mb-2\" @click=\"connect\">Connect now</button>\n      <p v-if=\"status.lastErrorMessage\" class=\"mb-2 alert alert-warning\">\n        {{ status.lastErrorMessage }}\n      </p>\n    </div>\n    <span v-else> Connected to {{ status.account }} </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { web3Service } from '@/web3/web3Service';\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  setup() {\n    const status = web3Service.status();\n    const connect = () => {\n      web3Service.init();\n    };\n    return {\n      status,\n      connect,\n      publicPath: process.env.BASE_URL,\n    };\n  },\n});\n</script>\n","\nimport { web3Service } from '@/web3/web3Service';\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  setup() {\n    const status = web3Service.status();\n    const connect = () => {\n      web3Service.init();\n    };\n    return {\n      status,\n      connect,\n      publicPath: process.env.BASE_URL,\n    };\n  },\n});\n","import { render } from \"./Web3Info.vue?vue&type=template&id=48fc48bc\"\nimport script from \"./Web3Info.vue?vue&type=script&lang=ts\"\nexport * from \"./Web3Info.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { TokenData } from './tokens';\nimport { FixedNumber } from 'ethers';\nimport { OrderType, PlannedOrder } from '@/orderplan/orderplan';\nimport { fixedNum } from './numbers';\n\nexport interface StakedToken extends TokenData {\n  stakedUnderlyingValue: FixedNumber;\n  description: string;\n  hasStaked: boolean;\n}\n\nexport function reduceTokens(allTokens: TokenData[]): StakedToken[] {\n  // Find all tokens with the same symbol\n  const tokensBySymbol: Record<string, TokenData[]> = {};\n  for (const token of allTokens) {\n    const tokenArray = tokensBySymbol[token.symbol];\n    if (!tokenArray) {\n      tokensBySymbol[token.symbol] = [token];\n    } else {\n      tokenArray.push(token);\n    }\n  }\n  console.log(allTokens, tokensBySymbol);\n\n  // Reduce all symbols to one item\n  const result: StakedToken[] = [];\n  for (const [symbol, tokenArray] of Object.entries(tokensBySymbol)) {\n    if (tokenArray.length === 0) {\n      console.log('Empty array for ' + symbol);\n      continue;\n    }\n    // Find the non-staked token version\n    const nonStakedIndex = tokenArray.findIndex((token) => !('stakedUnderlyingValue' in token));\n    if (nonStakedIndex === -1) {\n      throw new Error(`${symbol} only has staked tokens? ${tokenArray}`);\n    }\n    const nonStakedItem: TokenData = tokenArray.splice(nonStakedIndex, 1)[0];\n    const newToken: StakedToken = {\n      ...nonStakedItem,\n      stakedUnderlyingValue: FixedNumber.from(0.0),\n      description: `${nonStakedItem.ownedAmount} ${symbol}`,\n      hasStaked: false,\n    };\n    // Add up the stakedTokens\n    for (const _stakedToken of tokenArray) {\n      if (!('stakedUnderlyingValue' in _stakedToken)) {\n        throw new Error(`${symbol} has multiple unstaked tokens in list?`);\n      }\n      const stakedToken = _stakedToken as StakedToken;\n      newToken.ownedAmount = newToken.ownedAmount.addUnsafe(stakedToken.stakedUnderlyingValue);\n      newToken.stakedUnderlyingValue = newToken.stakedUnderlyingValue.addUnsafe(\n        stakedToken.stakedUnderlyingValue\n      );\n      newToken.description += '\\n' + stakedToken.description;\n      newToken.hasStaked = true;\n    }\n    result.push(newToken);\n  }\n  return result;\n}\n\n/**\n * Check if orderplan can be executed or that we first need to redeem some tokens.\n *\n * Also deposit tokens that can be deposited at the end.\n */\nexport function wrapDeposits(\n  tokenList: TokenData[],\n  orderplan: PlannedOrder[],\n  availableSymbols: Set<string>\n): PlannedOrder[] {\n  const result = [...orderplan];\n  const originalTokens = new Map<string, TokenData>();\n  const tokenStatus = new Map<string, TokenData>();\n  tokenList.forEach((token) => {\n    tokenStatus.set(token.id, { ...token });\n    originalTokens.set(token.id, token);\n  });\n\n  const redeemAmounts = new Map<string, FixedNumber>();\n\n  for (const order of orderplan) {\n    const destAmount = order.sendAmount\n      .mulUnsafe(fixedNum(order.fromToken.value))\n      .divUnsafe(fixedNum(order.toToken.value));\n    const from = tokenStatus.get(order.fromToken.id);\n    const to = tokenStatus.get(order.toToken.id);\n    if (!from || !to) {\n      throw new Error(`Token not found? ${order}.`);\n    }\n    from.ownedAmount = from.ownedAmount.subUnsafe(order.sendAmount);\n    to.ownedAmount = to.ownedAmount.addUnsafe(destAmount);\n    if ('stakedUnderlyingValue' in from) {\n      const stakedToken = from as StakedToken;\n      const freeAmount = stakedToken.ownedAmount.subUnsafe(stakedToken.stakedUnderlyingValue);\n      console.log(order.fromToken, freeAmount.toString());\n      if (freeAmount.isNegative()) {\n        const currentlyRedeemed = redeemAmounts.get(stakedToken.id);\n        if (!currentlyRedeemed) {\n          redeemAmounts.set(stakedToken.id, freeAmount.mulUnsafe(fixedNum(-1)));\n        } else {\n          redeemAmounts.set(\n            stakedToken.id,\n            currentlyRedeemed.addUnsafe(freeAmount.mulUnsafe(fixedNum(-1)))\n          );\n        }\n      }\n    }\n  }\n  console.log(redeemAmounts);\n\n  redeemAmounts.forEach((redeemAmount, id) => {\n    const token = originalTokens.get(id);\n    if (!token) {\n      throw new Error('Token not found ${id}');\n    }\n    if (availableSymbols.has(token.symbol)) {\n      result.unshift({\n        fromToken: token,\n        toToken: token,\n        sendAmount: redeemAmount,\n        ordertype: OrderType.REDEEM,\n      });\n    }\n  });\n\n  tokenStatus.forEach((tokenStatus, id) => {\n    if ('stakedUnderlyingValue' in tokenStatus && availableSymbols.has(tokenStatus.symbol)) {\n      const stakedToken = tokenStatus as StakedToken;\n      const freeAmount = stakedToken.ownedAmount.subUnsafe(stakedToken.stakedUnderlyingValue);\n      const originalToken = originalTokens.get(id);\n      if (!originalToken) {\n        throw new Error('Token not found ${id}');\n      }\n      // Only deposit $10 or more\n      if (freeAmount.toUnsafeFloat() * tokenStatus.value > 10) {\n        result.push({\n          fromToken: originalToken,\n          toToken: originalToken,\n          sendAmount: freeAmount,\n          ordertype: OrderType.DEPOSIT,\n        });\n      }\n    }\n  });\n  return result;\n}\n","\nimport OrderPlanDialog from '@/components/OrderPlanDialog.vue';\nimport SliderPanel from '@/components/SliderPanel.vue';\nimport Web3Info from '@/components/Web3Info.vue';\nimport { defaultOrderPlanner, PlannedOrder } from '@/orderplan/orderplan';\nimport { calcSliderChangeResult } from '@/util/sliderUtil';\nimport { fetchTokens } from '@/util/tokenlist';\nimport { calcPercentageMap, getTokenBalance, TokenData } from '@/util/tokens';\nimport { getTokenPrices } from '@/web3/uniswapService';\nimport { idleService } from '@/web3/idleService';\nimport { web3Service } from '@/web3/web3Service';\nimport { asyncComputed } from '@vueuse/core';\nimport { BigNumber, FixedNumber } from 'ethers';\nimport { computed, defineComponent, ref, Ref, watchEffect } from 'vue';\nimport { reduceTokens, wrapDeposits } from '@/util/stakedTokens';\n\nexport default defineComponent({\n  setup() {\n    const tokenList = asyncComputed(() => fetchTokens(), []);\n    const tokenData: Ref<TokenData[]> = ref([]);\n    const distribution: Ref<Record<string, number>> = ref({});\n    const startingDistribution: Ref<Record<string, number>> = ref({});\n    const idleTokenList = asyncComputed(() => idleService.getTokenData());\n\n    // TODO: native ETH is not shown now (only WETH)\n\n    watchEffect(async () => {\n      const account = web3Service.status().address;\n      const tokens = tokenList.value;\n      const idleTokens = idleTokenList.value;\n      // Look up all balances and create TokenData\n      const balances = tokens.map((token) => {\n        if (account) {\n          return getTokenBalance(token.address, account);\n        } else {\n          return Promise.resolve(BigNumber.from('0'));\n        }\n      });\n      const usdAddress = '0x6B175474E89094C44Da98b954EedeAC495271d0F'; // DAI stablecoin\n      const tokenPriceMap = getTokenPrices(tokens.map((token) => token.address));\n      const tokenPrices = await tokenPriceMap;\n      const multiplier = 1.0 / (tokenPrices[usdAddress]?.derivedETH ?? 1.0);\n\n      let index = -1;\n      let basicTokens = await Promise.all(\n        tokens.map(async (tokenInfo) => {\n          index++;\n          let value =\n            parseFloat(tokenPrices[tokenInfo.address]?.derivedETH ?? '0.0001') * multiplier;\n          if (value == 0.0) {\n            value = 0.0001 * multiplier;\n          }\n          return {\n            id: tokenInfo.address,\n            name: tokenInfo.name,\n            symbol: tokenInfo.symbol,\n            decimals: tokenInfo.decimals,\n            ownedAmount: FixedNumber.fromValue(await balances[index], tokenInfo.decimals),\n            value: value,\n            logoUri: tokenInfo.logoURI,\n          } as TokenData;\n        })\n      );\n      if (basicTokens.length > 0 && idleTokens) {\n        basicTokens.push(...idleTokens);\n        basicTokens = reduceTokens(basicTokens);\n      }\n      tokenData.value = basicTokens.sort(\n        (a, b) => b.value * b.ownedAmount.toUnsafeFloat() - a.value * a.ownedAmount.toUnsafeFloat()\n      );\n      distribution.value = calcPercentageMap(tokenData.value);\n      startingDistribution.value = Object.assign({}, distribution.value);\n    });\n    const noFunds = computed(() => {\n      let value = 0.0;\n      tokenData.value.forEach((token) => (value += token.ownedAmount.toUnsafeFloat()));\n      return value < 1e-6;\n    });\n\n    const orderVisible = ref(false);\n    const distributionText = ref('');\n    watchEffect(() => {\n      const result = calcSliderChangeResult(distribution.value, startingDistribution.value);\n      orderVisible.value = result.hasChanges;\n      distributionText.value = result.message;\n    });\n    const orderDialogVisible = ref(false);\n    const orderPlan: Ref<PlannedOrder[]> = ref([]);\n    const execute = () => {\n      console.log(tokenData.value);\n      console.log('stakedUnderlyingValue' in tokenData.value[0]);\n      const plan = defaultOrderPlanner.createPlan(tokenData.value, distribution.value);\n      const withStakingPlan = wrapDeposits(tokenData.value, plan, idleService.supportedSymbols());\n      orderPlan.value = withStakingPlan;\n      orderDialogVisible.value = true;\n    };\n\n    const state = web3Service.status();\n    return {\n      state,\n      tokenData,\n      distribution,\n      orderVisible,\n      distributionText,\n      execute,\n      orderDialogVisible,\n      orderPlan,\n      noFunds,\n    };\n  },\n  components: { SliderPanel, OrderPlanDialog, Web3Info },\n  methods: {},\n});\n","import { render } from \"./WalletAccount.vue?vue&type=template&id=5251df3b&scoped=true\"\nimport script from \"./WalletAccount.vue?vue&type=script&lang=ts\"\nexport * from \"./WalletAccount.vue?vue&type=script&lang=ts\"\n\nimport \"./WalletAccount.vue?vue&type=style&index=0&id=5251df3b&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-5251df3b\"\n\nexport default script","import { createRouter, createWebHashHistory, RouteRecordRaw } from 'vue-router';\nimport EnzymeAccount from '../views/EnzymeAccount.vue';\nimport Home from '../views/Home.vue';\nimport WalletAccount from '../views/WalletAccount.vue';\n\nconst routes: Array<RouteRecordRaw> = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home,\n  },\n  {\n    path: '/enzyme/:account',\n    name: 'EnzymeAccount',\n    component: EnzymeAccount,\n    props: true,\n  },\n  {\n    path: '/wallet',\n    name: 'WalletAccount',\n    component: WalletAccount,\n  },\n];\n\nconst router = createRouter({\n  // Disabled web history because we run on github pages.\n  //createWebHistory(process.env.BASE_URL),\n  history: createWebHashHistory(),\n  routes,\n});\n\nexport default router;\n","import '@/styles/style.scss';\nimport PrimeVue from 'primevue/config';\nimport Dialog from 'primevue/dialog';\nimport InputText from 'primevue/inputtext';\nimport Menubar from 'primevue/menubar';\nimport Slider from 'primevue/slider';\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport { web3Service } from './web3/web3Service';\n\nweb3Service.init();\nconst app = createApp(App);\napp.use(PrimeVue).use(router);\napp.component('Slider', Slider);\napp.component('InputText', InputText);\napp.component('Dialog', Dialog);\napp.component('Menubar', Menubar);\n\napp.mount('#app');\n","module.exports = __webpack_public_path__ + \"img/logo.41b3482d.png\";","module.exports = __webpack_public_path__ + \"img/paraswap.cac142fb.png\";"],"sourceRoot":""}